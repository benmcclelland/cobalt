/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char *)name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyObject_print,        /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyObject_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (flags & SWIG_POINTER_IMPLICIT_CONV) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    if (inst) {
      Py_DECREF(robj);
      robj = inst;
    }
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res;

#ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
#else
  if (!PyString_Check(name))
#endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  res = -1;
  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BlockSize swig_types[0]
#define SWIGTYPE_p_BlockSort_Field swig_types[1]
#define SWIGTYPE_p_Connectivity swig_types[2]
#define SWIGTYPE_p_ConstPtr swig_types[3]
#define SWIGTYPE_p_ConstPtrs swig_types[4]
#define SWIGTYPE_p_DimensionConnectivity swig_types[5]
#define SWIGTYPE_p_DrainedMidplanes swig_types[6]
#define SWIGTYPE_p_Exception swig_types[7]
#define SWIGTYPE_p_ExtendedOptions swig_types[8]
#define SWIGTYPE_p_Id swig_types[9]
#define SWIGTYPE_p_JobSort_Field swig_types[10]
#define SWIGTYPE_p_JobType swig_types[11]
#define SWIGTYPE_p_Midplanes swig_types[12]
#define SWIGTYPE_p_NodeBoards swig_types[13]
#define SWIGTYPE_p_PassthroughMidplanes swig_types[14]
#define SWIGTYPE_p_Pimpl swig_types[15]
#define SWIGTYPE_p_Ptr swig_types[16]
#define SWIGTYPE_p_Ptrs swig_types[17]
#define SWIGTYPE_p_RuntimeErrorT_bgsched__DatabaseErrors_t swig_types[18]
#define SWIGTYPE_p_SchedUtil_Errors swig_types[19]
#define SWIGTYPE_p_Shapes swig_types[20]
#define SWIGTYPE_p_Statuses swig_types[21]
#define SWIGTYPE_p_allocator_type swig_types[22]
#define SWIGTYPE_p_bgsched__Block swig_types[23]
#define SWIGTYPE_p_bgsched__BlockFilter swig_types[24]
#define SWIGTYPE_p_bgsched__BlockFilter__BlockSize__Value swig_types[25]
#define SWIGTYPE_p_bgsched__Block__Connectivity__Value swig_types[26]
#define SWIGTYPE_p_bgsched__Cable swig_types[27]
#define SWIGTYPE_p_bgsched__ComputeHardware swig_types[28]
#define SWIGTYPE_p_bgsched__Coordinates swig_types[29]
#define SWIGTYPE_p_bgsched__DatabaseErrors swig_types[30]
#define SWIGTYPE_p_bgsched__Dimension swig_types[31]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Block__Status_t swig_types[32]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Hardware__State_t swig_types[33]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Job__Status_t swig_types[34]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t swig_types[35]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t swig_types[36]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t swig_types[37]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t swig_types[38]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t swig_types[39]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t swig_types[40]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t swig_types[41]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t swig_types[42]
#define SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t swig_types[43]
#define SWIGTYPE_p_bgsched__Hardware swig_types[44]
#define SWIGTYPE_p_bgsched__IOLink swig_types[45]
#define SWIGTYPE_p_bgsched__InitializationErrors swig_types[46]
#define SWIGTYPE_p_bgsched__InputErrors swig_types[47]
#define SWIGTYPE_p_bgsched__InternalErrors swig_types[48]
#define SWIGTYPE_p_bgsched__InvalidArgumentT_bgsched__InputErrors_t swig_types[49]
#define SWIGTYPE_p_bgsched__Job swig_types[50]
#define SWIGTYPE_p_bgsched__JobFilter swig_types[51]
#define SWIGTYPE_p_bgsched__JobFilter__JobType__Value swig_types[52]
#define SWIGTYPE_p_bgsched__LogicErrorT_bgsched__InternalErrors_t swig_types[53]
#define SWIGTYPE_p_bgsched__Midplane swig_types[54]
#define SWIGTYPE_p_bgsched__Node swig_types[55]
#define SWIGTYPE_p_bgsched__NodeBoard swig_types[56]
#define SWIGTYPE_p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t swig_types[57]
#define SWIGTYPE_p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t swig_types[58]
#define SWIGTYPE_p_bgsched__RuntimeErrors swig_types[59]
#define SWIGTYPE_p_bgsched__SchedUtil swig_types[60]
#define SWIGTYPE_p_bgsched__Shape swig_types[61]
#define SWIGTYPE_p_bgsched__Switch swig_types[62]
#define SWIGTYPE_p_bgsched__SwitchSettings swig_types[63]
#define SWIGTYPE_p_bgsched__TimeInterval swig_types[64]
#define SWIGTYPE_p_bgsched__allocator__Allocator swig_types[65]
#define SWIGTYPE_p_bgsched__allocator__AllocatorEventListener swig_types[66]
#define SWIGTYPE_p_bgsched__allocator__AllocatorEventListener__AllocateCompleted swig_types[67]
#define SWIGTYPE_p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted swig_types[68]
#define SWIGTYPE_p_bgsched__allocator__LiveModel swig_types[69]
#define SWIGTYPE_p_bgsched__allocator__Midplanes swig_types[70]
#define SWIGTYPE_p_bgsched__allocator__Model swig_types[71]
#define SWIGTYPE_p_bgsched__allocator__ResourceSpec swig_types[72]
#define SWIGTYPE_p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value swig_types[73]
#define SWIGTYPE_p_bgsched__core__BlockSort swig_types[74]
#define SWIGTYPE_p_bgsched__core__BlockSort__Field__Value swig_types[75]
#define SWIGTYPE_p_bgsched__core__JobSort swig_types[76]
#define SWIGTYPE_p_bgsched__core__JobSort__Field__Value swig_types[77]
#define SWIGTYPE_p_bgsched__core__SortOrder swig_types[78]
#define SWIGTYPE_p_boost__posix_time__ptime swig_types[79]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t swig_types[80]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t swig_types[81]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t swig_types[82]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t swig_types[83]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t swig_types[84]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t swig_types[85]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t swig_types[86]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t swig_types[87]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t swig_types[88]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t swig_types[89]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t swig_types[90]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t swig_types[91]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Impl_t swig_types[92]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t swig_types[93]
#define SWIGTYPE_p_boost__shared_ptrT_bgsched__core__Impl_t swig_types[94]
#define SWIGTYPE_p_char swig_types[95]
#define SWIGTYPE_p_difference_type swig_types[96]
#define SWIGTYPE_p_f_r_q_const__bgsched__Coordinates_p_void__void swig_types[97]
#define SWIGTYPE_p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void swig_types[98]
#define SWIGTYPE_p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void swig_types[99]
#define SWIGTYPE_p_key_type swig_types[100]
#define SWIGTYPE_p_mapped_type swig_types[101]
#define SWIGTYPE_p_p_PyObject swig_types[102]
#define SWIGTYPE_p_size_type swig_types[103]
#define SWIGTYPE_p_std__allocatorT_bgsched__Shape_t swig_types[104]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t swig_types[105]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t swig_types[106]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t swig_types[107]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t swig_types[108]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t swig_types[109]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t swig_types[110]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t swig_types[111]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t swig_types[112]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t swig_types[113]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t swig_types[114]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t swig_types[115]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t swig_types[116]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t swig_types[117]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t swig_types[118]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t swig_types[119]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t swig_types[120]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t swig_types[121]
#define SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t swig_types[122]
#define SWIGTYPE_p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t swig_types[123]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[124]
#define SWIGTYPE_p_std__invalid_argument swig_types[125]
#define SWIGTYPE_p_std__lessT_bgsched__Block__Status_t swig_types[126]
#define SWIGTYPE_p_std__lessT_bgsched__Dimension_t swig_types[127]
#define SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t swig_types[128]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[129]
#define SWIGTYPE_p_std__ostream swig_types[130]
#define SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t swig_types[131]
#define SWIGTYPE_p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t swig_types[132]
#define SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t swig_types[133]
#define SWIGTYPE_p_std__vectorT__Tp__Alloc_t swig_types[134]
#define SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t swig_types[135]
#define SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t swig_types[136]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t swig_types[137]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t swig_types[138]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t swig_types[139]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t swig_types[140]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t swig_types[141]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t swig_types[142]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t swig_types[143]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t swig_types[144]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t swig_types[145]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t swig_types[146]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t swig_types[147]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t swig_types[148]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t swig_types[149]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t swig_types[150]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t swig_types[151]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t swig_types[152]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t swig_types[153]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t swig_types[154]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t swig_types[155]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[156]
#define SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t swig_types[157]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[158]
#define SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t swig_types[159]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[160]
#define SWIGTYPE_p_uint8_t swig_types[161]
#define SWIGTYPE_p_unsigned_int swig_types[162]
#define SWIGTYPE_p_unsigned_long swig_types[163]
#define SWIGTYPE_p_value_type swig_types[164]
static swig_type_info *swig_types[166];
static swig_module_info swig_module = {swig_types, 165, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pybgsched.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pybgsched

#else
#  define SWIG_init    init_pybgsched

#endif
#define SWIG_name    "_pybgsched"

#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <set>


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <bgsched/types.h>


#include <bgsched/EnumWrapper.h>


#include <bgsched/core/SortOrder.h>


#include <bgsched/Dimension.h>
#include <stdint.h>
#include <string>


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN char const *bgsched_Dimension___str__(bgsched::Dimension *self){
            return std::string(*self).c_str();
        }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <bgsched/Coordinates.h>


SWIGINTERN uint32_t bgsched_Coordinates___getitem____SWIG_0(bgsched::Coordinates *self,uint32_t element){
            return (*self)[element];
        }
SWIGINTERN uint32_t bgsched_Coordinates___getitem____SWIG_1(bgsched::Coordinates *self,bgsched::Dimension::Value element){
            return (*self)[element];
        }
SWIGINTERN bgsched::Coordinates &bgsched_Coordinates___assign__(bgsched::Coordinates *self,bgsched::Coordinates const &coord){
            return ((*self) = coord);
        }
SWIGINTERN char const *bgsched_Coordinates___str__(bgsched::Coordinates *self){
            static char retstr[32];
            sprintf(retstr, "(%d, %d, %d, %d, %d)", (*self)[0],(*self)[1],(*self)[2],(*self)[3],(*self)[4]);
            return retstr;
        }

#include <bgsched/Job.h>


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#define SWIG_NO_NULL_DELETER_SWIG_BUILTIN_INIT

SWIGINTERN int bgsched_Job_getStatusValue(bgsched::Job *self){
        return (self->getStatus()).toValue();
    }
SWIGINTERN std::string bgsched_Job_getInUseString(bgsched::Job *self){
        bgsched::Job::Status v = (self->getStatus()).toValue();
        switch(v){
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Setup:
        return std::string("Setup" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Loading:
        return std::string("Loading" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Starting:
        return std::string("Starting" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Running:
        return std::string("Running" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Debug:
        return std::string("Debug" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Cleanup:
        return std::string("Cleanup" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Terminated:
        return std::string("Terminated" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Job::Error:
        return std::string("Error" );
        break;
/*@SWIG@*/
            default:
                return std::string("UnknownState");
        }       
        return std::string("UnknownState");
    }

#include <bgsched/core/JobSort.h>


typedef bgsched::core::JobSort::Field JobSort_Field;


#include <bgsched/JobFilter.h>


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


typedef bgsched::JobFilter::JobType JobType;


#include <bgsched/Hardware.h>

SWIGINTERN int bgsched_Hardware_getStateValue(bgsched::Hardware *self){
        return (self->getState()).toValue();
    }
SWIGINTERN std::string bgsched_Hardware_getStateString(bgsched::Hardware *self){
        bgsched::Hardware::State v = (self->getState()).toValue();
        switch(v){
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Hardware::Available:
        return std::string("Available" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Hardware::Missing:
        return std::string("Missing" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Hardware::Error:
        return std::string("Error" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Hardware::Service:
        return std::string("Service" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Hardware::SoftwareFailure:
        return std::string("SoftwareFailure" );
        break;
/*@SWIG@*/
            default:
                return std::string("UnknownState");
        }
    
        return std::string("UnknownState");
    }
SWIGINTERN char const *bgsched_Hardware___str__(bgsched::Hardware *self){
        return self->toString().c_str();
    }

#include <bgsched/Node.h>


#include <bgsched/Shape.h>


#include <bgsched/Cable.h>


#include <bgsched/SwitchSettings.h>


#include <bgsched/Switch.h>

SWIGINTERN int bgsched_Switch_getInUseValue(bgsched::Switch *self){
        return (self->getInUse()).toValue();
    }
SWIGINTERN std::string bgsched_Switch_getInUseString(bgsched::Switch *self){
        bgsched::Switch::InUse v = (self->getInUse()).toValue();
        switch(v){
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::NotInUse:
        return std::string("NotInUse" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::IncludedBothPortsInUse:
        return std::string("IncludedBothPortsInUse" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::IncludedOutputPortInUse:
        return std::string("IncludedOutputPortInUse" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::IncludedInputPortInUse:
        return std::string("IncludedInputPortInUse" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::Wrapped:
        return std::string("Wrapped" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::Passthrough:
        return std::string("Passthrough" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Switch::WrappedPassthrough:
        return std::string("WrappedPassthrough" );
        break;
/*@SWIG@*/
            default:
                return std::string("UnknownState");
        }       
        return std::string("UnknownState");
    }

#include <bgsched/NodeBoard.h>

SWIGINTERN int bgsched_NodeBoard_getQuadrantValue(bgsched::NodeBoard *self){
        return self->getQuadrant().toValue();
    }
SWIGINTERN std::string bgsched_NodeBoard_getQuadrantString(bgsched::NodeBoard *self){

        bgsched::NodeBoard::Quadrant v = self->getQuadrant().toValue();
        if (v == bgsched::NodeBoard::Q1)
            return std::string("Q1");
        else if (v == bgsched::NodeBoard::Q2)
            return std::string("Q2");
        else if (v == bgsched::NodeBoard::Q3)
            return std::string("Q3");
        else if (v == bgsched::NodeBoard::Q4)
            return std::string("Q4");    

        return std::string("UnknownState");

    }

#include <bgsched/Midplane.h>

SWIGINTERN int bgsched_Midplane_getInUseValue(bgsched::Midplane *self){
        return (self->getInUse()).toValue();
    }
SWIGINTERN std::string bgsched_Midplane_getInUseString(bgsched::Midplane *self){
        bgsched::Midplane::InUse v = (self->getInUse()).toValue();
        switch(v){
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Midplane::NotInUse:
        return std::string("NotInUse" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Midplane::AllInUse:
        return std::string("AllInUse" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Midplane::SubdividedInUse:
        return std::string("SubdividedInUse" );
        break;
/*@SWIG@*/
            default:
                return std::string("UnknownState");
        }
        
        return std::string("UnknownState");
    }

#include <bgsched/Documentation.h>


#include <bgsched/ComputeHardware.h>


#include <bgsched/DatabaseException.h>


#include <bgsched/core/BlockSort.h>


typedef bgsched::core::BlockSort::Field BlockSort_Field;


#include <bgsched/IOLink.h>


#include <bgsched/Exception.h>


#include <bgsched/Block.h>


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN int bgsched_Block_getStatusValue(bgsched::Block *self){
        return (self->getStatus()).toValue();
    }
SWIGINTERN std::string bgsched_Block_getStatusString(bgsched::Block *self){
        bgsched::Block::Status v = (self->getStatus()).toValue();
        switch(v){
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Allocated:
        return std::string("Allocated" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Booting:
        return std::string("Booting" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Free:
        return std::string("Free" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Initialized:
        return std::string("Initialized" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Terminating:
        return std::string("Terminating" );
        break;
/*@SWIG@*/
            default:
                return std::string("UnknownState");
        }       
        return std::string("UnknownState");
    }

typedef bgsched::Block::Connectivity Connectivity;


#include <bgsched/BlockFilter.h>


typedef bgsched::BlockFilter::BlockSize BlockSize;


#include <bgsched/SchedUtil.h>


typedef bgsched::SchedUtil::Errors SchedUtil_Errors;


#include <bgsched/InitializationException.h>


#include <bgsched/InternalException.h>


#include <bgsched/InputException.h>


#include <bgsched/TimeInterval.h>


#include <bgsched/RuntimeException.h>


#include <bgsched/allocator/AllocatorEventListener.h>


#include <bgsched/allocator/ResourceSpec.h>


#include <bgsched/allocator/Midplanes.h>


#include <bgsched/allocator/Model.h>


#include <bgsched/allocator/LiveModel.h>

SWIGINTERN int bgsched_allocator_LiveModel_getBlockStatusValue(bgsched::allocator::LiveModel *self,std::string const &blockName){
        return self->getBlockStatus(blockName).toValue();
    }
SWIGINTERN std::string bgsched_allocator_LiveModel_getBlockStatusString(bgsched::allocator::LiveModel *self,std::string const &blockName){
        
        bgsched::Block::Status v = (self->getBlockStatus(blockName)).toValue();
        switch(v){
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Allocated:
        return std::string("Allocated" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Booting:
        return std::string("Booting" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Free:
        return std::string("Free" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Initialized:
        return std::string("Initialized" );
        break;
/*@SWIG@*/
            /*@SWIG:pybgsched_swig_macros.i,14,PYBGSCHED_CASE_ENUM_TO_STRING@*/
    case bgsched::Block::Terminating:
        return std::string("Terminating" );
        break;
/*@SWIG@*/
            default:
                return std::string("UnknownState");
        }       
        return std::string("UnknownState");
    }

#include <bgsched/allocator/Allocator.h>


#include <bgsched/bgsched.h>


#include <bgsched/core/core.h>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v = InputSeq()) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::NodeBoard > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::NodeBoard >"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::NodeBoard >, std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::NodeBoard >" "," "std::allocator< boost::shared_ptr< bgsched::NodeBoard > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_NodeBoard_Ptr_Sg__iterator(std::vector< bgsched::NodeBoard::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____nonzero__(std::vector< bgsched::NodeBoard::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____bool__(std::vector< bgsched::NodeBoard::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____len__(std::vector< bgsched::NodeBoard::Ptr > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type std_vector_Sl_bgsched_NodeBoard_Ptr_Sg__pop(std::vector< bgsched::NodeBoard::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____getslice__(std::vector< bgsched::NodeBoard::Ptr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::NodeBoard::Ptr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type j,std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &v=std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____delslice__(std::vector< bgsched::NodeBoard::Ptr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::NodeBoard::Ptr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::NodeBoard::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::NodeBoard::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::NodeBoard::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::NodeBoard::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::NodeBoard::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::NodeBoard::Ptr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_Ptr_Sg__append(std::vector< bgsched::NodeBoard::Ptr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::NodeBoard const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::NodeBoard const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::NodeBoard const >, std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::NodeBoard const >" "," "std::allocator< boost::shared_ptr< bgsched::NodeBoard const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg__iterator(std::vector< bgsched::NodeBoard::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____nonzero__(std::vector< bgsched::NodeBoard::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____bool__(std::vector< bgsched::NodeBoard::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____len__(std::vector< bgsched::NodeBoard::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg__pop(std::vector< bgsched::NodeBoard::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____getslice__(std::vector< bgsched::NodeBoard::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::NodeBoard::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &v=std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____delslice__(std::vector< bgsched::NodeBoard::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::NodeBoard::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::NodeBoard::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::NodeBoard::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::NodeBoard::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::NodeBoard::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::NodeBoard::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::NodeBoard::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg__append(std::vector< bgsched::NodeBoard::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Midplane > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Midplane >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Midplane >, std::allocator< boost::shared_ptr< bgsched::Midplane > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Midplane >" "," "std::allocator< boost::shared_ptr< bgsched::Midplane > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Midplane_Ptr_Sg__iterator(std::vector< bgsched::Midplane::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Midplane_Ptr_Sg____nonzero__(std::vector< bgsched::Midplane::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Midplane_Ptr_Sg____bool__(std::vector< bgsched::Midplane::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type std_vector_Sl_bgsched_Midplane_Ptr_Sg____len__(std::vector< bgsched::Midplane::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type std_vector_Sl_bgsched_Midplane_Ptr_Sg__pop(std::vector< bgsched::Midplane::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *std_vector_Sl_bgsched_Midplane_Ptr_Sg____getslice__(std::vector< bgsched::Midplane::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Midplane::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &v=std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____delslice__(std::vector< bgsched::Midplane::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Midplane::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *std_vector_Sl_bgsched_Midplane_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Midplane::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Midplane::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Midplane::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Midplane::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &std_vector_Sl_bgsched_Midplane_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Midplane::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Midplane::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_Ptr_Sg__append(std::vector< bgsched::Midplane::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Midplane const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Midplane const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Midplane const >, std::allocator< boost::shared_ptr< bgsched::Midplane const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Midplane const >" "," "std::allocator< boost::shared_ptr< bgsched::Midplane const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Midplane_ConstPtr_Sg__iterator(std::vector< bgsched::Midplane::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____nonzero__(std::vector< bgsched::Midplane::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____bool__(std::vector< bgsched::Midplane::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____len__(std::vector< bgsched::Midplane::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type std_vector_Sl_bgsched_Midplane_ConstPtr_Sg__pop(std::vector< bgsched::Midplane::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____getslice__(std::vector< bgsched::Midplane::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Midplane::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &v=std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____delslice__(std::vector< bgsched::Midplane::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Midplane::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Midplane::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Midplane::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Midplane::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Midplane::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Midplane::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Midplane::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Midplane_ConstPtr_Sg__append(std::vector< bgsched::Midplane::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Node > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Node >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Node >, std::allocator< boost::shared_ptr< bgsched::Node > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Node >" "," "std::allocator< boost::shared_ptr< bgsched::Node > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Node_Ptr_Sg__iterator(std::vector< bgsched::Node::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Node_Ptr_Sg____nonzero__(std::vector< bgsched::Node::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Node_Ptr_Sg____bool__(std::vector< bgsched::Node::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node > >::size_type std_vector_Sl_bgsched_Node_Ptr_Sg____len__(std::vector< bgsched::Node::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node > >::value_type std_vector_Sl_bgsched_Node_Ptr_Sg__pop(std::vector< bgsched::Node::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *std_vector_Sl_bgsched_Node_Ptr_Sg____getslice__(std::vector< bgsched::Node::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Node::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &v=std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____delslice__(std::vector< bgsched::Node::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Node::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *std_vector_Sl_bgsched_Node_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Node::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Node::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Node::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Node::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &std_vector_Sl_bgsched_Node_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Node::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Node::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_Ptr_Sg__append(std::vector< bgsched::Node::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Node const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Node const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Node const >, std::allocator< boost::shared_ptr< bgsched::Node const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Node const >" "," "std::allocator< boost::shared_ptr< bgsched::Node const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Node_ConstPtr_Sg__iterator(std::vector< bgsched::Node::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Node_ConstPtr_Sg____nonzero__(std::vector< bgsched::Node::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Node_ConstPtr_Sg____bool__(std::vector< bgsched::Node::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node const > >::size_type std_vector_Sl_bgsched_Node_ConstPtr_Sg____len__(std::vector< bgsched::Node::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node const > >::value_type std_vector_Sl_bgsched_Node_ConstPtr_Sg__pop(std::vector< bgsched::Node::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *std_vector_Sl_bgsched_Node_ConstPtr_Sg____getslice__(std::vector< bgsched::Node::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Node::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &v=std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____delslice__(std::vector< bgsched::Node::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Node::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *std_vector_Sl_bgsched_Node_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Node::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Node::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Node::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Node::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &std_vector_Sl_bgsched_Node_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Node::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Node::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Node_ConstPtr_Sg__append(std::vector< bgsched::Node::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Switch > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Switch >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Switch >, std::allocator< boost::shared_ptr< bgsched::Switch > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Switch >" "," "std::allocator< boost::shared_ptr< bgsched::Switch > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Switch_Ptr_Sg__iterator(std::vector< bgsched::Switch::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Switch_Ptr_Sg____nonzero__(std::vector< bgsched::Switch::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Switch_Ptr_Sg____bool__(std::vector< bgsched::Switch::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch > >::size_type std_vector_Sl_bgsched_Switch_Ptr_Sg____len__(std::vector< bgsched::Switch::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch > >::value_type std_vector_Sl_bgsched_Switch_Ptr_Sg__pop(std::vector< bgsched::Switch::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *std_vector_Sl_bgsched_Switch_Ptr_Sg____getslice__(std::vector< bgsched::Switch::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Switch::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &v=std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____delslice__(std::vector< bgsched::Switch::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Switch::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *std_vector_Sl_bgsched_Switch_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Switch::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Switch::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Switch::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Switch::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &std_vector_Sl_bgsched_Switch_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Switch::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Switch::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_Ptr_Sg__append(std::vector< bgsched::Switch::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Switch const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Switch const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Switch const >, std::allocator< boost::shared_ptr< bgsched::Switch const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Switch const >" "," "std::allocator< boost::shared_ptr< bgsched::Switch const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Switch_ConstPtr_Sg__iterator(std::vector< bgsched::Switch::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Switch_ConstPtr_Sg____nonzero__(std::vector< bgsched::Switch::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Switch_ConstPtr_Sg____bool__(std::vector< bgsched::Switch::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type std_vector_Sl_bgsched_Switch_ConstPtr_Sg____len__(std::vector< bgsched::Switch::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type std_vector_Sl_bgsched_Switch_ConstPtr_Sg__pop(std::vector< bgsched::Switch::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *std_vector_Sl_bgsched_Switch_ConstPtr_Sg____getslice__(std::vector< bgsched::Switch::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Switch::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &v=std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____delslice__(std::vector< bgsched::Switch::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Switch::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *std_vector_Sl_bgsched_Switch_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Switch::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Switch::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Switch::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Switch::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &std_vector_Sl_bgsched_Switch_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Switch::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Switch::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Switch_ConstPtr_Sg__append(std::vector< bgsched::Switch::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::IOLink > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::IOLink >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::IOLink >, std::allocator< boost::shared_ptr< bgsched::IOLink > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::IOLink >" "," "std::allocator< boost::shared_ptr< bgsched::IOLink > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_IOLink_Ptr_Sg__iterator(std::vector< bgsched::IOLink::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_IOLink_Ptr_Sg____nonzero__(std::vector< bgsched::IOLink::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_IOLink_Ptr_Sg____bool__(std::vector< bgsched::IOLink::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type std_vector_Sl_bgsched_IOLink_Ptr_Sg____len__(std::vector< bgsched::IOLink::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type std_vector_Sl_bgsched_IOLink_Ptr_Sg__pop(std::vector< bgsched::IOLink::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *std_vector_Sl_bgsched_IOLink_Ptr_Sg____getslice__(std::vector< bgsched::IOLink::Ptr > *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::IOLink::Ptr > *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type j,std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &v=std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____delslice__(std::vector< bgsched::IOLink::Ptr > *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::IOLink::Ptr > *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *std_vector_Sl_bgsched_IOLink_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::IOLink::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::IOLink::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::IOLink::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::IOLink::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &std_vector_Sl_bgsched_IOLink_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::IOLink::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::IOLink::Ptr > *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_Ptr_Sg__append(std::vector< bgsched::IOLink::Ptr > *self,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::IOLink const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::IOLink const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::IOLink const >, std::allocator< boost::shared_ptr< bgsched::IOLink const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::IOLink const >" "," "std::allocator< boost::shared_ptr< bgsched::IOLink const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_IOLink_ConstPtr_Sg__iterator(std::vector< bgsched::IOLink::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____nonzero__(std::vector< bgsched::IOLink::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____bool__(std::vector< bgsched::IOLink::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____len__(std::vector< bgsched::IOLink::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type std_vector_Sl_bgsched_IOLink_ConstPtr_Sg__pop(std::vector< bgsched::IOLink::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____getslice__(std::vector< bgsched::IOLink::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::IOLink::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &v=std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____delslice__(std::vector< bgsched::IOLink::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::IOLink::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::IOLink::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::IOLink::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::IOLink::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::IOLink::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::IOLink::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::IOLink::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_IOLink_ConstPtr_Sg__append(std::vector< bgsched::IOLink::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Cable > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Cable >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Cable >, std::allocator< boost::shared_ptr< bgsched::Cable > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Cable >" "," "std::allocator< boost::shared_ptr< bgsched::Cable > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Cable_Ptr_Sg__iterator(std::vector< bgsched::Cable::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Cable_Ptr_Sg____nonzero__(std::vector< bgsched::Cable::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Cable_Ptr_Sg____bool__(std::vector< bgsched::Cable::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable > >::size_type std_vector_Sl_bgsched_Cable_Ptr_Sg____len__(std::vector< bgsched::Cable::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable > >::value_type std_vector_Sl_bgsched_Cable_Ptr_Sg__pop(std::vector< bgsched::Cable::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *std_vector_Sl_bgsched_Cable_Ptr_Sg____getslice__(std::vector< bgsched::Cable::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Cable::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &v=std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____delslice__(std::vector< bgsched::Cable::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Cable::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *std_vector_Sl_bgsched_Cable_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Cable::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Cable::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Cable::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Cable::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &std_vector_Sl_bgsched_Cable_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Cable::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Cable::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_Ptr_Sg__append(std::vector< bgsched::Cable::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Cable const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Cable const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Cable const >, std::allocator< boost::shared_ptr< bgsched::Cable const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Cable const >" "," "std::allocator< boost::shared_ptr< bgsched::Cable const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Cable_ConstPtr_Sg__iterator(std::vector< bgsched::Cable::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Cable_ConstPtr_Sg____nonzero__(std::vector< bgsched::Cable::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Cable_ConstPtr_Sg____bool__(std::vector< bgsched::Cable::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type std_vector_Sl_bgsched_Cable_ConstPtr_Sg____len__(std::vector< bgsched::Cable::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type std_vector_Sl_bgsched_Cable_ConstPtr_Sg__pop(std::vector< bgsched::Cable::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *std_vector_Sl_bgsched_Cable_ConstPtr_Sg____getslice__(std::vector< bgsched::Cable::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Cable::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &v=std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____delslice__(std::vector< bgsched::Cable::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Cable::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *std_vector_Sl_bgsched_Cable_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Cable::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Cable::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Cable::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Cable::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &std_vector_Sl_bgsched_Cable_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Cable::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Cable::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Cable_ConstPtr_Sg__append(std::vector< bgsched::Cable::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Job > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Job >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Job >, std::allocator< boost::shared_ptr< bgsched::Job > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Job >" "," "std::allocator< boost::shared_ptr< bgsched::Job > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Job_Ptr_Sg__iterator(std::vector< bgsched::Job::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Job_Ptr_Sg____nonzero__(std::vector< bgsched::Job::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Job_Ptr_Sg____bool__(std::vector< bgsched::Job::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job > >::size_type std_vector_Sl_bgsched_Job_Ptr_Sg____len__(std::vector< bgsched::Job::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job > >::value_type std_vector_Sl_bgsched_Job_Ptr_Sg__pop(std::vector< bgsched::Job::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *std_vector_Sl_bgsched_Job_Ptr_Sg____getslice__(std::vector< bgsched::Job::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Job::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &v=std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____delslice__(std::vector< bgsched::Job::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Job::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *std_vector_Sl_bgsched_Job_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Job::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Job::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Job::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Job::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &std_vector_Sl_bgsched_Job_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Job::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Job::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_Ptr_Sg__append(std::vector< bgsched::Job::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Job const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Job const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Job const >, std::allocator< boost::shared_ptr< bgsched::Job const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Job const >" "," "std::allocator< boost::shared_ptr< bgsched::Job const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Job_ConstPtr_Sg__iterator(std::vector< bgsched::Job::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Job_ConstPtr_Sg____nonzero__(std::vector< bgsched::Job::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Job_ConstPtr_Sg____bool__(std::vector< bgsched::Job::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job const > >::size_type std_vector_Sl_bgsched_Job_ConstPtr_Sg____len__(std::vector< bgsched::Job::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job const > >::value_type std_vector_Sl_bgsched_Job_ConstPtr_Sg__pop(std::vector< bgsched::Job::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *std_vector_Sl_bgsched_Job_ConstPtr_Sg____getslice__(std::vector< bgsched::Job::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Job::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &v=std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____delslice__(std::vector< bgsched::Job::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Job::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *std_vector_Sl_bgsched_Job_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Job::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Job::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Job::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Job::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &std_vector_Sl_bgsched_Job_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Job::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Job::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Job_ConstPtr_Sg__append(std::vector< bgsched::Job::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Block > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Block >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Block >, std::allocator< boost::shared_ptr< bgsched::Block > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Block >" "," "std::allocator< boost::shared_ptr< bgsched::Block > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Block_Ptr_Sg__iterator(std::vector< bgsched::Block::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Block_Ptr_Sg____nonzero__(std::vector< bgsched::Block::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Block_Ptr_Sg____bool__(std::vector< bgsched::Block::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block > >::size_type std_vector_Sl_bgsched_Block_Ptr_Sg____len__(std::vector< bgsched::Block::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block > >::value_type std_vector_Sl_bgsched_Block_Ptr_Sg__pop(std::vector< bgsched::Block::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *std_vector_Sl_bgsched_Block_Ptr_Sg____getslice__(std::vector< bgsched::Block::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Block::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &v=std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____delslice__(std::vector< bgsched::Block::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Block::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *std_vector_Sl_bgsched_Block_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Block::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Block::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Block::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Block::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &std_vector_Sl_bgsched_Block_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Block::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Block::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_Ptr_Sg__append(std::vector< bgsched::Block::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Block const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Block const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Block const >, std::allocator< boost::shared_ptr< bgsched::Block const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Block const >" "," "std::allocator< boost::shared_ptr< bgsched::Block const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Block_ConstPtr_Sg__iterator(std::vector< bgsched::Block::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Block_ConstPtr_Sg____nonzero__(std::vector< bgsched::Block::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Block_ConstPtr_Sg____bool__(std::vector< bgsched::Block::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block const > >::size_type std_vector_Sl_bgsched_Block_ConstPtr_Sg____len__(std::vector< bgsched::Block::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block const > >::value_type std_vector_Sl_bgsched_Block_ConstPtr_Sg__pop(std::vector< bgsched::Block::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *std_vector_Sl_bgsched_Block_ConstPtr_Sg____getslice__(std::vector< bgsched::Block::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Block::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &v=std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____delslice__(std::vector< bgsched::Block::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Block::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *std_vector_Sl_bgsched_Block_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Block::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Block::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Block::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Block::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &std_vector_Sl_bgsched_Block_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Block::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Block::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Block_ConstPtr_Sg__append(std::vector< bgsched::Block::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Shape > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Shape >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Shape >, std::allocator< boost::shared_ptr< bgsched::Shape > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Shape >" "," "std::allocator< boost::shared_ptr< bgsched::Shape > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Shape_Ptr_Sg__iterator(std::vector< bgsched::Shape::Ptr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Shape_Ptr_Sg____nonzero__(std::vector< bgsched::Shape::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Shape_Ptr_Sg____bool__(std::vector< bgsched::Shape::Ptr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape > >::size_type std_vector_Sl_bgsched_Shape_Ptr_Sg____len__(std::vector< bgsched::Shape::Ptr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape > >::value_type std_vector_Sl_bgsched_Shape_Ptr_Sg__pop(std::vector< bgsched::Shape::Ptr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *std_vector_Sl_bgsched_Shape_Ptr_Sg____getslice__(std::vector< bgsched::Shape::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____setslice____SWIG_0(std::vector< bgsched::Shape::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &v=std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____delslice__(std::vector< bgsched::Shape::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____delitem____SWIG_0(std::vector< bgsched::Shape::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *std_vector_Sl_bgsched_Shape_Ptr_Sg____getitem____SWIG_0(std::vector< bgsched::Shape::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____setitem____SWIG_0(std::vector< bgsched::Shape::Ptr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____setitem____SWIG_1(std::vector< bgsched::Shape::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____delitem____SWIG_1(std::vector< bgsched::Shape::Ptr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &std_vector_Sl_bgsched_Shape_Ptr_Sg____getitem____SWIG_1(std::vector< bgsched::Shape::Ptr > const *self,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg____setitem____SWIG_2(std::vector< bgsched::Shape::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Ptr_Sg__append(std::vector< bgsched::Shape::Ptr > *self,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<boost::shared_ptr< bgsched::Shape const > > {
      typedef pointer_category category;
      static const char* type_name() { return"boost::shared_ptr< bgsched::Shape const >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<boost::shared_ptr< bgsched::Shape const >, std::allocator< boost::shared_ptr< bgsched::Shape const > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "boost::shared_ptr< bgsched::Shape const >" "," "std::allocator< boost::shared_ptr< bgsched::Shape const > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Shape_ConstPtr_Sg__iterator(std::vector< bgsched::Shape::ConstPtr > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Shape_ConstPtr_Sg____nonzero__(std::vector< bgsched::Shape::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Shape_ConstPtr_Sg____bool__(std::vector< bgsched::Shape::ConstPtr > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type std_vector_Sl_bgsched_Shape_ConstPtr_Sg____len__(std::vector< bgsched::Shape::ConstPtr > const *self){
      return self->size();
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type std_vector_Sl_bgsched_Shape_ConstPtr_Sg__pop(std::vector< bgsched::Shape::ConstPtr > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *std_vector_Sl_bgsched_Shape_ConstPtr_Sg____getslice__(std::vector< bgsched::Shape::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setslice____SWIG_0(std::vector< bgsched::Shape::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type j,std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &v=std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____delslice__(std::vector< bgsched::Shape::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____delitem____SWIG_0(std::vector< bgsched::Shape::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *std_vector_Sl_bgsched_Shape_ConstPtr_Sg____getitem____SWIG_0(std::vector< bgsched::Shape::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setitem____SWIG_0(std::vector< bgsched::Shape::ConstPtr > *self,PySliceObject *slice,std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setitem____SWIG_1(std::vector< bgsched::Shape::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____delitem____SWIG_1(std::vector< bgsched::Shape::ConstPtr > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &std_vector_Sl_bgsched_Shape_ConstPtr_Sg____getitem____SWIG_1(std::vector< bgsched::Shape::ConstPtr > const *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setitem____SWIG_2(std::vector< bgsched::Shape::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type i,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_ConstPtr_Sg__append(std::vector< bgsched::Shape::ConstPtr > *self,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<bgsched::Shape > {
      typedef pointer_category category;
      static const char* type_name() { return"bgsched::Shape"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<bgsched::Shape, std::allocator< bgsched::Shape > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "bgsched::Shape" "," "std::allocator< bgsched::Shape >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_bgsched_Shape_Sg__iterator(std::vector< bgsched::Shape > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_bgsched_Shape_Sg____nonzero__(std::vector< bgsched::Shape > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_bgsched_Shape_Sg____bool__(std::vector< bgsched::Shape > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< bgsched::Shape >::size_type std_vector_Sl_bgsched_Shape_Sg____len__(std::vector< bgsched::Shape > const *self){
      return self->size();
    }
SWIGINTERN std::vector< bgsched::Shape >::value_type std_vector_Sl_bgsched_Shape_Sg__pop(std::vector< bgsched::Shape > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *std_vector_Sl_bgsched_Shape_Sg____getslice__(std::vector< bgsched::Shape > *self,std::vector< bgsched::Shape >::difference_type i,std::vector< bgsched::Shape >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____setslice____SWIG_0(std::vector< bgsched::Shape > *self,std::vector< bgsched::Shape >::difference_type i,std::vector< bgsched::Shape >::difference_type j,std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &v=std::vector< bgsched::Shape,std::allocator< bgsched::Shape > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____delslice__(std::vector< bgsched::Shape > *self,std::vector< bgsched::Shape >::difference_type i,std::vector< bgsched::Shape >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____delitem____SWIG_0(std::vector< bgsched::Shape > *self,std::vector< bgsched::Shape >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *std_vector_Sl_bgsched_Shape_Sg____getitem____SWIG_0(std::vector< bgsched::Shape > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____setitem____SWIG_0(std::vector< bgsched::Shape > *self,PySliceObject *slice,std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____setitem____SWIG_1(std::vector< bgsched::Shape > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____delitem____SWIG_1(std::vector< bgsched::Shape > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< bgsched::Shape >::value_type const &std_vector_Sl_bgsched_Shape_Sg____getitem____SWIG_1(std::vector< bgsched::Shape > const *self,std::vector< bgsched::Shape >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg____setitem____SWIG_2(std::vector< bgsched::Shape > *self,std::vector< bgsched::Shape >::difference_type i,std::vector< bgsched::Shape >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_bgsched_Shape_Sg__append(std::vector< bgsched::Shape > *self,std::vector< bgsched::Shape >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<bgsched::Block::Status > {
      typedef pointer_category category;
      static const char* type_name() { return"bgsched::Block::Status"; }
    };
  }


  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set<bgsched::Block::Status, std::less< bgsched::Block::Status >, std::allocator< bgsched::Block::Status > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "bgsched::Block::Status" "," "std::less< bgsched::Block::Status >" "," "std::allocator< bgsched::Block::Status >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_bgsched_Block_Status_Sg__iterator(std::set< bgsched::Block::Status > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_bgsched_Block_Status_Sg____nonzero__(std::set< bgsched::Block::Status > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_bgsched_Block_Status_Sg____bool__(std::set< bgsched::Block::Status > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< enum bgsched::Block::Status >::size_type std_set_Sl_bgsched_Block_Status_Sg____len__(std::set< bgsched::Block::Status > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_bgsched_Block_Status_Sg__append(std::set< bgsched::Block::Status > *self,std::set< enum bgsched::Block::Status >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_bgsched_Block_Status_Sg____contains__(std::set< bgsched::Block::Status > *self,std::set< enum bgsched::Block::Status >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< enum bgsched::Block::Status >::value_type std_set_Sl_bgsched_Block_Status_Sg____getitem__(std::set< bgsched::Block::Status > const *self,std::set< enum bgsched::Block::Status >::difference_type i){
       return *(swig::cgetpos(self, i));
     }


  namespace swig {
    template <>  struct traits<bgsched::Dimension > {
      typedef pointer_category category;
      static const char* type_name() { return"bgsched::Dimension"; }
    };
  }


  namespace swig {
    template <>  struct traits<bgsched::Block::Connectivity::Value > {
      typedef pointer_category category;
      static const char* type_name() { return"bgsched::Block::Connectivity::Value"; }
    };
  }


  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< bgsched::Dimension, bgsched::Block::Connectivity::Value > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "bgsched::Dimension" "," "bgsched::Block::Connectivity::Value" " >";
	  }
	};
      }
    

  namespace swig {
    template <class SwigPySeq, class K, class T >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<map_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError,
			  "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };

    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueITerator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueITerator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueITerator_T<OutIter>(current, begin, end, seq);
    }

  }


      namespace swig {
	template <>  struct traits<std::map<bgsched::Dimension, bgsched::Block::Connectivity::Value, std::less< bgsched::Dimension >, std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "bgsched::Dimension" "," "bgsched::Block::Connectivity::Value" "," "std::less< bgsched::Dimension >" "," "std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__iterator(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____nonzero__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____bool__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::size_type std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____len__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *self){
      return self->size();
    }
SWIGINTERN std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type const &std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____getitem__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &key){
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____delitem__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &key){
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__has_key(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *self,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &key){
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__keys(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self){
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::size_type size = self->size();
      int pysize = (size <= (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__values(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self){
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::size_type size = self->size();
      int pysize = (size <= (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__items(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self){
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::size_type size = self->size();
      int pysize = (size <= (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____contains__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__key_iterator(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__value_iterator(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____setitem____SWIG_0(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____setitem____SWIG_1(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &key,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__asdict(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *self){
      return swig::traits_from< std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > >::asdict(*self);
    }

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v=std::vector< std::string,std::allocator< std::string > >()){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SortOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::SortOrder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SortOrder")) SWIG_fail;
  {
    try{
      result = (bgsched::core::SortOrder *)new bgsched::core::SortOrder();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__core__SortOrder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SortOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::SortOrder *arg1 = (bgsched::core::SortOrder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SortOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__SortOrder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SortOrder" "', argument " "1"" of type '" "bgsched::core::SortOrder *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::SortOrder * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SortOrder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__core__SortOrder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Dimension__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Dimension::Value arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Dimension *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dimension",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Dimension" "', argument " "1"" of type '" "bgsched::Dimension::Value""'");
  } 
  arg1 = static_cast< bgsched::Dimension::Value >(val1);
  {
    try{
      result = (bgsched::Dimension *)new bgsched::Dimension(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Dimension, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dimension__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Dimension *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Dimension",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Dimension" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  {
    try{
      result = (bgsched::Dimension *)new bgsched::Dimension(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Dimension, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Dimension(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dimension__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Dimension__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Dimension'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::Dimension::Dimension(bgsched::Dimension::Value)\n"
    "    bgsched::Dimension::Dimension(uint32_t const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Dimension___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Dimension *arg1 = (bgsched::Dimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Dimension___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Dimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Dimension___str__" "', argument " "1"" of type '" "bgsched::Dimension *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Dimension * >(argp1);
  {
    try{
      result = (char *)bgsched_Dimension___str__(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Dimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Dimension *arg1 = (bgsched::Dimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Dimension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Dimension, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Dimension" "', argument " "1"" of type '" "bgsched::Dimension *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Dimension * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Dimension_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__Dimension, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Coordinates__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bgsched::Coordinates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_Coordinates",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Coordinates" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Coordinates" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Coordinates" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Coordinates" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Coordinates" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  {
    try{
      result = (bgsched::Coordinates *)new bgsched::Coordinates(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Coordinates__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  uint32_t arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bgsched::Coordinates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_Coordinates",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Coordinates" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Coordinates" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Coordinates" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Coordinates" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  {
    try{
      result = (bgsched::Coordinates *)new bgsched::Coordinates(arg1,arg2,arg3,arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Coordinates(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_Coordinates__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Coordinates__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Coordinates'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::Coordinates::Coordinates(uint32_t const,uint32_t const,uint32_t const,uint32_t const,uint32_t const)\n"
    "    bgsched::Coordinates::Coordinates(uint32_t const,uint32_t const,uint32_t const,uint32_t const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Coordinates___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___eq__" "', argument " "1"" of type '" "bgsched::Coordinates const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinates___eq__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinates___eq__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = (bool)((bgsched::Coordinates const *)arg1)->operator ==((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___ne__" "', argument " "1"" of type '" "bgsched::Coordinates const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinates___ne__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinates___ne__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = (bool)((bgsched::Coordinates const *)arg1)->operator !=((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___le__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___le__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___le__" "', argument " "1"" of type '" "bgsched::Coordinates const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinates___le__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinates___le__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = (bool)((bgsched::Coordinates const *)arg1)->operator <=((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___ge__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___ge__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___ge__" "', argument " "1"" of type '" "bgsched::Coordinates const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinates___ge__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinates___ge__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = (bool)((bgsched::Coordinates const *)arg1)->operator >=((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___getitem__" "', argument " "1"" of type '" "bgsched::Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinates___getitem__" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try{
      result = (uint32_t)bgsched_Coordinates___getitem____SWIG_0(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  bgsched::Dimension::Value arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___getitem__" "', argument " "1"" of type '" "bgsched::Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Coordinates___getitem__" "', argument " "2"" of type '" "bgsched::Dimension::Value""'");
  } 
  arg2 = static_cast< bgsched::Dimension::Value >(val2);
  {
    try{
      result = (uint32_t)bgsched_Coordinates___getitem____SWIG_1(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bgsched__Coordinates, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Coordinates___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bgsched__Coordinates, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Coordinates___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Coordinates___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::Coordinates::__getitem__(uint32_t)\n"
    "    bgsched::Coordinates::__getitem__(bgsched::Dimension::Value)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Coordinates___assign__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Coordinates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Coordinates___assign__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___assign__" "', argument " "1"" of type '" "bgsched::Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Coordinates___assign__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Coordinates___assign__" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = (bgsched::Coordinates *) &bgsched_Coordinates___assign__(arg1,(bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Coordinates___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Coordinates___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Coordinates___str__" "', argument " "1"" of type '" "bgsched::Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  {
    try{
      result = (char *)bgsched_Coordinates___str__(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Coordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Coordinates *arg1 = (bgsched::Coordinates *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Coordinates",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Coordinates" "', argument " "1"" of type '" "bgsched::Coordinates *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Coordinates * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Coordinates_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__Coordinates, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Job_getId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Job::Id result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getId" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::Job::Id)((bgsched::Job const *)arg1)->getId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getComputeBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getComputeBlockName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getComputeBlockName" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getComputeBlockName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getComputeBlockCreationId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::BlockCreationId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getComputeBlockCreationId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getComputeBlockCreationId" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::BlockCreationId)((bgsched::Job const *)arg1)->getComputeBlockCreationId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Job::Status > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getStatus",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getStatus" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Job const *)arg1)->getStatus();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Job::Status >(static_cast< const bgsched::EnumWrapper< bgsched::Job::Status >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Job__Status_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getUser",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getUser" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getUser();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getExecutable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getExecutable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getExecutable" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getExecutable();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getWorkingDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getWorkingDirectory",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getWorkingDirectory" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getWorkingDirectory();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getErrorText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getErrorText",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getErrorText" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getErrorText();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getArgs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getArgs",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getArgs" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getArgs();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getEnvs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getEnvs",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getEnvs" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getEnvs();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getStartTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getStartTime",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getStartTime" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getStartTime();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getEndTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getEndTime",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getEndTime" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getEndTime();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getRunTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getRunTime",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getRunTime" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint64_t)((bgsched::Job const *)arg1)->getRunTime();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_isInHistory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_isInHistory",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_isInHistory" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::Job const *)arg1)->isInHistory();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getComputeNodesUsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getComputeNodesUsed",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getComputeNodesUsed" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Job const *)arg1)->getComputeNodesUsed();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getSequenceId" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::Job const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getExitStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getExitStatus",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getExitStatus" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)((bgsched::Job const *)arg1)->getExitStatus();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getCorner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getCorner",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getCorner" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getCorner();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getShape",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getShape" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getShape();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getRanksPerNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getRanksPerNode",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getRanksPerNode" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Job const *)arg1)->getRanksPerNode();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getNP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getNP",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getNP" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Job const *)arg1)->getNP();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getSchedulerData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getSchedulerData",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getSchedulerData" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getSchedulerData();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getMapping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getMapping",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getMapping" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getMapping();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getClientInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job const > tempshared1 ;
  boost::shared_ptr< bgsched::Job const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getClientInfo",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getClientInfo" "', argument " "1"" of type '" "bgsched::Job const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Job const *)arg1)->getClientInfo();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Job(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Job::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Job *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Job",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Job" "', argument " "1"" of type '" "bgsched::Job::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Job" "', argument " "1"" of type '" "bgsched::Job::Pimpl""'");
    } else {
      bgsched::Job::Pimpl * temp = reinterpret_cast< bgsched::Job::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Job *)new bgsched::Job(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Job > *smartresult = result ? new boost::shared_ptr<  bgsched::Job >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getStatusValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job > tempshared1 ;
  boost::shared_ptr< bgsched::Job > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getStatusValue",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getStatusValue" "', argument " "1"" of type '" "bgsched::Job *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)bgsched_Job_getStatusValue(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Job_getInUseString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job > tempshared1 ;
  boost::shared_ptr< bgsched::Job > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Job_getInUseString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Job_getInUseString" "', argument " "1"" of type '" "bgsched::Job *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = bgsched_Job_getInUseString(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Job(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Job *arg1 = (bgsched::Job *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Job > tempshared1 ;
  boost::shared_ptr< bgsched::Job > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Job",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Job" "', argument " "1"" of type '" "bgsched::Job *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Job > * >(argp1);
      arg1 = const_cast< bgsched::Job * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Job_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_JobSort_Field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JobSort_Field *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JobSort_Field")) SWIG_fail;
  {
    try{
      result = (JobSort_Field *)new JobSort_Field();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_JobSort_Field, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JobSort_Field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JobSort_Field *arg1 = (JobSort_Field *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JobSort_Field",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JobSort_Field, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JobSort_Field" "', argument " "1"" of type '" "JobSort_Field *""'"); 
  }
  arg1 = reinterpret_cast< JobSort_Field * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JobSort_Field_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_JobSort_Field, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_JobSort_AnyOrder_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable JobSort_AnyOrder is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_JobSort_AnyOrder_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&bgsched::core::JobSort::AnyOrder), SWIGTYPE_p_bgsched__core__JobSort,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_JobSort__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JobSort")) SWIG_fail;
  {
    try{
      result = (bgsched::core::JobSort *)new bgsched::core::JobSort();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__core__JobSort, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobSort__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort::Field::Value arg1 ;
  bgsched::core::SortOrder::Value arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::core::JobSort *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JobSort",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__core__JobSort__Field__Value,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JobSort" "', argument " "1"" of type '" "bgsched::core::JobSort::Field::Value""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JobSort" "', argument " "1"" of type '" "bgsched::core::JobSort::Field::Value""'");
    } else {
      bgsched::core::JobSort::Field::Value * temp = reinterpret_cast< bgsched::core::JobSort::Field::Value * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_JobSort" "', argument " "2"" of type '" "bgsched::core::SortOrder::Value""'");
  } 
  arg2 = static_cast< bgsched::core::SortOrder::Value >(val2);
  {
    try{
      result = (bgsched::core::JobSort *)new bgsched::core::JobSort(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__core__JobSort, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobSort(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_JobSort__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__core__JobSort__Field__Value, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_JobSort__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JobSort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::core::JobSort::JobSort()\n"
    "    bgsched::core::JobSort::JobSort(bgsched::core::JobSort::Field::Value,bgsched::core::SortOrder::Value)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobSort_isSorted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *arg1 = (bgsched::core::JobSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobSort_isSorted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__JobSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobSort_isSorted" "', argument " "1"" of type '" "bgsched::core::JobSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::JobSort * >(argp1);
  {
    try{
      result = (bool)((bgsched::core::JobSort const *)arg1)->isSorted();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobSort_getField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *arg1 = (bgsched::core::JobSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< bgsched::core::JobSort::Field::Value > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobSort_getField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__JobSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobSort_getField" "', argument " "1"" of type '" "bgsched::core::JobSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::JobSort * >(argp1);
  {
    try{
      result = ((bgsched::core::JobSort const *)arg1)->getField();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::core::JobSort::Field::Value >(static_cast< const bgsched::EnumWrapper< bgsched::core::JobSort::Field::Value >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobSort_getSortOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *arg1 = (bgsched::core::JobSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::core::SortOrder::Value > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobSort_getSortOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__JobSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobSort_getSortOrder" "', argument " "1"" of type '" "bgsched::core::JobSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::JobSort * >(argp1);
  {
    try{
      result = ((bgsched::core::JobSort const *)arg1)->getSortOrder();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::core::SortOrder::Value >(static_cast< const bgsched::EnumWrapper< bgsched::core::SortOrder::Value >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobSort_setSort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *arg1 = (bgsched::core::JobSort *) 0 ;
  bgsched::core::JobSort::Field::Value arg2 ;
  bgsched::core::SortOrder::Value arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobSort_setSort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__JobSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobSort_setSort" "', argument " "1"" of type '" "bgsched::core::JobSort *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::JobSort * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__core__JobSort__Field__Value,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobSort_setSort" "', argument " "2"" of type '" "bgsched::core::JobSort::Field::Value""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobSort_setSort" "', argument " "2"" of type '" "bgsched::core::JobSort::Field::Value""'");
    } else {
      bgsched::core::JobSort::Field::Value * temp = reinterpret_cast< bgsched::core::JobSort::Field::Value * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobSort_setSort" "', argument " "3"" of type '" "bgsched::core::SortOrder::Value""'");
  } 
  arg3 = static_cast< bgsched::core::SortOrder::Value >(val3);
  {
    try{
      (arg1)->setSort(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobSort_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *arg1 = (bgsched::core::JobSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::core::JobSort::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobSort_getPimpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__JobSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobSort_getPimpl" "', argument " "1"" of type '" "bgsched::core::JobSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::JobSort * >(argp1);
  {
    try{
      result = ((bgsched::core::JobSort const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::core::JobSort::Pimpl(static_cast< const bgsched::core::JobSort::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__core__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JobSort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::JobSort *arg1 = (bgsched::core::JobSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JobSort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__JobSort, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JobSort" "', argument " "1"" of type '" "bgsched::core::JobSort *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::JobSort * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JobSort_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__core__JobSort, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_JobType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JobType *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JobType")) SWIG_fail;
  {
    try{
      result = (JobType *)new JobType();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_JobType, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JobType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  JobType *arg1 = (JobType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JobType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_JobType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JobType" "', argument " "1"" of type '" "JobType *""'"); 
  }
  arg1 = reinterpret_cast< JobType * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JobType_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_JobType, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_JobFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JobFilter")) SWIG_fail;
  {
    try{
      result = (bgsched::JobFilter *)new bgsched::JobFilter();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__JobFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setJobType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  bgsched::JobFilter::JobType::Value arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setJobType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setJobType" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__JobFilter__JobType__Value,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setJobType" "', argument " "2"" of type '" "bgsched::JobFilter::JobType::Value""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setJobType" "', argument " "2"" of type '" "bgsched::JobFilter::JobType::Value""'");
    } else {
      bgsched::JobFilter::JobType::Value * temp = reinterpret_cast< bgsched::JobFilter::JobType::Value * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->setJobType(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getJobType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::JobFilter::JobType::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getJobType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getJobType" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = ((bgsched::JobFilter const *)arg1)->getJobType();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::JobFilter::JobType::Value(static_cast< const bgsched::JobFilter::JobType::Value& >(result))), SWIGTYPE_p_bgsched__JobFilter__JobType__Value, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setJobId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  bgsched::Job::Id arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setJobId",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setJobId" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobFilter_setJobId" "', argument " "2"" of type '" "bgsched::Job::Id""'");
  } 
  arg2 = static_cast< bgsched::Job::Id >(val2);
  {
    try{
      (arg1)->setJobId(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getJobId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Job::Id result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getJobId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getJobId" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (bgsched::Job::Id)((bgsched::JobFilter const *)arg1)->getJobId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setSchedulerData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setSchedulerData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setSchedulerData" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setSchedulerData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setSchedulerData" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setSchedulerData((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getSchedulerData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getSchedulerData",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getSchedulerData" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::JobFilter const *)arg1)->getSchedulerData();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setComputeBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setComputeBlockName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setComputeBlockName" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setComputeBlockName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setComputeBlockName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setComputeBlockName((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getComputeBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getComputeBlockName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getComputeBlockName" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::JobFilter const *)arg1)->getComputeBlockName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setUser",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setUser" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setUser((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getUser",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getUser" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::JobFilter const *)arg1)->getUser();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setExecutable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setExecutable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setExecutable" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setExecutable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setExecutable" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setExecutable((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getExecutable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getExecutable",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getExecutable" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::JobFilter const *)arg1)->getExecutable();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setStatuses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  bgsched::JobFilter::Statuses *arg2 = (bgsched::JobFilter::Statuses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setStatuses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setStatuses" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setStatuses" "', argument " "2"" of type '" "bgsched::JobFilter::Statuses const *""'"); 
  }
  arg2 = reinterpret_cast< bgsched::JobFilter::Statuses * >(argp2);
  {
    try{
      (arg1)->setStatuses((bgsched::JobFilter::Statuses const *)arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getStatuses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Job::Status,std::less< enum bgsched::Job::Status >,std::allocator< enum bgsched::Job::Status > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getStatuses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getStatuses" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = ((bgsched::JobFilter const *)arg1)->getStatuses();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::JobFilter::Statuses(static_cast< const bgsched::JobFilter::Statuses& >(result))), SWIGTYPE_p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setExitStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setExitStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setExitStatus" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobFilter_setExitStatus" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try{
      (arg1)->setExitStatus(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_isExitStatusSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_isExitStatusSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_isExitStatusSet" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (bool)((bgsched::JobFilter const *)arg1)->isExitStatusSet();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getExitStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getExitStatus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getExitStatus" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = (int)((bgsched::JobFilter const *)arg1)->getExitStatus();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setStartTimeInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  bgsched::TimeInterval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setStartTimeInterval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setStartTimeInterval" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__TimeInterval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setStartTimeInterval" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setStartTimeInterval" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::TimeInterval * >(argp2);
  {
    try{
      (arg1)->setStartTimeInterval((bgsched::TimeInterval const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getStartTimeInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::TimeInterval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getStartTimeInterval",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getStartTimeInterval" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = ((bgsched::JobFilter const *)arg1)->getStartTimeInterval();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::TimeInterval(static_cast< const bgsched::TimeInterval& >(result))), SWIGTYPE_p_bgsched__TimeInterval, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_setEndTimeInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  bgsched::TimeInterval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobFilter_setEndTimeInterval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_setEndTimeInterval" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__TimeInterval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobFilter_setEndTimeInterval" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobFilter_setEndTimeInterval" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::TimeInterval * >(argp2);
  {
    try{
      (arg1)->setEndTimeInterval((bgsched::TimeInterval const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getEndTimeInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::TimeInterval result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getEndTimeInterval",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getEndTimeInterval" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = ((bgsched::JobFilter const *)arg1)->getEndTimeInterval();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::TimeInterval(static_cast< const bgsched::TimeInterval& >(result))), SWIGTYPE_p_bgsched__TimeInterval, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobFilter_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::JobFilter::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobFilter_getPimpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobFilter_getPimpl" "', argument " "1"" of type '" "bgsched::JobFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = ((bgsched::JobFilter const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::JobFilter::Pimpl(static_cast< const bgsched::JobFilter::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JobFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = (bgsched::JobFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JobFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__JobFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JobFilter" "', argument " "1"" of type '" "bgsched::JobFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JobFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__JobFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Hardware_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware const > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware_toString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware_toString" "', argument " "1"" of type '" "bgsched::Hardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Hardware const *)arg1)->toString();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hardware_getState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware const > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Hardware::State > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware_getState",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware_getState" "', argument " "1"" of type '" "bgsched::Hardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Hardware const *)arg1)->getState();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Hardware::State >(static_cast< const bgsched::EnumWrapper< bgsched::Hardware::State >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Hardware__State_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hardware_getLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware const > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware_getLocation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware_getLocation" "', argument " "1"" of type '" "bgsched::Hardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Hardware const *)arg1)->getLocation();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Hardware(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Hardware",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Hardware" "', argument " "1"" of type '" "bgsched::Hardware *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hardware_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware const > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::Hardware::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware_getPimpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware_getPimpl" "', argument " "1"" of type '" "bgsched::Hardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Hardware const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Hardware::Pimpl(static_cast< const bgsched::Hardware::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hardware_getStateValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware_getStateValue",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware_getStateValue" "', argument " "1"" of type '" "bgsched::Hardware *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)bgsched_Hardware_getStateValue(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hardware_getStateString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware_getStateString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware_getStateString" "', argument " "1"" of type '" "bgsched::Hardware *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = bgsched_Hardware_getStateString(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Hardware___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Hardware *arg1 = (bgsched::Hardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Hardware > tempshared1 ;
  boost::shared_ptr< bgsched::Hardware > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Hardware___str__",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Hardware___str__" "', argument " "1"" of type '" "bgsched::Hardware *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Hardware > * >(argp1);
      arg1 = const_cast< bgsched::Hardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (char *)bgsched_Hardware___str__(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Hardware_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Hardware_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Node_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Node *arg1 = (bgsched::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Node const > tempshared1 ;
  boost::shared_ptr< bgsched::Node const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Node_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Node_getSequenceId" "', argument " "1"" of type '" "bgsched::Node const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Node > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Node > * >(argp1);
      arg1 = const_cast< bgsched::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Node > * >(argp1);
      arg1 = const_cast< bgsched::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::Node const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Node::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Node *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Node",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Node" "', argument " "1"" of type '" "bgsched::Node::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Node" "', argument " "1"" of type '" "bgsched::Node::Pimpl""'");
    } else {
      bgsched::Node::Pimpl * temp = reinterpret_cast< bgsched::Node::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Node *)new bgsched::Node(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Node > *smartresult = result ? new boost::shared_ptr<  bgsched::Node >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Node *arg1 = (bgsched::Node *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Node > tempshared1 ;
  boost::shared_ptr< bgsched::Node > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Node",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Node" "', argument " "1"" of type '" "bgsched::Node *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Node > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Node > * >(argp1);
      arg1 = const_cast< bgsched::Node * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Node > * >(argp1);
      arg1 = const_cast< bgsched::Node * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Node_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Shape_getMidplaneSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  bgsched::Dimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shape_getMidplaneSize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_getMidplaneSize" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape_getMidplaneSize" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape_getMidplaneSize" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Dimension * >(argp2);
  {
    try{
      result = (uint32_t)((bgsched::Shape const *)arg1)->getMidplaneSize((bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_getNodeSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  bgsched::Dimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shape_getNodeSize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_getNodeSize" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape_getNodeSize" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape_getNodeSize" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Dimension * >(argp2);
  {
    try{
      result = (uint32_t)((bgsched::Shape const *)arg1)->getNodeSize((bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_getMidplaneCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shape_getMidplaneCount",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_getMidplaneCount" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Shape const *)arg1)->getMidplaneCount();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_getNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shape_getNodeCount",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_getNodeCount" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Shape const *)arg1)->getNodeCount();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_isSmall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shape_isSmall",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_isSmall" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::Shape const *)arg1)->isSmall();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_isLarge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shape_isLarge",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_isLarge" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::Shape const *)arg1)->isLarge();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_isFull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shape_isFull",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_isFull" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::Shape const *)arg1)->isFull();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::Shape::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Shape_getPimpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape_getPimpl" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Shape const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Shape::Pimpl(static_cast< const bgsched::Shape::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shape__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Shape::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Shape *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shape",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Shape" "', argument " "1"" of type '" "bgsched::Shape::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Shape" "', argument " "1"" of type '" "bgsched::Shape::Pimpl""'");
    } else {
      bgsched::Shape::Pimpl * temp = reinterpret_cast< bgsched::Shape::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Shape *)new bgsched::Shape(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = result ? new boost::shared_ptr<  bgsched::Shape >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shape__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  PyObject * obj0 = 0 ;
  bgsched::Shape *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Shape",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Shape" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Shape" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      arg1 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1)->get());
    }
  }
  {
    try{
      result = (bgsched::Shape *)new bgsched::Shape((bgsched::Shape const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = result ? new boost::shared_ptr<  bgsched::Shape >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Shape(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Shape__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Shape__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Shape'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::Shape::Shape(bgsched::Shape::Pimpl)\n"
    "    bgsched::Shape::Shape(bgsched::Shape const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Shape___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  bgsched::Shape *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shape___eq__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape___eq__" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape___eq__" "', argument " "2"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape___eq__" "', argument " "2"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      arg2 = const_cast< bgsched::Shape * >(tempshared2.get());
    } else {
      arg2 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2)->get());
    }
  }
  {
    try{
      result = (bool)((bgsched::Shape const *)arg1)->operator ==((bgsched::Shape const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Shape___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  bgsched::Shape *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  boost::shared_ptr< bgsched::Shape const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Shape___ne__",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape___ne__" "', argument " "1"" of type '" "bgsched::Shape const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape___ne__" "', argument " "2"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape___ne__" "', argument " "2"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      arg2 = const_cast< bgsched::Shape * >(tempshared2.get());
    } else {
      arg2 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2)->get());
    }
  }
  {
    try{
      result = (bool)((bgsched::Shape const *)arg1)->operator !=((bgsched::Shape const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Shape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = (bgsched::Shape *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape > tempshared1 ;
  boost::shared_ptr< bgsched::Shape > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Shape",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shape" "', argument " "1"" of type '" "bgsched::Shape *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Shape_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Cable_getDestinationLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Cable *arg1 = (bgsched::Cable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Cable const > tempshared1 ;
  boost::shared_ptr< bgsched::Cable const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cable_getDestinationLocation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cable_getDestinationLocation" "', argument " "1"" of type '" "bgsched::Cable const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Cable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Cable > * >(argp1);
      arg1 = const_cast< bgsched::Cable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Cable > * >(argp1);
      arg1 = const_cast< bgsched::Cable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Cable const *)arg1)->getDestinationLocation();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cable_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Cable *arg1 = (bgsched::Cable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Cable const > tempshared1 ;
  boost::shared_ptr< bgsched::Cable const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Cable_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cable_getSequenceId" "', argument " "1"" of type '" "bgsched::Cable const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Cable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Cable > * >(argp1);
      arg1 = const_cast< bgsched::Cable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Cable > * >(argp1);
      arg1 = const_cast< bgsched::Cable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::Cable const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Cable::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Cable *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Cable",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cable" "', argument " "1"" of type '" "bgsched::Cable::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cable" "', argument " "1"" of type '" "bgsched::Cable::Pimpl""'");
    } else {
      bgsched::Cable::Pimpl * temp = reinterpret_cast< bgsched::Cable::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Cable *)new bgsched::Cable(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Cable > *smartresult = result ? new boost::shared_ptr<  bgsched::Cable >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Cable *arg1 = (bgsched::Cable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Cable > tempshared1 ;
  boost::shared_ptr< bgsched::Cable > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Cable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cable" "', argument " "1"" of type '" "bgsched::Cable *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Cable > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Cable > * >(argp1);
      arg1 = const_cast< bgsched::Cable * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Cable > * >(argp1);
      arg1 = const_cast< bgsched::Cable * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Cable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SwitchSettings_getLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SwitchSettings *arg1 = (bgsched::SwitchSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchSettings_getLocation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SwitchSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchSettings_getLocation" "', argument " "1"" of type '" "bgsched::SwitchSettings const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SwitchSettings * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::SwitchSettings const *)arg1)->getLocation();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchSettings_getPortsSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SwitchSettings *arg1 = (bgsched::SwitchSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::SwitchSettings::PortsSetting > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchSettings_getPortsSetting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SwitchSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchSettings_getPortsSetting" "', argument " "1"" of type '" "bgsched::SwitchSettings const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SwitchSettings * >(argp1);
  {
    try{
      result = ((bgsched::SwitchSettings const *)arg1)->getPortsSetting();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::SwitchSettings::PortsSetting >(static_cast< const bgsched::EnumWrapper< bgsched::SwitchSettings::PortsSetting >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchSettings_isIncludedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SwitchSettings *arg1 = (bgsched::SwitchSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchSettings_isIncludedMidplane",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SwitchSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchSettings_isIncludedMidplane" "', argument " "1"" of type '" "bgsched::SwitchSettings const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SwitchSettings * >(argp1);
  {
    try{
      result = (bool)((bgsched::SwitchSettings const *)arg1)->isIncludedMidplane();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchSettings_getComputeBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SwitchSettings *arg1 = (bgsched::SwitchSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchSettings_getComputeBlockName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SwitchSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchSettings_getComputeBlockName" "', argument " "1"" of type '" "bgsched::SwitchSettings const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SwitchSettings * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::SwitchSettings const *)arg1)->getComputeBlockName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchSettings_isPassthrough(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SwitchSettings *arg1 = (bgsched::SwitchSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchSettings_isPassthrough",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SwitchSettings, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchSettings_isPassthrough" "', argument " "1"" of type '" "bgsched::SwitchSettings const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SwitchSettings * >(argp1);
  {
    try{
      result = (bool)((bgsched::SwitchSettings const *)arg1)->isPassthrough();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::SwitchSettings::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SwitchSettings *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwitchSettings",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SwitchSettings" "', argument " "1"" of type '" "bgsched::SwitchSettings::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SwitchSettings" "', argument " "1"" of type '" "bgsched::SwitchSettings::Pimpl""'");
    } else {
      bgsched::SwitchSettings::Pimpl * temp = reinterpret_cast< bgsched::SwitchSettings::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::SwitchSettings *)new bgsched::SwitchSettings(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__SwitchSettings, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwitchSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SwitchSettings *arg1 = (bgsched::SwitchSettings *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwitchSettings",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SwitchSettings, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwitchSettings" "', argument " "1"" of type '" "bgsched::SwitchSettings *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SwitchSettings * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SwitchSettings_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__SwitchSettings, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Switch_getInUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch const > tempshared1 ;
  boost::shared_ptr< bgsched::Switch const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Switch::InUse > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getInUse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getInUse" "', argument " "1"" of type '" "bgsched::Switch const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Switch const *)arg1)->getInUse();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Switch::InUse >(static_cast< const bgsched::EnumWrapper< bgsched::Switch::InUse >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch const > tempshared1 ;
  boost::shared_ptr< bgsched::Switch const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getSequenceId" "', argument " "1"" of type '" "bgsched::Switch const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::Switch const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getSwitchSettings(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch const > tempshared1 ;
  boost::shared_ptr< bgsched::Switch const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::SwitchSettings const >,std::allocator< boost::shared_ptr< bgsched::SwitchSettings const > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getSwitchSettings",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getSwitchSettings" "', argument " "1"" of type '" "bgsched::Switch const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Switch const *)arg1)->getSwitchSettings();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::SwitchSettings::ConstPtrs(static_cast< const bgsched::SwitchSettings::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getCable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch const > tempshared1 ;
  boost::shared_ptr< bgsched::Switch const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Cable::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getCable",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getCable" "', argument " "1"" of type '" "bgsched::Switch const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Switch const *)arg1)->getCable();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Cable > *smartresult = result ? new boost::shared_ptr< const bgsched::Cable >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getMidplaneCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch const > tempshared1 ;
  boost::shared_ptr< bgsched::Switch const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::Coordinates > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getMidplaneCoordinates",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getMidplaneCoordinates" "', argument " "1"" of type '" "bgsched::Switch const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Switch const *)arg1)->getMidplaneCoordinates();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Coordinates(static_cast< const bgsched::Coordinates& >(result))), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getMidplaneLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch const > tempshared1 ;
  boost::shared_ptr< bgsched::Switch const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getMidplaneLocation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getMidplaneLocation" "', argument " "1"" of type '" "bgsched::Switch const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Switch const *)arg1)->getMidplaneLocation();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Switch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Switch::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Switch *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Switch",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Switch" "', argument " "1"" of type '" "bgsched::Switch::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Switch" "', argument " "1"" of type '" "bgsched::Switch::Pimpl""'");
    } else {
      bgsched::Switch::Pimpl * temp = reinterpret_cast< bgsched::Switch::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Switch *)new bgsched::Switch(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Switch > *smartresult = result ? new boost::shared_ptr<  bgsched::Switch >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getInUseValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch > tempshared1 ;
  boost::shared_ptr< bgsched::Switch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getInUseValue",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getInUseValue" "', argument " "1"" of type '" "bgsched::Switch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)bgsched_Switch_getInUseValue(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Switch_getInUseString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch > tempshared1 ;
  boost::shared_ptr< bgsched::Switch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Switch_getInUseString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Switch_getInUseString" "', argument " "1"" of type '" "bgsched::Switch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = bgsched_Switch_getInUseString(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Switch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Switch *arg1 = (bgsched::Switch *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Switch > tempshared1 ;
  boost::shared_ptr< bgsched::Switch > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Switch",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Switch" "', argument " "1"" of type '" "bgsched::Switch *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Switch > * >(argp1);
      arg1 = const_cast< bgsched::Switch * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Switch_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NodeBoard_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getSequenceId" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::NodeBoard const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getQuadrant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::NodeBoard::Quadrant > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getQuadrant",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getQuadrant" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::NodeBoard const *)arg1)->getQuadrant();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::NodeBoard::Quadrant >(static_cast< const bgsched::EnumWrapper< bgsched::NodeBoard::Quadrant >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_isInUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_isInUse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_isInUse" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::NodeBoard const *)arg1)->isInUse();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getComputeBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getComputeBlockName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getComputeBlockName" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::NodeBoard const *)arg1)->getComputeBlockName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getMidplaneCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::Coordinates > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getMidplaneCoordinates",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getMidplaneCoordinates" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::NodeBoard const *)arg1)->getMidplaneCoordinates();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Coordinates(static_cast< const bgsched::Coordinates& >(result))), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getMidplaneLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getMidplaneLocation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getMidplaneLocation" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::NodeBoard const *)arg1)->getMidplaneLocation();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getAvailableNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getAvailableNodeCount",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getAvailableNodeCount" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::NodeBoard const *)arg1)->getAvailableNodeCount();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_isMetaState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard const > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_isMetaState",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_isMetaState" "', argument " "1"" of type '" "bgsched::NodeBoard const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::NodeBoard const *)arg1)->isMetaState();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::NodeBoard::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::NodeBoard *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeBoard",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBoard" "', argument " "1"" of type '" "bgsched::NodeBoard::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBoard" "', argument " "1"" of type '" "bgsched::NodeBoard::Pimpl""'");
    } else {
      bgsched::NodeBoard::Pimpl * temp = reinterpret_cast< bgsched::NodeBoard::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::NodeBoard *)new bgsched::NodeBoard(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::NodeBoard > *smartresult = result ? new boost::shared_ptr<  bgsched::NodeBoard >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getQuadrantValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getQuadrantValue",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getQuadrantValue" "', argument " "1"" of type '" "bgsched::NodeBoard *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)bgsched_NodeBoard_getQuadrantValue(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoard_getQuadrantString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoard_getQuadrantString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoard_getQuadrantString" "', argument " "1"" of type '" "bgsched::NodeBoard *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = bgsched_NodeBoard_getQuadrantString(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::NodeBoard *arg1 = (bgsched::NodeBoard *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::NodeBoard > tempshared1 ;
  boost::shared_ptr< bgsched::NodeBoard > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodeBoard",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeBoard" "', argument " "1"" of type '" "bgsched::NodeBoard *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::NodeBoard > * >(argp1);
      arg1 = const_cast< bgsched::NodeBoard * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeBoard_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Midplane_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getSequenceId" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::Midplane const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getComputeNodeMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getComputeNodeMemory",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getComputeNodeMemory" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Midplane const *)arg1)->getComputeNodeMemory();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getAvailableNodeBoardCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getAvailableNodeBoardCount",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getAvailableNodeBoardCount" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Midplane const *)arg1)->getAvailableNodeBoardCount();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getNodeBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::NodeBoard::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Midplane_getNodeBoard",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getNodeBoard" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Midplane_getNodeBoard" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try{
      result = ((bgsched::Midplane const *)arg1)->getNodeBoard(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::NodeBoard > *smartresult = result ? new boost::shared_ptr< const bgsched::NodeBoard >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getSwitch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  bgsched::Dimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Switch::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Midplane_getSwitch",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getSwitch" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Midplane_getSwitch" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Midplane_getSwitch" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Dimension * >(argp2);
  {
    try{
      result = ((bgsched::Midplane const *)arg1)->getSwitch((bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Switch > *smartresult = result ? new boost::shared_ptr< const bgsched::Switch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Coordinates *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getCoordinates",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getCoordinates" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::Coordinates *) &((bgsched::Midplane const *)arg1)->getCoordinates();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Coordinates, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getInUse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Midplane::InUse > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getInUse",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getInUse" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Midplane const *)arg1)->getInUse();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Midplane::InUse >(static_cast< const bgsched::EnumWrapper< bgsched::Midplane::InUse >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getComputeBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane const > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getComputeBlockName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getComputeBlockName" "', argument " "1"" of type '" "bgsched::Midplane const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Midplane const *)arg1)->getComputeBlockName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Midplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Midplane::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Midplane *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Midplane",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Midplane" "', argument " "1"" of type '" "bgsched::Midplane::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Midplane" "', argument " "1"" of type '" "bgsched::Midplane::Pimpl""'");
    } else {
      bgsched::Midplane::Pimpl * temp = reinterpret_cast< bgsched::Midplane::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Midplane *)new bgsched::Midplane(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = result ? new boost::shared_ptr<  bgsched::Midplane >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::Midplane::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getPimpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getPimpl" "', argument " "1"" of type '" "bgsched::Midplane *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Midplane::Pimpl(static_cast< const bgsched::Midplane::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getInUseValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getInUseValue",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getInUseValue" "', argument " "1"" of type '" "bgsched::Midplane *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)bgsched_Midplane_getInUseValue(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplane_getInUseString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplane_getInUseString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplane_getInUseString" "', argument " "1"" of type '" "bgsched::Midplane *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = bgsched_Midplane_getInUseString(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Midplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Midplane *arg1 = (bgsched::Midplane *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Midplane > tempshared1 ;
  boost::shared_ptr< bgsched::Midplane > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Midplane",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Midplane" "', argument " "1"" of type '" "bgsched::Midplane *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Midplane > * >(argp1);
      arg1 = const_cast< bgsched::Midplane * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Midplane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ComputeHardware_getState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Hardware::State > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComputeHardware_getState",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getState" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeHardware_getState" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeHardware_getState" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::ComputeHardware const *)arg1)->getState((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Hardware::State >(static_cast< const bgsched::EnumWrapper< bgsched::Hardware::State >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Hardware__State_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMachineSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  SwigValueWrapper< bgsched::Dimension > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComputeHardware_getMachineSize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getMachineSize" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeHardware_getMachineSize" "', argument " "2"" of type '" "bgsched::Dimension const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeHardware_getMachineSize" "', argument " "2"" of type '" "bgsched::Dimension const""'");
    } else {
      bgsched::Dimension * temp = reinterpret_cast< bgsched::Dimension * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::ComputeHardware const *)arg1)->getMachineSize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMidplaneSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  SwigValueWrapper< bgsched::Dimension > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComputeHardware_getMidplaneSize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getMidplaneSize" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeHardware_getMidplaneSize" "', argument " "2"" of type '" "bgsched::Dimension const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeHardware_getMidplaneSize" "', argument " "2"" of type '" "bgsched::Dimension const""'");
    } else {
      bgsched::Dimension * temp = reinterpret_cast< bgsched::Dimension * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::ComputeHardware const *)arg1)->getMidplaneSize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMachineRows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComputeHardware_getMachineRows",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getMachineRows" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::ComputeHardware const *)arg1)->getMachineRows();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMachineColumns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ComputeHardware_getMachineColumns",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getMachineColumns" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::ComputeHardware const *)arg1)->getMachineColumns();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMidplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComputeHardware_getMidplane",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getMidplane" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeHardware_getMidplane" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeHardware_getMidplane" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = ((bgsched::ComputeHardware const *)arg1)->getMidplane((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = result ? new boost::shared_ptr< const bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMidplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware const > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware const > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ComputeHardware_getMidplane",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ComputeHardware_getMidplane" "', argument " "1"" of type '" "bgsched::ComputeHardware const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ComputeHardware_getMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ComputeHardware_getMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::ComputeHardware const *)arg1)->getMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = result ? new boost::shared_ptr< const bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ComputeHardware_getMidplane(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__Coordinates, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ComputeHardware_getMidplane__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ComputeHardware_getMidplane__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ComputeHardware_getMidplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::ComputeHardware::getMidplane(bgsched::Coordinates const &) const\n"
    "    bgsched::ComputeHardware::getMidplane(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ComputeHardware(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::ComputeHardware::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::ComputeHardware *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ComputeHardware",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ComputeHardware" "', argument " "1"" of type '" "bgsched::ComputeHardware::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ComputeHardware" "', argument " "1"" of type '" "bgsched::ComputeHardware::Pimpl""'");
    } else {
      bgsched::ComputeHardware::Pimpl * temp = reinterpret_cast< bgsched::ComputeHardware::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::ComputeHardware *)new bgsched::ComputeHardware(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::ComputeHardware > *smartresult = result ? new boost::shared_ptr<  bgsched::ComputeHardware >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ComputeHardware(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware *arg1 = (bgsched::ComputeHardware *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::ComputeHardware > tempshared1 ;
  boost::shared_ptr< bgsched::ComputeHardware > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ComputeHardware",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ComputeHardware" "', argument " "1"" of type '" "bgsched::ComputeHardware *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::ComputeHardware > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::ComputeHardware > * >(argp1);
      arg1 = const_cast< bgsched::ComputeHardware * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ComputeHardware_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DatabaseErrors_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::DatabaseErrors::Value arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DatabaseErrors_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DatabaseErrors_toString" "', argument " "1"" of type '" "bgsched::DatabaseErrors::Value""'");
  } 
  arg1 = static_cast< bgsched::DatabaseErrors::Value >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DatabaseErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DatabaseErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = bgsched::DatabaseErrors::toString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DatabaseErrors_fromDatabaseStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::DatabaseErrors::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DatabaseErrors_fromDatabaseStatus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DatabaseErrors_fromDatabaseStatus" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try{
      result = (bgsched::DatabaseErrors::Value)bgsched::DatabaseErrors::fromDatabaseStatus(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DatabaseErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::DatabaseErrors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DatabaseErrors")) SWIG_fail;
  {
    try{
      result = (bgsched::DatabaseErrors *)new bgsched::DatabaseErrors();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__DatabaseErrors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DatabaseErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::DatabaseErrors *arg1 = (bgsched::DatabaseErrors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DatabaseErrors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__DatabaseErrors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DatabaseErrors" "', argument " "1"" of type '" "bgsched::DatabaseErrors *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::DatabaseErrors * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DatabaseErrors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__DatabaseErrors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BlockSort_Field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSort_Field *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockSort_Field")) SWIG_fail;
  {
    try{
      result = (BlockSort_Field *)new BlockSort_Field();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BlockSort_Field, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockSort_Field(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSort_Field *arg1 = (BlockSort_Field *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockSort_Field",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSort_Field, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockSort_Field" "', argument " "1"" of type '" "BlockSort_Field *""'"); 
  }
  arg1 = reinterpret_cast< BlockSort_Field * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockSort_Field_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BlockSort_Field, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_BlockSort_AnyOrder_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BlockSort_AnyOrder is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BlockSort_AnyOrder_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&bgsched::core::BlockSort::AnyOrder), SWIGTYPE_p_bgsched__core__BlockSort,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_BlockSort__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockSort")) SWIG_fail;
  {
    try{
      result = (bgsched::core::BlockSort *)new bgsched::core::BlockSort();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__core__BlockSort, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockSort__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort::Field::Value arg1 ;
  bgsched::core::SortOrder::Value arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::core::BlockSort *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BlockSort",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__core__BlockSort__Field__Value,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockSort" "', argument " "1"" of type '" "bgsched::core::BlockSort::Field::Value""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockSort" "', argument " "1"" of type '" "bgsched::core::BlockSort::Field::Value""'");
    } else {
      bgsched::core::BlockSort::Field::Value * temp = reinterpret_cast< bgsched::core::BlockSort::Field::Value * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BlockSort" "', argument " "2"" of type '" "bgsched::core::SortOrder::Value""'");
  } 
  arg2 = static_cast< bgsched::core::SortOrder::Value >(val2);
  {
    try{
      result = (bgsched::core::BlockSort *)new bgsched::core::BlockSort(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__core__BlockSort, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockSort(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BlockSort__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__core__BlockSort__Field__Value, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BlockSort__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BlockSort'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::core::BlockSort::BlockSort()\n"
    "    bgsched::core::BlockSort::BlockSort(bgsched::core::BlockSort::Field::Value,bgsched::core::SortOrder::Value)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockSort_isSorted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *arg1 = (bgsched::core::BlockSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSort_isSorted",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__BlockSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSort_isSorted" "', argument " "1"" of type '" "bgsched::core::BlockSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::BlockSort * >(argp1);
  {
    try{
      result = (bool)((bgsched::core::BlockSort const *)arg1)->isSorted();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSort_getField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *arg1 = (bgsched::core::BlockSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< bgsched::core::BlockSort::Field::Value > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSort_getField",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__BlockSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSort_getField" "', argument " "1"" of type '" "bgsched::core::BlockSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::BlockSort * >(argp1);
  {
    try{
      result = ((bgsched::core::BlockSort const *)arg1)->getField();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::core::BlockSort::Field::Value >(static_cast< const bgsched::EnumWrapper< bgsched::core::BlockSort::Field::Value >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSort_getSortOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *arg1 = (bgsched::core::BlockSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::core::SortOrder::Value > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSort_getSortOrder",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__BlockSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSort_getSortOrder" "', argument " "1"" of type '" "bgsched::core::BlockSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::BlockSort * >(argp1);
  {
    try{
      result = ((bgsched::core::BlockSort const *)arg1)->getSortOrder();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::core::SortOrder::Value >(static_cast< const bgsched::EnumWrapper< bgsched::core::SortOrder::Value >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSort_setSort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *arg1 = (bgsched::core::BlockSort *) 0 ;
  bgsched::core::BlockSort::Field::Value arg2 ;
  bgsched::core::SortOrder::Value arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockSort_setSort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__BlockSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSort_setSort" "', argument " "1"" of type '" "bgsched::core::BlockSort *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::BlockSort * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__core__BlockSort__Field__Value,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockSort_setSort" "', argument " "2"" of type '" "bgsched::core::BlockSort::Field::Value""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockSort_setSort" "', argument " "2"" of type '" "bgsched::core::BlockSort::Field::Value""'");
    } else {
      bgsched::core::BlockSort::Field::Value * temp = reinterpret_cast< bgsched::core::BlockSort::Field::Value * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockSort_setSort" "', argument " "3"" of type '" "bgsched::core::SortOrder::Value""'");
  } 
  arg3 = static_cast< bgsched::core::SortOrder::Value >(val3);
  {
    try{
      (arg1)->setSort(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockSort_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *arg1 = (bgsched::core::BlockSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::core::BlockSort::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockSort_getPimpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__BlockSort, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockSort_getPimpl" "', argument " "1"" of type '" "bgsched::core::BlockSort const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::BlockSort * >(argp1);
  {
    try{
      result = ((bgsched::core::BlockSort const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::core::BlockSort::Pimpl(static_cast< const bgsched::core::BlockSort::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__core__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockSort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::core::BlockSort *arg1 = (bgsched::core::BlockSort *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockSort",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__core__BlockSort, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockSort" "', argument " "1"" of type '" "bgsched::core::BlockSort *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::core::BlockSort * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockSort_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__core__BlockSort, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IOLink_getDestinationLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::IOLink *arg1 = (bgsched::IOLink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::IOLink const > tempshared1 ;
  boost::shared_ptr< bgsched::IOLink const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLink_getDestinationLocation",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLink_getDestinationLocation" "', argument " "1"" of type '" "bgsched::IOLink const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::IOLink > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::IOLink > * >(argp1);
      arg1 = const_cast< bgsched::IOLink * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::IOLink > * >(argp1);
      arg1 = const_cast< bgsched::IOLink * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::IOLink const *)arg1)->getDestinationLocation();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLink_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::IOLink *arg1 = (bgsched::IOLink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::IOLink const > tempshared1 ;
  boost::shared_ptr< bgsched::IOLink const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLink_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLink_getSequenceId" "', argument " "1"" of type '" "bgsched::IOLink const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::IOLink > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::IOLink > * >(argp1);
      arg1 = const_cast< bgsched::IOLink * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::IOLink > * >(argp1);
      arg1 = const_cast< bgsched::IOLink * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::IOLink const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::IOLink::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::IOLink *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOLink",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOLink" "', argument " "1"" of type '" "bgsched::IOLink::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOLink" "', argument " "1"" of type '" "bgsched::IOLink::Pimpl""'");
    } else {
      bgsched::IOLink::Pimpl * temp = reinterpret_cast< bgsched::IOLink::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::IOLink *)new bgsched::IOLink(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::IOLink > *smartresult = result ? new boost::shared_ptr<  bgsched::IOLink >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::IOLink *arg1 = (bgsched::IOLink *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::IOLink > tempshared1 ;
  boost::shared_ptr< bgsched::IOLink > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOLink",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOLink" "', argument " "1"" of type '" "bgsched::IOLink *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::IOLink > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::IOLink > * >(argp1);
      arg1 = const_cast< bgsched::IOLink * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::IOLink > * >(argp1);
      arg1 = const_cast< bgsched::IOLink * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOLink_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Connectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Connectivity *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Connectivity")) SWIG_fail;
  {
    try{
      result = (Connectivity *)new Connectivity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Connectivity, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Connectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Connectivity *arg1 = (Connectivity *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Connectivity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Connectivity, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Connectivity" "', argument " "1"" of type '" "Connectivity *""'"); 
  }
  arg1 = reinterpret_cast< Connectivity * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Connectivity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Connectivity, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Block_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block::Midplanes *arg1 = 0 ;
  bgsched::Block::PassthroughMidplanes *arg2 = 0 ;
  bgsched::Block::DimensionConnectivity *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bgsched::Block::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Block_create",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_create" "', argument " "1"" of type '" "bgsched::Block::Midplanes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_create" "', argument " "1"" of type '" "bgsched::Block::Midplanes const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Block::Midplanes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_create" "', argument " "2"" of type '" "bgsched::Block::PassthroughMidplanes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_create" "', argument " "2"" of type '" "bgsched::Block::PassthroughMidplanes const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Block::PassthroughMidplanes * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Block_create" "', argument " "3"" of type '" "bgsched::Block::DimensionConnectivity const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_create" "', argument " "3"" of type '" "bgsched::Block::DimensionConnectivity const &""'"); 
  }
  arg3 = reinterpret_cast< bgsched::Block::DimensionConnectivity * >(argp3);
  {
    try{
      result = bgsched::Block::create((std::vector< std::string,std::allocator< std::string > > const &)*arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block::NodeBoards *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Block::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_create",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_create" "', argument " "1"" of type '" "bgsched::Block::NodeBoards const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_create" "', argument " "1"" of type '" "bgsched::Block::NodeBoards const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::Block::NodeBoards * >(argp1);
  {
    try{
      result = bgsched::Block::create((std::vector< std::string,std::allocator< std::string > > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_create__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint8_t arg2 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Block::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_create",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_create" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_uint8_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_create" "', argument " "2"" of type '" "uint8_t const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_create" "', argument " "2"" of type '" "uint8_t const""'");
    } else {
      uint8_t * temp = reinterpret_cast< uint8_t * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = bgsched::Block::create((std::string const &)*arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Block_create__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_uint8_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Block_create__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Block_create__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Block_create'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::Block::create(bgsched::Block::Midplanes const &,bgsched::Block::PassthroughMidplanes const &,bgsched::Block::DimensionConnectivity const &)\n"
    "    bgsched::Block::create(bgsched::Block::NodeBoards const &)\n"
    "    bgsched::Block::create(std::string const &,uint8_t const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Block_isIOConnected(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_isIOConnected",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_isIOConnected" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_isIOConnected" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_isIOConnected" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  {
    try{
      result = (bool)bgsched::Block::isIOConnected((std::string const &)*arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_checkIOLinks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bgsched::IOLink::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_checkIOLinks",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_checkIOLinks" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_checkIOLinks" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::Block::checkIOLinks((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::IOLink::ConstPtrs(static_cast< const bgsched::IOLink::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_checkIOLinksSummary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Block_checkIOLinksSummary",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_checkIOLinksSummary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_checkIOLinksSummary" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_checkIOLinksSummary" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Block_checkIOLinksSummary" "', argument " "3"" of type '" "uint32_t *""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);
  {
    try{
      bgsched::Block::checkIOLinksSummary((std::string const &)*arg1,arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_initiateBoot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_initiateBoot",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_initiateBoot" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_initiateBoot" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      bgsched::Block::initiateBoot((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_initiateFree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_initiateFree",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_initiateFree" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_initiateFree" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      bgsched::Block::initiateFree((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_remove",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_remove" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_remove" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      bgsched::Block::remove((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_addUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_addUser",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_addUser" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_addUser" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_addUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_addUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      bgsched::Block::addUser((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_removeUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_removeUser",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_removeUser" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_removeUser" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_removeUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_removeUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      bgsched::Block::removeUser((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_isAuthorized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_isAuthorized",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_isAuthorized" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_isAuthorized" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_isAuthorized" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_isAuthorized" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = (bool)bgsched::Block::isAuthorized((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getUsers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getUsers",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getUsers" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_getUsers" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::Block::getUsers((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_add",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_add" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_add" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->add((std::string const &)*arg2);;
    }
    catch(bgsched::InputException &e){
      PyErr_SetString(PyExc_IOError, const_cast<char *>(e.what()));
      return NULL;    
    }
    catch(bgsched::DatabaseException &e){
      PyErr_SetString(PyExc_IOError, const_cast<char *>(e.what()));
      return NULL;    
    }
    catch(bgsched::RuntimeException &e){
      PyErr_SetString(PyExc_RuntimeError, const_cast<char *>(e.what()));
      return NULL;    
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_update(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_update",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_update" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (arg1)->update();;
    }
    catch(bgsched::InputException &e){
      PyErr_SetString(PyExc_IOError, const_cast<char *>(e.what()));
      return NULL;    
    }
    catch(bgsched::DatabaseException &e){
      PyErr_SetString(PyExc_IOError, const_cast<char *>(e.what()));
      return NULL;    
    }
    catch(bgsched::InternalException &e){
      PyErr_SetString(PyExc_RuntimeError, const_cast<char *>(e.what()));
      return NULL;    
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_toString",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_toString" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Block_toString" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      result = ((bgsched::Block const *)arg1)->toString(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_isLarge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_isLarge",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_isLarge" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::Block const *)arg1)->isLarge();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_isSmall(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_isSmall",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_isSmall" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bool)((bgsched::Block const *)arg1)->isSmall();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getDimensionSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  SwigValueWrapper< bgsched::Dimension > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_getDimensionSize",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getDimensionSize" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_getDimensionSize" "', argument " "2"" of type '" "bgsched::Dimension const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_getDimensionSize" "', argument " "2"" of type '" "bgsched::Dimension const""'");
    } else {
      bgsched::Dimension * temp = reinterpret_cast< bgsched::Dimension * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Block const *)arg1)->getDimensionSize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_isTorus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  SwigValueWrapper< bgsched::Dimension > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_isTorus",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_isTorus" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_isTorus" "', argument " "2"" of type '" "bgsched::Dimension const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_isTorus" "', argument " "2"" of type '" "bgsched::Dimension const""'");
    } else {
      bgsched::Dimension * temp = reinterpret_cast< bgsched::Dimension * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = (bool)((bgsched::Block const *)arg1)->isTorus(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_isMesh(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  SwigValueWrapper< bgsched::Dimension > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_isMesh",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_isMesh" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_isMesh" "', argument " "2"" of type '" "bgsched::Dimension const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_isMesh" "', argument " "2"" of type '" "bgsched::Dimension const""'");
    } else {
      bgsched::Dimension * temp = reinterpret_cast< bgsched::Dimension * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = (bool)((bgsched::Block const *)arg1)->isMesh(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getName",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getName" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getCreationId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::BlockCreationId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getCreationId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getCreationId" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::BlockCreationId)((bgsched::Block const *)arg1)->getCreationId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getDescription",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getDescription" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getDescription();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getOwner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getOwner",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getOwner" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getOwner();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getUser",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getUser" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getUser();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getBootOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getBootOptions",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getBootOptions" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getBootOptions();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getMicroLoaderImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getMicroLoaderImage",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getMicroLoaderImage" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getMicroLoaderImage();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getNodeConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getNodeConfiguration",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getNodeConfiguration" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getNodeConfiguration();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getSequenceId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::SequenceId result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getSequenceId",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getSequenceId" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (bgsched::SequenceId)((bgsched::Block const *)arg1)->getSequenceId();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Block::Status > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getStatus",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getStatus" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Block const *)arg1)->getStatus();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Block::Status >(static_cast< const bgsched::EnumWrapper< bgsched::Block::Status >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Block__Status_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getComputeNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getComputeNodeCount",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getComputeNodeCount" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (uint32_t)((bgsched::Block const *)arg1)->getComputeNodeCount();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getOptions",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getOptions" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (std::string *) &((bgsched::Block const *)arg1)->getOptions();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getJobIds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< unsigned long,std::allocator< unsigned long > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getJobIds",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getJobIds" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Block const *)arg1)->getJobIds();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< bgsched::Job::Id,std::allocator< bgsched::Job::Id > >(static_cast< const std::vector< bgsched::Job::Id,std::allocator< bgsched::Job::Id > >& >(result))), SWIGTYPE_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Block::Midplanes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getMidplanes",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getMidplanes" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Block const *)arg1)->getMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::Midplanes(static_cast< const bgsched::Block::Midplanes& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getNodeBoards(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Block::NodeBoards result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getNodeBoards",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getNodeBoards" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Block const *)arg1)->getNodeBoards();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::NodeBoards(static_cast< const bgsched::Block::NodeBoards& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getPassthroughMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Block::PassthroughMidplanes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getPassthroughMidplanes",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getPassthroughMidplanes" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Block const *)arg1)->getPassthroughMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::PassthroughMidplanes(static_cast< const bgsched::Block::PassthroughMidplanes& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_setName",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_setName" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setName((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_setDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_setDescription",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_setDescription" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_setDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_setDescription" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setDescription((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_setOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_setOptions",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_setOptions" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_setOptions" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_setOptions" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setOptions((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_setBootOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_setBootOptions",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_setBootOptions" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_setBootOptions" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_setBootOptions" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setBootOptions((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_setMicroLoaderImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_setMicroLoaderImage",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_setMicroLoaderImage" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_setMicroLoaderImage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_setMicroLoaderImage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setMicroLoaderImage((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_setNodeConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Block_setNodeConfiguration",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_setNodeConfiguration" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Block_setNodeConfiguration" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Block_setNodeConfiguration" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setNodeConfiguration((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block const > tempshared1 ;
  boost::shared_ptr< bgsched::Block const > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::Block::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getPimpl",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getPimpl" "', argument " "1"" of type '" "bgsched::Block const *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr< const bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = ((bgsched::Block const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::Pimpl(static_cast< const bgsched::Block::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::Block::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Block *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Block",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Block" "', argument " "1"" of type '" "bgsched::Block::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Block" "', argument " "1"" of type '" "bgsched::Block::Pimpl""'");
    } else {
      bgsched::Block::Pimpl * temp = reinterpret_cast< bgsched::Block::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::Block *)new bgsched::Block(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_NEW | SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getStatusValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getStatusValue",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getStatusValue" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = (int)bgsched_Block_getStatusValue(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Block_getStatusString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Block_getStatusString",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Block_getStatusString" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      result = bgsched_Block_getStatusString(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Block *arg1 = (bgsched::Block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Block > tempshared1 ;
  boost::shared_ptr< bgsched::Block > *smartarg1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Block",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0 |  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Block" "', argument " "1"" of type '" "bgsched::Block *""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >(tempshared1.get());
    } else {
      smartarg1 = reinterpret_cast< boost::shared_ptr<  bgsched::Block > * >(argp1);
      arg1 = const_cast< bgsched::Block * >((smartarg1 ? smartarg1->get() : 0));
    }
  }
  {
    try{
      (void)arg1; delete smartarg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BlockSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSize *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockSize")) SWIG_fail;
  {
    try{
      result = (BlockSize *)new BlockSize();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_BlockSize, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  BlockSize *arg1 = (BlockSize *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_BlockSize, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockSize" "', argument " "1"" of type '" "BlockSize *""'"); 
  }
  arg1 = reinterpret_cast< BlockSize * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockSize_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_BlockSize, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BlockFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockFilter")) SWIG_fail;
  {
    try{
      result = (bgsched::BlockFilter *)new bgsched::BlockFilter();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__BlockFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setStatuses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  bgsched::BlockFilter::Statuses *arg2 = (bgsched::BlockFilter::Statuses *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setStatuses",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setStatuses" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockFilter_setStatuses" "', argument " "2"" of type '" "bgsched::BlockFilter::Statuses const *""'"); 
  }
  arg2 = reinterpret_cast< bgsched::BlockFilter::Statuses * >(argp2);
  {
    try{
      (arg1)->setStatuses((bgsched::BlockFilter::Statuses const *)arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setExtendedInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setExtendedInfo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setExtendedInfo" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockFilter_setExtendedInfo" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->setExtendedInfo(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setIncludeJobs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setIncludeJobs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setIncludeJobs" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockFilter_setIncludeJobs" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      (arg1)->setIncludeJobs(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setName" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockFilter_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockFilter_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setName((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setOwner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setOwner",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setOwner" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockFilter_setOwner" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockFilter_setOwner" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setOwner((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setUser",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setUser" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockFilter_setUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockFilter_setUser" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->setUser((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_setSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  bgsched::BlockFilter::BlockSize::Value arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockFilter_setSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_setSize" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__BlockFilter__BlockSize__Value,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockFilter_setSize" "', argument " "2"" of type '" "bgsched::BlockFilter::BlockSize::Value""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockFilter_setSize" "', argument " "2"" of type '" "bgsched::BlockFilter::BlockSize::Value""'");
    } else {
      bgsched::BlockFilter::BlockSize::Value * temp = reinterpret_cast< bgsched::BlockFilter::BlockSize::Value * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      (arg1)->setSize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getStatuses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::BlockFilter::Statuses result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getStatuses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getStatuses" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = ((bgsched::BlockFilter const *)arg1)->getStatuses();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::BlockFilter::Statuses(static_cast< const bgsched::BlockFilter::Statuses& >(result))), SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getName" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::BlockFilter const *)arg1)->getName();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getOwner(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getOwner",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getOwner" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::BlockFilter const *)arg1)->getOwner();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getUser(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getUser",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getUser" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = (std::string *) &((bgsched::BlockFilter const *)arg1)->getUser();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getExtendedInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getExtendedInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getExtendedInfo" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = (bool)((bgsched::BlockFilter const *)arg1)->getExtendedInfo();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getIncludeJobs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getIncludeJobs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getIncludeJobs" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = (bool)((bgsched::BlockFilter const *)arg1)->getIncludeJobs();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::BlockFilter::BlockSize::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getSize" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = ((bgsched::BlockFilter const *)arg1)->getSize();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::BlockFilter::BlockSize::Value(static_cast< const bgsched::BlockFilter::BlockSize::Value& >(result))), SWIGTYPE_p_bgsched__BlockFilter__BlockSize__Value, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockFilter_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::BlockFilter::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockFilter_getPimpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockFilter_getPimpl" "', argument " "1"" of type '" "bgsched::BlockFilter const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = ((bgsched::BlockFilter const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::BlockFilter::Pimpl(static_cast< const bgsched::BlockFilter::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = (bgsched::BlockFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__BlockFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockFilter" "', argument " "1"" of type '" "bgsched::BlockFilter *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__BlockFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SchedUtil_Errors_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SchedUtil_Errors::Value arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SchedUtil_Errors_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SchedUtil_Errors_toString" "', argument " "1"" of type '" "SchedUtil_Errors::Value""'");
  } 
  arg1 = static_cast< SchedUtil_Errors::Value >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchedUtil_Errors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_Errors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = SchedUtil_Errors::toString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SchedUtil_Errors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SchedUtil_Errors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SchedUtil_Errors")) SWIG_fail;
  {
    try{
      result = (SchedUtil_Errors *)new SchedUtil_Errors();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SchedUtil_Errors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SchedUtil_Errors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SchedUtil_Errors *arg1 = (SchedUtil_Errors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SchedUtil_Errors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SchedUtil_Errors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchedUtil_Errors" "', argument " "1"" of type '" "SchedUtil_Errors *""'"); 
  }
  arg1 = reinterpret_cast< SchedUtil_Errors * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SchedUtil_Errors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SchedUtil_Errors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SchedUtil_createBlockName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SchedUtil_createBlockName",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchedUtil_createBlockName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_createBlockName" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::SchedUtil::createBlockName((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchedUtil_iterateAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg1 = 0 ;
  std::vector< bool,std::allocator< bool > > *arg2 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  void (*arg5)(std::vector< uint32_t,std::allocator< uint32_t > >,void *) = (void (*)(std::vector< uint32_t,std::allocator< uint32_t > >,void *)) 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:SchedUtil_iterateAll",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchedUtil_iterateAll" "', argument " "1"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAll" "', argument " "1"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchedUtil_iterateAll" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAll" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bool,std::allocator< bool > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchedUtil_iterateAll" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAll" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SchedUtil_iterateAll" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAll" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "SchedUtil_iterateAll" "', argument " "5"" of type '" "void (*)(std::vector< uint32_t,std::allocator< uint32_t > >,void *)""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SchedUtil_iterateAll" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    try{
      bgsched::SchedUtil::iterateAll((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg1,(std::vector< bool,std::allocator< bool > > const &)*arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4,arg5,arg6);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchedUtil_iterateAllMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg1 = 0 ;
  std::vector< bool,std::allocator< bool > > *arg2 = 0 ;
  bgsched::Coordinates *arg3 = 0 ;
  bgsched::Coordinates *arg4 = 0 ;
  void (*arg5)(bgsched::Coordinates const &,void *) = (void (*)(bgsched::Coordinates const &,void *)) 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:SchedUtil_iterateAllMidplanes",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "1"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "1"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bool,std::allocator< bool > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "3"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "3"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg3 = reinterpret_cast< bgsched::Coordinates * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "4"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "4"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg4 = reinterpret_cast< bgsched::Coordinates * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_r_q_const__bgsched__Coordinates_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "5"" of type '" "void (*)(bgsched::Coordinates const &,void *)""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SchedUtil_iterateAllMidplanes" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    try{
      bgsched::SchedUtil::iterateAllMidplanes((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg1,(std::vector< bool,std::allocator< bool > > const &)*arg2,(bgsched::Coordinates const &)*arg3,(bgsched::Coordinates const &)*arg4,arg5,arg6);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchedUtil_iterateMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg1 = 0 ;
  std::vector< bool,std::allocator< bool > > *arg2 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg3 = 0 ;
  std::vector< uint32_t,std::allocator< uint32_t > > *arg4 = 0 ;
  void (*arg5)(bgsched::Coordinates const &,void *) = (void (*)(bgsched::Coordinates const &,void *)) 0 ;
  void *arg6 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  int res6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:SchedUtil_iterateMidplanes",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchedUtil_iterateMidplanes" "', argument " "1"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateMidplanes" "', argument " "1"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_bool_std__allocatorT_bool_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SchedUtil_iterateMidplanes" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateMidplanes" "', argument " "2"" of type '" "std::vector< bool,std::allocator< bool > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bool,std::allocator< bool > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchedUtil_iterateMidplanes" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateMidplanes" "', argument " "3"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SchedUtil_iterateMidplanes" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterateMidplanes" "', argument " "4"" of type '" "std::vector< uint32_t,std::allocator< uint32_t > > const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< uint32_t,std::allocator< uint32_t > > * >(argp4);
  {
    int res = SWIG_ConvertFunctionPtr(obj4, (void**)(&arg5), SWIGTYPE_p_f_r_q_const__bgsched__Coordinates_p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "SchedUtil_iterateMidplanes" "', argument " "5"" of type '" "void (*)(bgsched::Coordinates const &,void *)""'"); 
    }
  }
  res6 = SWIG_ConvertPtr(obj5,SWIG_as_voidptrptr(&arg6), 0, 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SchedUtil_iterateMidplanes" "', argument " "6"" of type '" "void *""'"); 
  }
  {
    try{
      bgsched::SchedUtil::iterateMidplanes((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg1,(std::vector< bool,std::allocator< bool > > const &)*arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4,arg5,arg6);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SchedUtil_iterate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< uint32_t,std::allocator< uint32_t > >,std::allocator< std::vector< uint32_t,std::allocator< uint32_t > > > > *arg1 = 0 ;
  void (*arg2)(std::vector< uint32_t,std::allocator< uint32_t > > const &,void *) = (void (*)(std::vector< uint32_t,std::allocator< uint32_t > > const &,void *)) 0 ;
  void *arg3 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SchedUtil_iterate",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SchedUtil_iterate" "', argument " "1"" of type '" "std::vector< std::vector< uint32_t,std::allocator< uint32_t > >,std::allocator< std::vector< uint32_t,std::allocator< uint32_t > > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SchedUtil_iterate" "', argument " "1"" of type '" "std::vector< std::vector< uint32_t,std::allocator< uint32_t > >,std::allocator< std::vector< uint32_t,std::allocator< uint32_t > > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< uint32_t,std::allocator< uint32_t > >,std::allocator< std::vector< uint32_t,std::allocator< uint32_t > > > > * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "SchedUtil_iterate" "', argument " "2"" of type '" "void (*)(std::vector< uint32_t,std::allocator< uint32_t > > const &,void *)""'"); 
    }
  }
  res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SchedUtil_iterate" "', argument " "3"" of type '" "void *""'"); 
  }
  {
    try{
      bgsched::SchedUtil::iterate((std::vector< std::vector< unsigned int,std::allocator< unsigned int > >,std::allocator< std::vector< unsigned int,std::allocator< unsigned int > > > > const &)*arg1,arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SchedUtil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SchedUtil *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SchedUtil")) SWIG_fail;
  {
    try{
      result = (bgsched::SchedUtil *)new bgsched::SchedUtil();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__SchedUtil, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SchedUtil(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::SchedUtil *arg1 = (bgsched::SchedUtil *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SchedUtil",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__SchedUtil, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SchedUtil" "', argument " "1"" of type '" "bgsched::SchedUtil *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::SchedUtil * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SchedUtil_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__SchedUtil, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InitializationErrors_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InitializationErrors::Value arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InitializationErrors_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "InitializationErrors_toString" "', argument " "1"" of type '" "bgsched::InitializationErrors::Value""'");
  } 
  arg1 = static_cast< bgsched::InitializationErrors::Value >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InitializationErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InitializationErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = bgsched::InitializationErrors::toString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InitializationErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InitializationErrors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InitializationErrors")) SWIG_fail;
  {
    try{
      result = (bgsched::InitializationErrors *)new bgsched::InitializationErrors();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__InitializationErrors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InitializationErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InitializationErrors *arg1 = (bgsched::InitializationErrors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InitializationErrors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__InitializationErrors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InitializationErrors" "', argument " "1"" of type '" "bgsched::InitializationErrors *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::InitializationErrors * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InitializationErrors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__InitializationErrors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InternalErrors_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InternalErrors::Value arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InternalErrors_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "InternalErrors_toString" "', argument " "1"" of type '" "bgsched::InternalErrors::Value""'");
  } 
  arg1 = static_cast< bgsched::InternalErrors::Value >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InternalErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InternalErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = bgsched::InternalErrors::toString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InternalErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InternalErrors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InternalErrors")) SWIG_fail;
  {
    try{
      result = (bgsched::InternalErrors *)new bgsched::InternalErrors();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__InternalErrors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InternalErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InternalErrors *arg1 = (bgsched::InternalErrors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InternalErrors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__InternalErrors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InternalErrors" "', argument " "1"" of type '" "bgsched::InternalErrors *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::InternalErrors * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InternalErrors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__InternalErrors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_InputErrors_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InputErrors::Value arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:InputErrors_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "InputErrors_toString" "', argument " "1"" of type '" "bgsched::InputErrors::Value""'");
  } 
  arg1 = static_cast< bgsched::InputErrors::Value >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "InputErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "InputErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = bgsched::InputErrors::toString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InputErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InputErrors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_InputErrors")) SWIG_fail;
  {
    try{
      result = (bgsched::InputErrors *)new bgsched::InputErrors();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__InputErrors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InputErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::InputErrors *arg1 = (bgsched::InputErrors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_InputErrors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__InputErrors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InputErrors" "', argument " "1"" of type '" "bgsched::InputErrors *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::InputErrors * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *InputErrors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__InputErrors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_TimeInterval_ALL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeInterval_ALL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TimeInterval_ALL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&bgsched::TimeInterval::ALL), SWIGTYPE_p_bgsched__TimeInterval,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_TimeInterval")) SWIG_fail;
  {
    try{
      result = (bgsched::TimeInterval *)new bgsched::TimeInterval();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  boost::posix_time::ptime arg1 ;
  boost::posix_time::ptime arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TimeInterval",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__posix_time__ptime,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeInterval" "', argument " "1"" of type '" "boost::posix_time::ptime const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeInterval" "', argument " "1"" of type '" "boost::posix_time::ptime const""'");
    } else {
      boost::posix_time::ptime * temp = reinterpret_cast< boost::posix_time::ptime * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_boost__posix_time__ptime,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TimeInterval" "', argument " "2"" of type '" "boost::posix_time::ptime const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeInterval" "', argument " "2"" of type '" "boost::posix_time::ptime const""'");
    } else {
      boost::posix_time::ptime * temp = reinterpret_cast< boost::posix_time::ptime * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::TimeInterval *)new bgsched::TimeInterval(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__TimeInterval, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::TimeInterval *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TimeInterval",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeInterval" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeInterval" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TimeInterval" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeInterval" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = (bgsched::TimeInterval *)new bgsched::TimeInterval((std::string const &)*arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__TimeInterval, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeInterval(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TimeInterval__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__posix_time__ptime, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__posix_time__ptime, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TimeInterval__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TimeInterval__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TimeInterval'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::TimeInterval::TimeInterval()\n"
    "    bgsched::TimeInterval::TimeInterval(boost::posix_time::ptime const,boost::posix_time::ptime const)\n"
    "    bgsched::TimeInterval::TimeInterval(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeInterval___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::TimeInterval *arg1 = (bgsched::TimeInterval *) 0 ;
  bgsched::TimeInterval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeInterval___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval___eq__" "', argument " "1"" of type '" "bgsched::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::TimeInterval * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__TimeInterval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeInterval___eq__" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeInterval___eq__" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::TimeInterval * >(argp2);
  {
    try{
      result = (bool)((bgsched::TimeInterval const *)arg1)->operator ==((bgsched::TimeInterval const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::TimeInterval *arg1 = (bgsched::TimeInterval *) 0 ;
  bgsched::TimeInterval *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:TimeInterval___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval___ne__" "', argument " "1"" of type '" "bgsched::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::TimeInterval * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__TimeInterval,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeInterval___ne__" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TimeInterval___ne__" "', argument " "2"" of type '" "bgsched::TimeInterval const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::TimeInterval * >(argp2);
  {
    try{
      result = (bool)((bgsched::TimeInterval const *)arg1)->operator !=((bgsched::TimeInterval const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_getStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::TimeInterval *arg1 = (bgsched::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::posix_time::ptime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeInterval_getStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_getStart" "', argument " "1"" of type '" "bgsched::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::TimeInterval * >(argp1);
  {
    try{
      result = (boost::posix_time::ptime *) &((bgsched::TimeInterval const *)arg1)->getStart();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__posix_time__ptime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeInterval_getEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::TimeInterval *arg1 = (bgsched::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  boost::posix_time::ptime *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeInterval_getEnd",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__TimeInterval, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeInterval_getEnd" "', argument " "1"" of type '" "bgsched::TimeInterval const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::TimeInterval * >(argp1);
  {
    try{
      result = (boost::posix_time::ptime *) &((bgsched::TimeInterval const *)arg1)->getEnd();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_boost__posix_time__ptime, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimeInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::TimeInterval *arg1 = (bgsched::TimeInterval *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TimeInterval",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__TimeInterval, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeInterval" "', argument " "1"" of type '" "bgsched::TimeInterval *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::TimeInterval * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TimeInterval_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__TimeInterval, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_RuntimeErrors_toString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::RuntimeErrors::Value arg1 ;
  std::string *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RuntimeErrors_toString",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RuntimeErrors_toString" "', argument " "1"" of type '" "bgsched::RuntimeErrors::Value""'");
  } 
  arg1 = static_cast< bgsched::RuntimeErrors::Value >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RuntimeErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RuntimeErrors_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = bgsched::RuntimeErrors::toString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RuntimeErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::RuntimeErrors *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RuntimeErrors")) SWIG_fail;
  {
    try{
      result = (bgsched::RuntimeErrors *)new bgsched::RuntimeErrors();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__RuntimeErrors, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RuntimeErrors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::RuntimeErrors *arg1 = (bgsched::RuntimeErrors *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RuntimeErrors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__RuntimeErrors, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RuntimeErrors" "', argument " "1"" of type '" "bgsched::RuntimeErrors *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::RuntimeErrors * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RuntimeErrors_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__RuntimeErrors, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AllocatorEventListener_handleAllocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::AllocatorEventListener *arg1 = (bgsched::allocator::AllocatorEventListener *) 0 ;
  bgsched::allocator::AllocatorEventListener::AllocateCompleted *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AllocatorEventListener_handleAllocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__AllocatorEventListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllocatorEventListener_handleAllocate" "', argument " "1"" of type '" "bgsched::allocator::AllocatorEventListener *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::AllocatorEventListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__allocator__AllocatorEventListener__AllocateCompleted,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllocatorEventListener_handleAllocate" "', argument " "2"" of type '" "bgsched::allocator::AllocatorEventListener::AllocateCompleted const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AllocatorEventListener_handleAllocate" "', argument " "2"" of type '" "bgsched::allocator::AllocatorEventListener::AllocateCompleted const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::allocator::AllocatorEventListener::AllocateCompleted * >(argp2);
  {
    try{
      (arg1)->handleAllocate((bgsched::allocator::AllocatorEventListener::AllocateCompleted const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AllocatorEventListener_handleDeallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::AllocatorEventListener *arg1 = (bgsched::allocator::AllocatorEventListener *) 0 ;
  bgsched::allocator::AllocatorEventListener::DeallocateCompleted *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:AllocatorEventListener_handleDeallocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__AllocatorEventListener, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AllocatorEventListener_handleDeallocate" "', argument " "1"" of type '" "bgsched::allocator::AllocatorEventListener *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::AllocatorEventListener * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AllocatorEventListener_handleDeallocate" "', argument " "2"" of type '" "bgsched::allocator::AllocatorEventListener::DeallocateCompleted const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AllocatorEventListener_handleDeallocate" "', argument " "2"" of type '" "bgsched::allocator::AllocatorEventListener::DeallocateCompleted const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::allocator::AllocatorEventListener::DeallocateCompleted * >(argp2);
  {
    try{
      (arg1)->handleDeallocate((bgsched::allocator::AllocatorEventListener::DeallocateCompleted const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AllocatorEventListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::AllocatorEventListener *arg1 = (bgsched::allocator::AllocatorEventListener *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AllocatorEventListener",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__AllocatorEventListener, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AllocatorEventListener" "', argument " "1"" of type '" "bgsched::allocator::AllocatorEventListener *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::AllocatorEventListener * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AllocatorEventListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::AllocatorEventListener *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_AllocatorEventListener")) SWIG_fail;
  {
    try{
      result = (bgsched::allocator::AllocatorEventListener *)new bgsched::allocator::AllocatorEventListener();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__AllocatorEventListener, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AllocatorEventListener_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__allocator__AllocatorEventListener, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ResourceSpec_getShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Shape::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResourceSpec_getShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_getShape" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = ((bgsched::allocator::ResourceSpec const *)arg1)->getShape();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = result ? new boost::shared_ptr< const bgsched::Shape >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_canRotateShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResourceSpec_canRotateShape",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_canRotateShape" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = (bool)((bgsched::allocator::ResourceSpec const *)arg1)->canRotateShape();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_canUsePassthrough(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResourceSpec_canUsePassthrough",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_canUsePassthrough" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = (bool)((bgsched::allocator::ResourceSpec const *)arg1)->canUsePassthrough();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_getNodeCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResourceSpec_getNodeCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_getNodeCount" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = (uint32_t)((bgsched::allocator::ResourceSpec const *)arg1)->getNodeCount();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_getConnectivitySpec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  bgsched::Dimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::allocator::ResourceSpec::ConnectivitySpec::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ResourceSpec_getConnectivitySpec",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_getConnectivitySpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResourceSpec_getConnectivitySpec" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_getConnectivitySpec" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Dimension * >(argp2);
  {
    try{
      result = ((bgsched::allocator::ResourceSpec const *)arg1)->getConnectivitySpec((bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::ResourceSpec::ConnectivitySpec::Value(static_cast< const bgsched::allocator::ResourceSpec::ConnectivitySpec::Value& >(result))), SWIGTYPE_p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_setConnectivitySpec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  bgsched::Dimension *arg2 = 0 ;
  bgsched::allocator::ResourceSpec::ConnectivitySpec::Value arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ResourceSpec_setConnectivitySpec",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_setConnectivitySpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResourceSpec_setConnectivitySpec" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_setConnectivitySpec" "', argument " "2"" of type '" "bgsched::Dimension const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Dimension * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ResourceSpec_setConnectivitySpec" "', argument " "3"" of type '" "bgsched::allocator::ResourceSpec::ConnectivitySpec::Value""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_setConnectivitySpec" "', argument " "3"" of type '" "bgsched::allocator::ResourceSpec::ConnectivitySpec::Value""'");
    } else {
      bgsched::allocator::ResourceSpec::ConnectivitySpec::Value * temp = reinterpret_cast< bgsched::allocator::ResourceSpec::ConnectivitySpec::Value * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try{
      (arg1)->setConnectivitySpec((bgsched::Dimension const &)*arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_getDrainedMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResourceSpec_getDrainedMidplanes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_getDrainedMidplanes" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = ((bgsched::allocator::ResourceSpec const *)arg1)->getDrainedMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::ResourceSpec::DrainedMidplanes(static_cast< const bgsched::allocator::ResourceSpec::DrainedMidplanes& >(result))), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_addDrainedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ResourceSpec_addDrainedMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_addDrainedMidplane" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResourceSpec_addDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_addDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->addDrainedMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_removeDrainedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ResourceSpec_removeDrainedMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_removeDrainedMidplane" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResourceSpec_removeDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_removeDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->removeDrainedMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_getExtendedOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ResourceSpec_getExtendedOptions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_getExtendedOptions" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = ((bgsched::allocator::ResourceSpec const *)arg1)->getExtendedOptions();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::ResourceSpec::ExtendedOptions(static_cast< const bgsched::allocator::ResourceSpec::ExtendedOptions& >(result))), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_addExtendedOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ResourceSpec_addExtendedOption",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_addExtendedOption" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResourceSpec_addExtendedOption" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_addExtendedOption" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ResourceSpec_addExtendedOption" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_addExtendedOption" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      (arg1)->addExtendedOption((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResourceSpec_removeExtendedOption(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ResourceSpec_removeExtendedOption",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ResourceSpec_removeExtendedOption" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ResourceSpec_removeExtendedOption" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ResourceSpec_removeExtendedOption" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->removeExtendedOption((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ResourceSpec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bgsched::allocator::ResourceSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_ResourceSpec",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      arg1 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1)->get());
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ResourceSpec" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ResourceSpec" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try{
      result = (bgsched::allocator::ResourceSpec *)new bgsched::allocator::ResourceSpec((bgsched::Shape const &)*arg1,arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ResourceSpec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::allocator::ResourceSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ResourceSpec",&obj0,&obj1)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      arg1 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1)->get());
    }
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ResourceSpec" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try{
      result = (bgsched::allocator::ResourceSpec *)new bgsched::allocator::ResourceSpec((bgsched::Shape const &)*arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ResourceSpec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::Shape *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared1 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::ResourceSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ResourceSpec",&obj0)) SWIG_fail;
  {
    int newmem = 0;
    res1 = SWIG_ConvertPtrAndOwn(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared1 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1);
      arg1 = const_cast< bgsched::Shape * >(tempshared1.get());
    } else {
      arg1 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp1)->get());
    }
  }
  {
    try{
      result = (bgsched::allocator::ResourceSpec *)new bgsched::allocator::ResourceSpec((bgsched::Shape const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ResourceSpec__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::ResourceSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ResourceSpec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__allocator__ResourceSpec,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      result = (bgsched::allocator::ResourceSpec *)new bgsched::allocator::ResourceSpec((bgsched::allocator::ResourceSpec const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ResourceSpec__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::allocator::ResourceSpec::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::ResourceSpec *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ResourceSpec",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ResourceSpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec::Pimpl""'");
    } else {
      bgsched::allocator::ResourceSpec::Pimpl * temp = reinterpret_cast< bgsched::allocator::ResourceSpec::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::allocator::ResourceSpec *)new bgsched::allocator::ResourceSpec(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ResourceSpec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ResourceSpec__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__allocator__ResourceSpec, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ResourceSpec__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Impl_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ResourceSpec__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ResourceSpec__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_ResourceSpec__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ResourceSpec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::allocator::ResourceSpec::ResourceSpec(bgsched::Shape const &,bool,bool)\n"
    "    bgsched::allocator::ResourceSpec::ResourceSpec(bgsched::Shape const &,bool)\n"
    "    bgsched::allocator::ResourceSpec::ResourceSpec(bgsched::Shape const &)\n"
    "    bgsched::allocator::ResourceSpec::ResourceSpec(bgsched::allocator::ResourceSpec const &)\n"
    "    bgsched::allocator::ResourceSpec::ResourceSpec(bgsched::allocator::ResourceSpec::Pimpl)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ResourceSpec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::ResourceSpec *arg1 = (bgsched::allocator::ResourceSpec *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ResourceSpec",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ResourceSpec" "', argument " "1"" of type '" "bgsched::allocator::ResourceSpec *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ResourceSpec_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__allocator__ResourceSpec, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Midplanes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Midplanes *arg1 = (bgsched::allocator::Midplanes *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Midplanes_get",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Midplanes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplanes_get" "', argument " "1"" of type '" "bgsched::allocator::Midplanes const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Midplanes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Midplanes_get" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Midplanes_get" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = ((bgsched::allocator::Midplanes const *)arg1)->get((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = result ? new boost::shared_ptr< const bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Midplanes_getMachineSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Midplanes *arg1 = (bgsched::allocator::Midplanes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::Coordinates > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Midplanes_getMachineSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Midplanes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Midplanes_getMachineSize" "', argument " "1"" of type '" "bgsched::allocator::Midplanes const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Midplanes * >(argp1);
  {
    try{
      result = ((bgsched::allocator::Midplanes const *)arg1)->getMachineSize();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Coordinates(static_cast< const bgsched::Coordinates& >(result))), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Midplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::allocator::Midplanes::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::Midplanes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Midplanes",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Midplanes" "', argument " "1"" of type '" "bgsched::allocator::Midplanes::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Midplanes" "', argument " "1"" of type '" "bgsched::allocator::Midplanes::Pimpl""'");
    } else {
      bgsched::allocator::Midplanes::Pimpl * temp = reinterpret_cast< bgsched::allocator::Midplanes::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::allocator::Midplanes *)new bgsched::allocator::Midplanes(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__Midplanes, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Midplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Midplanes *arg1 = (bgsched::allocator::Midplanes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Midplanes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Midplanes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Midplanes" "', argument " "1"" of type '" "bgsched::allocator::Midplanes *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Midplanes * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Midplanes_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__allocator__Midplanes, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Model_allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_allocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_allocate" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_allocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_allocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->allocate((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_deallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_deallocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_deallocate" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_deallocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_deallocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->deallocate((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_addBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  bgsched::Block::Ptr arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Model_addBlock",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addBlock" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addBlock" "', argument " "2"" of type '" "bgsched::Block::Ptr const""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< bgsched::Block::Ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< bgsched::Block::Ptr * >(argp2);
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_addBlock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addBlock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      (arg1)->addBlock(arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_removeBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_removeBlock",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_removeBlock" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_removeBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_removeBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->removeBlock((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Block::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_getBlock",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getBlock" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getBlock((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getBlockStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Block::Status > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_getBlockStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getBlockStatus" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getBlockStatus" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getBlockStatus" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getBlockStatus((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Block::Status >(static_cast< const bgsched::EnumWrapper< bgsched::Block::Status >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Block__Status_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::allocator::Midplanes const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getMidplanes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getMidplanes" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Midplanes::ConstPtr(static_cast< const bgsched::allocator::Midplanes::ConstPtr& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getMidplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_getMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getMidplane" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getMidplane" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getMidplane" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getMidplane((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = result ? new boost::shared_ptr<  bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getMidplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_getMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getMidplane" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_getMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_getMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = result ? new boost::shared_ptr<  bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getMidplane(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bgsched__allocator__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__Coordinates, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_getMidplane__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bgsched__allocator__Model, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Model_getMidplane__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Model_getMidplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::allocator::Model::getMidplane(bgsched::Coordinates const &) const\n"
    "    bgsched::allocator::Model::getMidplane(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Model_getDrainedMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getDrainedMidplanes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getDrainedMidplanes" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getDrainedMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Model::DrainedMidplanes(static_cast< const bgsched::allocator::Model::DrainedMidplanes& >(result))), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_addDrainedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_addDrainedMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_addDrainedMidplane" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_addDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_addDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->addDrainedMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_removeDrainedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Model_removeDrainedMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_removeDrainedMidplane" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_removeDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_removeDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->removeDrainedMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_syncState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_syncState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_syncState" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    try{
      (arg1)->syncState();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  std::ostream *arg2 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Model_dump",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_dump" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Model_dump" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_dump" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Model_dump" "', argument " "3"" of type '" "bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Model_dump" "', argument " "3"" of type '" "bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value >""'");
    } else {
      bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > * temp = reinterpret_cast< bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try{
      ((bgsched::allocator::Model const *)arg1)->dump(*arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Model(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Model",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Model" "', argument " "1"" of type '" "bgsched::allocator::Model *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Model_getPimpl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Model *arg1 = (bgsched::allocator::Model *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::allocator::Model::Impl > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Model_getPimpl",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Model, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Model_getPimpl" "', argument " "1"" of type '" "bgsched::allocator::Model const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Model * >(argp1);
  {
    try{
      result = ((bgsched::allocator::Model const *)arg1)->getPimpl();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Model::Pimpl(static_cast< const bgsched::allocator::Model::Pimpl& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Impl_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Model_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__allocator__Model, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LiveModel_allocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_allocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_allocate" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_allocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_allocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->allocate((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_deallocate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_deallocate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_deallocate" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_deallocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_deallocate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->deallocate((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_addBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  bgsched::Block::Ptr arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LiveModel_addBlock",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_addBlock" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_addBlock" "', argument " "2"" of type '" "bgsched::Block::Ptr const""'"); 
    }
    if (argp2) arg2 = *(reinterpret_cast< bgsched::Block::Ptr * >(argp2));
    if (newmem & SWIG_CAST_NEW_MEMORY) delete reinterpret_cast< bgsched::Block::Ptr * >(argp2);
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LiveModel_addBlock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_addBlock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      (arg1)->addBlock(arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_removeBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_removeBlock",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_removeBlock" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_removeBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_removeBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->removeBlock((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Block::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getBlock",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getBlock" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getBlock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getBlock((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getBlockStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< enum bgsched::Block::Status > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getBlockStatus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getBlockStatus" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getBlockStatus" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getBlockStatus" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getBlockStatus((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::EnumWrapper< bgsched::Block::Status >(static_cast< const bgsched::EnumWrapper< bgsched::Block::Status >& >(result))), SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__Block__Status_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getFilteredBlocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  bgsched::BlockFilter *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Block::Ptrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getFilteredBlocks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getFilteredBlocks" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__BlockFilter,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getFilteredBlocks" "', argument " "2"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getFilteredBlocks" "', argument " "2"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::BlockFilter * >(argp2);
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getFilteredBlocks((bgsched::BlockFilter const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::Ptrs(static_cast< const bgsched::Block::Ptrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< boost::shared_ptr< bgsched::allocator::Midplanes const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LiveModel_getMidplanes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getMidplanes" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Midplanes::ConstPtr(static_cast< const bgsched::allocator::Midplanes::ConstPtr& >(result))), SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getMidplane__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  bgsched::Coordinates *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getMidplane" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Coordinates,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getMidplane" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getMidplane" "', argument " "2"" of type '" "bgsched::Coordinates const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::Coordinates * >(argp2);
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getMidplane((bgsched::Coordinates const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = result ? new boost::shared_ptr<  bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getMidplane__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Midplane::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getMidplane" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = result ? new boost::shared_ptr<  bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getMidplane(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bgsched__allocator__LiveModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__Coordinates, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LiveModel_getMidplane__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_bgsched__allocator__LiveModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_LiveModel_getMidplane__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'LiveModel_getMidplane'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::allocator::LiveModel::getMidplane(bgsched::Coordinates const &) const\n"
    "    bgsched::allocator::LiveModel::getMidplane(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LiveModel_getDrainedMidplanes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< std::string,std::less< std::string >,std::allocator< std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LiveModel_getDrainedMidplanes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getDrainedMidplanes" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    try{
      result = ((bgsched::allocator::LiveModel const *)arg1)->getDrainedMidplanes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Model::DrainedMidplanes(static_cast< const bgsched::allocator::Model::DrainedMidplanes& >(result))), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_addDrainedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_addDrainedMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_addDrainedMidplane" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_addDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_addDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->addDrainedMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_removeDrainedMidplane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_removeDrainedMidplane",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_removeDrainedMidplane" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_removeDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_removeDrainedMidplane" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->removeDrainedMidplane((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_syncState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LiveModel_syncState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_syncState" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    try{
      (arg1)->syncState();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::ostream *arg2 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LiveModel_dump",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_dump" "', argument " "1"" of type '" "bgsched::allocator::LiveModel const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_dump" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_dump" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LiveModel_dump" "', argument " "3"" of type '" "bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_dump" "', argument " "3"" of type '" "bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value >""'");
    } else {
      bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > * temp = reinterpret_cast< bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try{
      ((bgsched::allocator::LiveModel const *)arg1)->dump(*arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_registerListener(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  bgsched::allocator::AllocatorEventListener *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_registerListener",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_registerListener" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__allocator__AllocatorEventListener,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_registerListener" "', argument " "2"" of type '" "bgsched::allocator::AllocatorEventListener &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_registerListener" "', argument " "2"" of type '" "bgsched::allocator::AllocatorEventListener &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::allocator::AllocatorEventListener * >(argp2);
  {
    try{
      (arg1)->registerListener(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_notifyAllocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_notifyAllocated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_notifyAllocated" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_notifyAllocated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_notifyAllocated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->notifyAllocated((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_notifyDeallocated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_notifyDeallocated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_notifyDeallocated" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_notifyDeallocated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_notifyDeallocated" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->notifyDeallocated((std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LiveModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< boost::shared_ptr< bgsched::allocator::LiveModel::Impl > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::LiveModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LiveModel",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_boost__shared_ptrT_bgsched__allocator__Impl_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LiveModel" "', argument " "1"" of type '" "bgsched::allocator::LiveModel::Pimpl""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LiveModel" "', argument " "1"" of type '" "bgsched::allocator::LiveModel::Pimpl""'");
    } else {
      bgsched::allocator::LiveModel::Pimpl * temp = reinterpret_cast< bgsched::allocator::LiveModel::Pimpl * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try{
      result = (bgsched::allocator::LiveModel *)new bgsched::allocator::LiveModel(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__LiveModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getBlockStatusValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getBlockStatusValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getBlockStatusValue" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getBlockStatusValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getBlockStatusValue" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = (int)bgsched_allocator_LiveModel_getBlockStatusValue(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LiveModel_getBlockStatusString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LiveModel_getBlockStatusString",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LiveModel_getBlockStatusString" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LiveModel_getBlockStatusString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LiveModel_getBlockStatusString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = bgsched_allocator_LiveModel_getBlockStatusString(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LiveModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::LiveModel *arg1 = (bgsched::allocator::LiveModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LiveModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__LiveModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LiveModel" "', argument " "1"" of type '" "bgsched::allocator::LiveModel *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::LiveModel * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LiveModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__allocator__LiveModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Allocator")) SWIG_fail;
  {
    try{
      result = (bgsched::allocator::Allocator *)new bgsched::allocator::Allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__Allocator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Allocator" "', argument " "1"" of type '" "bgsched::allocator::Allocator *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_getLiveModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::LiveModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Allocator_getLiveModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_getLiveModel" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  {
    try{
      result = (bgsched::allocator::LiveModel *) &((bgsched::allocator::Allocator const *)arg1)->getLiveModel();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__allocator__LiveModel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_getPluginList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Allocator_getPluginList",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_getPluginList" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->getPluginList();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string,std::allocator< std::string > >(static_cast< const std::vector< std::string,std::allocator< std::string > >& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_getShapesForSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::allocator::Allocator::Shapes result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Allocator_getShapesForSize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_getShapesForSize" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Allocator_getShapesForSize" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->getShapesForSize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Allocator::Shapes(static_cast< const bgsched::allocator::Allocator::Shapes& >(result))), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_getShapes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::allocator::Allocator::Shapes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Allocator_getShapes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_getShapes" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->getShapes();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Allocator::Shapes(static_cast< const bgsched::allocator::Allocator::Shapes& >(result))), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_getRotations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  bgsched::Shape *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::allocator::Allocator::Shapes result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Allocator_getRotations",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_getRotations" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Allocator_getRotations" "', argument " "2"" of type '" "bgsched::Shape const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_getRotations" "', argument " "2"" of type '" "bgsched::Shape const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      arg2 = const_cast< bgsched::Shape * >(tempshared2.get());
    } else {
      arg2 = const_cast< bgsched::Shape * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2)->get());
    }
  }
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->getRotations((bgsched::Shape const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::allocator::Allocator::Shapes(static_cast< const bgsched::allocator::Allocator::Shapes& >(result))), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_createMidplaneShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  SwigValueWrapper< bgsched::Shape > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Allocator_createMidplaneShape",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_createMidplaneShape" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Allocator_createMidplaneShape" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Allocator_createMidplaneShape" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Allocator_createMidplaneShape" "', argument " "4"" of type '" "uint32_t""'");
  } 
  arg4 = static_cast< uint32_t >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Allocator_createMidplaneShape" "', argument " "5"" of type '" "uint32_t""'");
  } 
  arg5 = static_cast< uint32_t >(val5);
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->createMidplaneShape(arg2,arg3,arg4,arg5);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = new boost::shared_ptr<  bgsched::Shape >(new bgsched::Shape((bgsched::Shape &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_createSmallShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< bgsched::Shape > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Allocator_createSmallShape",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_createSmallShape" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Allocator_createSmallShape" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->createSmallShape(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = new boost::shared_ptr<  bgsched::Shape >(new bgsched::Shape((bgsched::Shape &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_findBlockResources(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  bgsched::allocator::Model *arg2 = 0 ;
  bgsched::allocator::ResourceSpec *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bgsched::Block::Ptr result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Allocator_findBlockResources",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_findBlockResources" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__allocator__Model,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Allocator_findBlockResources" "', argument " "2"" of type '" "bgsched::allocator::Model const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_findBlockResources" "', argument " "2"" of type '" "bgsched::allocator::Model const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::allocator::Model * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__allocator__ResourceSpec,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Allocator_findBlockResources" "', argument " "3"" of type '" "bgsched::allocator::ResourceSpec const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_findBlockResources" "', argument " "3"" of type '" "bgsched::allocator::ResourceSpec const &""'"); 
  }
  arg3 = reinterpret_cast< bgsched::allocator::ResourceSpec * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Allocator_findBlockResources" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_findBlockResources" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      result = ((bgsched::allocator::Allocator const *)arg1)->findBlockResources((bgsched::allocator::Model const &)*arg2,(bgsched::allocator::ResourceSpec const &)*arg3,(std::string const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_prepare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  bgsched::allocator::Model *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Allocator_prepare",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_prepare" "', argument " "1"" of type '" "bgsched::allocator::Allocator *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__allocator__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Allocator_prepare" "', argument " "2"" of type '" "bgsched::allocator::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_prepare" "', argument " "2"" of type '" "bgsched::allocator::Model &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::allocator::Model * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Allocator_prepare" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_prepare" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Allocator_prepare" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_prepare" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      (arg1)->prepare(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_release(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  bgsched::allocator::Model *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Allocator_release",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_release" "', argument " "1"" of type '" "bgsched::allocator::Allocator *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__allocator__Model,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Allocator_release" "', argument " "2"" of type '" "bgsched::allocator::Model &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_release" "', argument " "2"" of type '" "bgsched::allocator::Model &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::allocator::Model * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Allocator_release" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_release" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Allocator_release" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_release" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      (arg1)->release(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Allocator_dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::allocator::Allocator *arg1 = (bgsched::allocator::Allocator *) 0 ;
  std::ostream *arg2 = 0 ;
  SwigValueWrapper< bgsched::EnumWrapper< bgsched::allocator::Allocator::DumpVerbosity::Value > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Allocator_dump",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_bgsched__allocator__Allocator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Allocator_dump" "', argument " "1"" of type '" "bgsched::allocator::Allocator const *""'"); 
  }
  arg1 = reinterpret_cast< bgsched::allocator::Allocator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Allocator_dump" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_dump" "', argument " "2"" of type '" "std::ostream &""'"); 
  }
  arg2 = reinterpret_cast< std::ostream * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Allocator_dump" "', argument " "3"" of type '" "bgsched::EnumWrapper< bgsched::allocator::Allocator::DumpVerbosity::Value >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Allocator_dump" "', argument " "3"" of type '" "bgsched::EnumWrapper< bgsched::allocator::Allocator::DumpVerbosity::Value >""'");
    } else {
      bgsched::EnumWrapper< bgsched::allocator::Allocator::DumpVerbosity::Value > * temp = reinterpret_cast< bgsched::EnumWrapper< bgsched::allocator::Allocator::DumpVerbosity::Value > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try{
      ((bgsched::allocator::Allocator const *)arg1)->dump(*arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Allocator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_bgsched__allocator__Allocator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:init",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "init" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "init" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      bgsched::init((std::string const &)*arg1);
    } catch(bgsched::InitializationException &e) {
      PyErr_SetString(PyExc_IOError, const_cast<char *>(e.what()));
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_refreshConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":refreshConfiguration")) SWIG_fail;
  {
    try{
      result = (bool)bgsched::refreshConfiguration();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getIOUsageLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)":getIOUsageLimit")) SWIG_fail;
  {
    try{
      result = (unsigned int)bgsched::getIOUsageLimit();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_major_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable major is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_major_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::version::major));
  return pyobj;
}


SWIGINTERN int Swig_var_minor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable minor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_minor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::version::minor));
  return pyobj;
}


SWIGINTERN int Swig_var_mod_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable mod is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_mod_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::version::mod));
  return pyobj;
}


SWIGINTERN int Swig_var_driver_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable driver is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_driver_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(bgsched::version::driver);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_getComputeHardware(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::ComputeHardware::ConstPtr result;
  
  if (!PyArg_ParseTuple(args,(char *)":getComputeHardware")) SWIG_fail;
  {
    try{
      result = bgsched::core::getComputeHardware();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::ComputeHardware > *smartresult = result ? new boost::shared_ptr< const bgsched::ComputeHardware >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__ComputeHardware_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMachineSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< bgsched::Coordinates > result;
  
  if (!PyArg_ParseTuple(args,(char *)":getMachineSize")) SWIG_fail;
  {
    try{
      result = bgsched::core::getMachineSize();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Coordinates(static_cast< const bgsched::Coordinates& >(result))), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMidplaneCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::Coordinates > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getMidplaneCoordinates",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMidplaneCoordinates" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMidplaneCoordinates" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::core::getMidplaneCoordinates((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Coordinates(static_cast< const bgsched::Coordinates& >(result))), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNodeMidplaneCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::Coordinates > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getNodeMidplaneCoordinates",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeMidplaneCoordinates" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNodeMidplaneCoordinates" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::core::getNodeMidplaneCoordinates((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Coordinates(static_cast< const bgsched::Coordinates& >(result))), SWIGTYPE_p_bgsched__Coordinates, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNodeBoards(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bgsched::NodeBoard::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getNodeBoards",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodeBoards" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNodeBoards" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::core::getNodeBoards((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::NodeBoard::ConstPtrs(static_cast< const bgsched::NodeBoard::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bgsched::Node::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getNodes",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getNodes" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getNodes" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::core::getNodes((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Node::ConstPtrs(static_cast< const bgsched::Node::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getMidplaneNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bgsched::Node::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getMidplaneNodes",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getMidplaneNodes" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getMidplaneNodes" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::core::getMidplaneNodes((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Node::ConstPtrs(static_cast< const bgsched::Node::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getIOLinks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  bgsched::IOLink::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getIOLinks",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getIOLinks" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getIOLinks" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = bgsched::core::getIOLinks((std::string const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::IOLink::ConstPtrs(static_cast< const bgsched::IOLink::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getBlocks__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = 0 ;
  bgsched::core::BlockSort *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bgsched::Block::Ptrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getBlocks",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__BlockFilter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBlocks" "', argument " "1"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getBlocks" "', argument " "1"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__core__BlockSort,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getBlocks" "', argument " "2"" of type '" "bgsched::core::BlockSort const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getBlocks" "', argument " "2"" of type '" "bgsched::core::BlockSort const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::core::BlockSort * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getBlocks" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getBlocks" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      result = bgsched::core::getBlocks((bgsched::BlockFilter const &)*arg1,(bgsched::core::BlockSort const &)*arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::Ptrs(static_cast< const bgsched::Block::Ptrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getBlocks__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = 0 ;
  bgsched::core::BlockSort *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Block::Ptrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getBlocks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__BlockFilter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBlocks" "', argument " "1"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getBlocks" "', argument " "1"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__core__BlockSort,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getBlocks" "', argument " "2"" of type '" "bgsched::core::BlockSort const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getBlocks" "', argument " "2"" of type '" "bgsched::core::BlockSort const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::core::BlockSort * >(argp2);
  {
    try{
      result = bgsched::core::getBlocks((bgsched::BlockFilter const &)*arg1,(bgsched::core::BlockSort const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::Ptrs(static_cast< const bgsched::Block::Ptrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getBlocks__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::BlockFilter *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Block::Ptrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getBlocks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__BlockFilter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBlocks" "', argument " "1"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getBlocks" "', argument " "1"" of type '" "bgsched::BlockFilter const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::BlockFilter * >(argp1);
  {
    try{
      result = bgsched::core::getBlocks((bgsched::BlockFilter const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Block::Ptrs(static_cast< const bgsched::Block::Ptrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getBlocks(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__BlockFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getBlocks__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__BlockFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__core__BlockSort, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getBlocks__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__BlockFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__core__BlockSort, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_getBlocks__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getBlocks'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::core::getBlocks(bgsched::BlockFilter const &,bgsched::core::BlockSort const &,std::string const &)\n"
    "    bgsched::core::getBlocks(bgsched::BlockFilter const &,bgsched::core::BlockSort const &)\n"
    "    bgsched::core::getBlocks(bgsched::BlockFilter const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_getJobs__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = 0 ;
  bgsched::core::JobSort *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bgsched::Job::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:getJobs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__JobFilter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getJobs" "', argument " "1"" of type '" "bgsched::JobFilter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJobs" "', argument " "1"" of type '" "bgsched::JobFilter const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__core__JobSort,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getJobs" "', argument " "2"" of type '" "bgsched::core::JobSort const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJobs" "', argument " "2"" of type '" "bgsched::core::JobSort const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::core::JobSort * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "getJobs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJobs" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      result = bgsched::core::getJobs((bgsched::JobFilter const &)*arg1,(bgsched::core::JobSort const &)*arg2,(std::string const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Job::ConstPtrs(static_cast< const bgsched::Job::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getJobs__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = 0 ;
  bgsched::core::JobSort *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bgsched::Job::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:getJobs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__JobFilter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getJobs" "', argument " "1"" of type '" "bgsched::JobFilter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJobs" "', argument " "1"" of type '" "bgsched::JobFilter const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__core__JobSort,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getJobs" "', argument " "2"" of type '" "bgsched::core::JobSort const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJobs" "', argument " "2"" of type '" "bgsched::core::JobSort const &""'"); 
  }
  arg2 = reinterpret_cast< bgsched::core::JobSort * >(argp2);
  {
    try{
      result = bgsched::core::getJobs((bgsched::JobFilter const &)*arg1,(bgsched::core::JobSort const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Job::ConstPtrs(static_cast< const bgsched::Job::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getJobs__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bgsched::JobFilter *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bgsched::Job::ConstPtrs result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:getJobs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_bgsched__JobFilter,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getJobs" "', argument " "1"" of type '" "bgsched::JobFilter const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getJobs" "', argument " "1"" of type '" "bgsched::JobFilter const &""'"); 
  }
  arg1 = reinterpret_cast< bgsched::JobFilter * >(argp1);
  {
    try{
      result = bgsched::core::getJobs((bgsched::JobFilter const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new bgsched::Job::ConstPtrs(static_cast< const bgsched::Job::ConstPtrs& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_getJobs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__JobFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_getJobs__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__JobFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__core__JobSort, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_getJobs__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_bgsched__JobFilter, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__core__JobSort, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_getJobs__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'getJobs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    bgsched::core::getJobs(bgsched::JobFilter const &,bgsched::core::JobSort const &,std::string const &)\n"
    "    bgsched::core::getJobs(bgsched::JobFilter const &,bgsched::core::JobSort const &)\n"
    "    bgsched::core::getJobs(bgsched::JobFilter const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_NodeBoard_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::NodeBoard > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::NodeBoard > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::NodeBoard > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_NodeBoard_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::NodeBoard > *smartresult = result ? new boost::shared_ptr<  bgsched::NodeBoard >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *)std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeBoardPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *ptr = (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBoardPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NodeBoardPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeBoardPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *)std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *ptr = (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBoardPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeBoardPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeBoardPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *) &std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::NodeBoard > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::NodeBoard > *smartresult = *result ? new boost::shared_ptr<  bgsched::NodeBoard >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeBoardPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeBoardPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::NodeBoard > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeBoardPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > const &)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBoardPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_NodeBoard_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::NodeBoard > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NodeBoardPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::NodeBoard::Ptr > *)new std::vector< bgsched::NodeBoard::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::NodeBoard::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeBoardPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *ptr = (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBoardPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBoardPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::NodeBoard::Ptr > *)new std::vector< bgsched::NodeBoard::Ptr >((std::vector< bgsched::NodeBoard::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::NodeBoard::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::NodeBoard::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< bgsched::NodeBoard::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBoardPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::NodeBoard::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBoardPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::NodeBoard::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::NodeBoard::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::NodeBoard > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::NodeBoard::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeBoardPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeBoardPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::NodeBoard::Ptr > *)new std::vector< bgsched::NodeBoard::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NodeBoardPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NodeBoardPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::NodeBoard::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NodeBoardPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeBoardPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeBoardPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::NodeBoard::Ptr > *)new std::vector< bgsched::NodeBoard::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NodeBoardPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NodeBoardPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NodeBoardPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NodeBoardPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NodeBoardPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::vector()\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::vector(std::vector< bgsched::NodeBoard::Ptr > const &)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBoardPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *) &((std::vector< bgsched::NodeBoard::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::NodeBoard > *smartresult = *result ? new boost::shared_ptr<  bgsched::NodeBoard >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *) &((std::vector< bgsched::NodeBoard::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::NodeBoard > *smartresult = *result ? new boost::shared_ptr<  bgsched::NodeBoard >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeBoardPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeBoardPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeBoardPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeBoardPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)\n"
    "    std::vector< bgsched::NodeBoard::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::NodeBoard > >::iterator,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type,std::vector< boost::shared_ptr< bgsched::NodeBoard > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::NodeBoard::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeBoardPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::Ptr > *arg1 = (std::vector< bgsched::NodeBoard::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodeBoardPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeBoardPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeBoardPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::NodeBoard const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::NodeBoard const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::NodeBoard const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::NodeBoard > *smartresult = result ? new boost::shared_ptr< const bgsched::NodeBoard >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *)std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeBoardCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NodeBoardCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeBoardCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *)std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeBoardCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeBoardCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *) &std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::NodeBoard const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::NodeBoard > *smartresult = *result ? new boost::shared_ptr< const bgsched::NodeBoard >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeBoardCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeBoardCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::NodeBoard const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeBoardCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > const &)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::difference_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBoardCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_NodeBoard_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::NodeBoard const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NodeBoardCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::NodeBoard::ConstPtr > *)new std::vector< bgsched::NodeBoard::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::NodeBoard::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeBoardCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeBoardCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeBoardCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::NodeBoard::ConstPtr > *)new std::vector< bgsched::NodeBoard::ConstPtr >((std::vector< bgsched::NodeBoard::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::NodeBoard::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::NodeBoard::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBoardCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeBoardCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::NodeBoard::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::NodeBoard::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeBoardCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeBoardCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::NodeBoard::ConstPtr > *)new std::vector< bgsched::NodeBoard::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NodeBoardCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NodeBoardCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::NodeBoard::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NodeBoardCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeBoardCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeBoardCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::NodeBoard::ConstPtr > *)new std::vector< bgsched::NodeBoard::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeBoardCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NodeBoardCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NodeBoardCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NodeBoardCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NodeBoardCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NodeBoardCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::vector()\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::vector(std::vector< bgsched::NodeBoard::ConstPtr > const &)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeBoardCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *) &((std::vector< bgsched::NodeBoard::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::NodeBoard > *smartresult = *result ? new boost::shared_ptr< const bgsched::NodeBoard >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *) &((std::vector< bgsched::NodeBoard::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::NodeBoard > *smartresult = *result ? new boost::shared_ptr< const bgsched::NodeBoard >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeBoardCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeBoardCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeBoardCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeBoardCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeBoardCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeBoardCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeBoardCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeBoardCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__NodeBoard_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeBoardCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeBoardCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)\n"
    "    std::vector< bgsched::NodeBoard::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::iterator,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type,std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeBoardCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeBoardCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeBoardCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeBoardCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeBoardCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::NodeBoard::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeBoardCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::NodeBoard::ConstPtr > *arg1 = (std::vector< bgsched::NodeBoard::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodeBoardCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeBoardCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::NodeBoard::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::NodeBoard::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeBoardCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MidplanePtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Midplane_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Midplane_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Midplane > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Midplane_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Midplane > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Midplane_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Midplane > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Midplane_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = result ? new boost::shared_ptr<  bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplanePtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *)std_vector_Sl_bgsched_Midplane_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MidplanePtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplanePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MidplanePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MidplanePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplanePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MidplanePtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MidplanePtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &)\n"
    "    std::vector< bgsched::Midplane::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplanePtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *)std_vector_Sl_bgsched_Midplane_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplanePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MidplanePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MidplanePtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidplanePtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type)\n"
    "    std::vector< bgsched::Midplane::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *) &std_vector_Sl_bgsched_Midplane_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Midplane > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = *result ? new boost::shared_ptr<  bgsched::Midplane >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MidplanePtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidplanePtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Midplane::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplanePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Midplane > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MidplanePtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplanePtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplanePtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > const &)\n"
    "    std::vector< bgsched::Midplane::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Midplane::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Midplane > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidplanePtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Midplane_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Midplane > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplanePtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MidplanePtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Midplane::Ptr > *)new std::vector< bgsched::Midplane::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplanePtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Midplane::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MidplanePtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MidplanePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MidplanePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Midplane::Ptr > *)new std::vector< bgsched::Midplane::Ptr >((std::vector< bgsched::Midplane::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Midplane::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Midplane::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< bgsched::Midplane::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidplanePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Midplane::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MidplanePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Midplane::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Midplane > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Midplane::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Midplane > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplanePtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Midplane::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MidplanePtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MidplanePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Midplane::Ptr > *)new std::vector< bgsched::Midplane::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_MidplanePtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_MidplanePtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator)\n"
    "    std::vector< bgsched::Midplane::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator,std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_MidplanePtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Midplane::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MidplanePtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MidplanePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MidplanePtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Midplane::Ptr > *)new std::vector< bgsched::Midplane::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplanePtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MidplanePtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MidplanePtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MidplanePtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MidplanePtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MidplanePtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::vector()\n"
    "    std::vector< bgsched::Midplane::Ptr >::vector(std::vector< bgsched::Midplane::Ptr > const &)\n"
    "    std::vector< bgsched::Midplane::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type)\n"
    "    std::vector< bgsched::Midplane::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidplanePtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *) &((std::vector< bgsched::Midplane::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = *result ? new boost::shared_ptr<  bgsched::Midplane >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *) &((std::vector< bgsched::Midplane::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Midplane > *smartresult = *result ? new boost::shared_ptr<  bgsched::Midplane >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplanePtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplanePtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidplanePtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplanePtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type)\n"
    "    std::vector< bgsched::Midplane::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplanePtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplanePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MidplanePtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplanePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplanePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MidplanePtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplanePtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MidplanePtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplanePtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)\n"
    "    std::vector< bgsched::Midplane::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Midplane > >::iterator,std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type,std::vector< boost::shared_ptr< bgsched::Midplane > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplanePtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplanePtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplanePtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplanePtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplanePtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Midplane::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MidplanePtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::Ptr > *arg1 = (std::vector< bgsched::Midplane::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MidplanePtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MidplanePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MidplanePtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Midplane_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Midplane const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Midplane const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Midplane const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Midplane_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = result ? new boost::shared_ptr< const bgsched::Midplane >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplaneCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *)std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MidplaneCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MidplaneCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplaneCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_MidplaneCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MidplaneCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplaneCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *)std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MidplaneCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MidplaneCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidplaneCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *) &std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Midplane const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = *result ? new boost::shared_ptr< const bgsched::Midplane >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MidplaneCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidplaneCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplaneCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Midplane_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Midplane const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_MidplaneCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplaneCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplaneCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > const &)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Midplane const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidplaneCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Midplane_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Midplane const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplaneCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MidplaneCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Midplane::ConstPtr > *)new std::vector< bgsched::Midplane::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplaneCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Midplane::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MidplaneCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MidplaneCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MidplaneCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Midplane::ConstPtr > *)new std::vector< bgsched::Midplane::ConstPtr >((std::vector< bgsched::Midplane::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Midplane::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Midplane::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< bgsched::Midplane::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidplaneCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Midplane::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MidplaneCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Midplane::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Midplane const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Midplane::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Midplane const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplaneCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Midplane::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MidplaneCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MidplaneCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Midplane::ConstPtr > *)new std::vector< bgsched::Midplane::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_MidplaneCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_MidplaneCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator,std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_MidplaneCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Midplane::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_MidplaneCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_MidplaneCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MidplaneCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Midplane::ConstPtr > *)new std::vector< bgsched::Midplane::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MidplaneCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MidplaneCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_MidplaneCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MidplaneCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_MidplaneCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MidplaneCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::vector(std::vector< bgsched::Midplane::ConstPtr > const &)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MidplaneCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *) &((std::vector< bgsched::Midplane::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = *result ? new boost::shared_ptr< const bgsched::Midplane >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *) &((std::vector< bgsched::Midplane::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Midplane > *smartresult = *result ? new boost::shared_ptr< const bgsched::Midplane >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplaneCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplaneCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_MidplaneCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplaneCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MidplaneCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MidplaneCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MidplaneCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "MidplaneCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MidplaneCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MidplaneCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_MidplaneCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Midplane_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_MidplaneCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MidplaneCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)\n"
    "    std::vector< bgsched::Midplane::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Midplane const > >::iterator,std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type,std::vector< boost::shared_ptr< bgsched::Midplane const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MidplaneCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MidplaneCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MidplaneCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Midplane const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MidplaneCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MidplaneCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Midplane::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MidplaneCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Midplane::ConstPtr > *arg1 = (std::vector< bgsched::Midplane::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MidplaneCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MidplaneCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Midplane::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Midplane::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MidplaneCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NodePtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Node_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Node_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Node > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Node_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Node > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Node_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Node > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Node_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Node > *smartresult = result ? new boost::shared_ptr<  bgsched::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodePtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *)std_vector_Sl_bgsched_Node_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodePtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NodePtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodePtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Node > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &)\n"
    "    std::vector< bgsched::Node::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Node > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodePtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *)std_vector_Sl_bgsched_Node_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodePtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodePtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Node > >::difference_type)\n"
    "    std::vector< bgsched::Node::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Node > >::value_type *) &std_vector_Sl_bgsched_Node_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Node > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Node > *smartresult = *result ? new boost::shared_ptr<  bgsched::Node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodePtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodePtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Node::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Node > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Node > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodePtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodePtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodePtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > const &)\n"
    "    std::vector< bgsched::Node::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Node::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Node > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodePtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Node_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Node > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodePtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NodePtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Node::Ptr > *)new std::vector< bgsched::Node::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodePtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Node::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodePtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Node::Ptr > *)new std::vector< bgsched::Node::Ptr >((std::vector< bgsched::Node::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Node::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Node::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< bgsched::Node::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Node::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Node::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Node > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Node::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Node > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodePtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Node::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodePtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Node::Ptr > *)new std::vector< bgsched::Node::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NodePtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NodePtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Node > >::iterator)\n"
    "    std::vector< bgsched::Node::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Node > >::iterator,std::vector< boost::shared_ptr< bgsched::Node > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_NodePtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Node::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NodePtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodePtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Node::Ptr > *)new std::vector< bgsched::Node::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodePtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NodePtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NodePtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NodePtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NodePtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NodePtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::vector()\n"
    "    std::vector< bgsched::Node::Ptr >::vector(std::vector< bgsched::Node::Ptr > const &)\n"
    "    std::vector< bgsched::Node::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Node > >::size_type)\n"
    "    std::vector< bgsched::Node::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Node > >::size_type,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodePtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Node > >::value_type *) &((std::vector< bgsched::Node::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Node > *smartresult = *result ? new boost::shared_ptr<  bgsched::Node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Node > >::value_type *) &((std::vector< bgsched::Node::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Node > *smartresult = *result ? new boost::shared_ptr<  bgsched::Node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodePtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodePtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodePtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodePtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Node > >::size_type)\n"
    "    std::vector< bgsched::Node::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Node > >::size_type,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodePtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodePtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodePtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodePtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodePtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodePtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Node > >::iterator,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)\n"
    "    std::vector< bgsched::Node::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Node > >::iterator,std::vector< boost::shared_ptr< bgsched::Node > >::size_type,std::vector< boost::shared_ptr< bgsched::Node > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodePtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodePtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodePtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodePtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodePtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Node::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodePtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::Ptr > *arg1 = (std::vector< bgsched::Node::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodePtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Node::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodePtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_NodeCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Node_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Node_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Node const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Node_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Node const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Node_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Node const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Node_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Node > *smartresult = result ? new boost::shared_ptr< const bgsched::Node >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *)std_vector_Sl_bgsched_Node_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_NodeCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &)\n"
    "    std::vector< bgsched::Node::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *)std_vector_Sl_bgsched_Node_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type)\n"
    "    std::vector< bgsched::Node::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *) &std_vector_Sl_bgsched_Node_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Node const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Node > *smartresult = *result ? new boost::shared_ptr< const bgsched::Node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Node::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Node_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Node const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_NodeCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > const &)\n"
    "    std::vector< bgsched::Node::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Node::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Node const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Node_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Node const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_NodeCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Node::ConstPtr > *)new std::vector< bgsched::Node::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Node::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NodeCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NodeCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Node::ConstPtr > *)new std::vector< bgsched::Node::ConstPtr >((std::vector< bgsched::Node::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Node::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Node::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< bgsched::Node::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Node::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NodeCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Node::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Node const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Node::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Node const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Node::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NodeCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Node::ConstPtr > *)new std::vector< bgsched::Node::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_NodeCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_NodeCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Node const > >::iterator)\n"
    "    std::vector< bgsched::Node::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Node const > >::iterator,std::vector< boost::shared_ptr< bgsched::Node const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_NodeCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Node::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_NodeCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NodeCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NodeCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Node::ConstPtr > *)new std::vector< bgsched::Node::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NodeCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NodeCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_NodeCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NodeCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NodeCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NodeCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Node::ConstPtr >::vector(std::vector< bgsched::Node::ConstPtr > const &)\n"
    "    std::vector< bgsched::Node::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Node const > >::size_type)\n"
    "    std::vector< bgsched::Node::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Node const > >::size_type,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NodeCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *) &((std::vector< bgsched::Node::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Node > *smartresult = *result ? new boost::shared_ptr< const bgsched::Node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *) &((std::vector< bgsched::Node::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Node > *smartresult = *result ? new boost::shared_ptr< const bgsched::Node >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_NodeCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Node const > >::size_type)\n"
    "    std::vector< bgsched::Node::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Node const > >::size_type,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NodeCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "NodeCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Node const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:NodeCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "NodeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NodeCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "NodeCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_NodeCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Node const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Node_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_NodeCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NodeCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Node::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Node const > >::iterator,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)\n"
    "    std::vector< bgsched::Node::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Node const > >::iterator,std::vector< boost::shared_ptr< bgsched::Node const > >::size_type,std::vector< boost::shared_ptr< bgsched::Node const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NodeCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NodeCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Node const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Node const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NodeCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Node const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NodeCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NodeCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Node::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NodeCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Node::ConstPtr > *arg1 = (std::vector< bgsched::Node::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NodeCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NodeCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Node::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Node::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NodeCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SwitchPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Switch_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Switch_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Switch > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Switch_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Switch > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Switch_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Switch > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Switch_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Switch > *smartresult = result ? new boost::shared_ptr<  bgsched::Switch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *)std_vector_Sl_bgsched_Switch_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SwitchPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SwitchPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwitchPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SwitchPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SwitchPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &)\n"
    "    std::vector< bgsched::Switch::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *)std_vector_Sl_bgsched_Switch_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwitchPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SwitchPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwitchPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type)\n"
    "    std::vector< bgsched::Switch::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *) &std_vector_Sl_bgsched_Switch_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Switch > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Switch > *smartresult = *result ? new boost::shared_ptr<  bgsched::Switch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SwitchPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwitchPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Switch::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Switch > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SwitchPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > const &)\n"
    "    std::vector< bgsched::Switch::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Switch::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Switch > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwitchPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Switch_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Switch > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SwitchPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Switch::Ptr > *)new std::vector< bgsched::Switch::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Switch::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwitchPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SwitchPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SwitchPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Switch::Ptr > *)new std::vector< bgsched::Switch::Ptr >((std::vector< bgsched::Switch::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Switch::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Switch::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< bgsched::Switch::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwitchPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Switch::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwitchPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Switch::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Switch > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Switch::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Switch > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Switch::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwitchPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwitchPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Switch::Ptr > *)new std::vector< bgsched::Switch::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SwitchPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SwitchPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Switch > >::iterator)\n"
    "    std::vector< bgsched::Switch::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Switch > >::iterator,std::vector< boost::shared_ptr< bgsched::Switch > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SwitchPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Switch::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SwitchPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwitchPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SwitchPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Switch::Ptr > *)new std::vector< bgsched::Switch::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SwitchPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SwitchPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SwitchPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SwitchPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SwitchPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::vector()\n"
    "    std::vector< bgsched::Switch::Ptr >::vector(std::vector< bgsched::Switch::Ptr > const &)\n"
    "    std::vector< bgsched::Switch::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Switch > >::size_type)\n"
    "    std::vector< bgsched::Switch::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Switch > >::size_type,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwitchPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *) &((std::vector< bgsched::Switch::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Switch > *smartresult = *result ? new boost::shared_ptr<  bgsched::Switch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *) &((std::vector< bgsched::Switch::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Switch > *smartresult = *result ? new boost::shared_ptr<  bgsched::Switch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwitchPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Switch > >::size_type)\n"
    "    std::vector< bgsched::Switch::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Switch > >::size_type,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SwitchPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SwitchPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SwitchPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Switch > >::iterator,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)\n"
    "    std::vector< bgsched::Switch::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Switch > >::iterator,std::vector< boost::shared_ptr< bgsched::Switch > >::size_type,std::vector< boost::shared_ptr< bgsched::Switch > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Switch::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwitchPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::Ptr > *arg1 = (std::vector< bgsched::Switch::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwitchPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwitchPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Switch::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SwitchPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SwitchCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Switch_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Switch_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Switch const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Switch_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Switch const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Switch_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Switch const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Switch_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Switch > *smartresult = result ? new boost::shared_ptr< const bgsched::Switch >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *)std_vector_Sl_bgsched_Switch_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SwitchCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SwitchCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwitchCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SwitchCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SwitchCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *)std_vector_Sl_bgsched_Switch_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwitchCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SwitchCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwitchCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *) &std_vector_Sl_bgsched_Switch_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Switch const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Switch > *smartresult = *result ? new boost::shared_ptr< const bgsched::Switch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SwitchCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwitchCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Switch_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Switch const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SwitchCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > const &)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Switch const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwitchCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Switch_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Switch const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SwitchCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Switch::ConstPtr > *)new std::vector< bgsched::Switch::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Switch::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwitchCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SwitchCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SwitchCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Switch::ConstPtr > *)new std::vector< bgsched::Switch::ConstPtr >((std::vector< bgsched::Switch::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Switch::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Switch::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< bgsched::Switch::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwitchCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Switch::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwitchCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Switch::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Switch const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Switch::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Switch const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Switch::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SwitchCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwitchCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Switch::ConstPtr > *)new std::vector< bgsched::Switch::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SwitchCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SwitchCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator,std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SwitchCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Switch::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SwitchCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SwitchCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SwitchCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Switch::ConstPtr > *)new std::vector< bgsched::Switch::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SwitchCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SwitchCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SwitchCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SwitchCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SwitchCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SwitchCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Switch::ConstPtr >::vector(std::vector< bgsched::Switch::ConstPtr > const &)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwitchCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *) &((std::vector< bgsched::Switch::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Switch > *smartresult = *result ? new boost::shared_ptr< const bgsched::Switch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *) &((std::vector< bgsched::Switch::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Switch > *smartresult = *result ? new boost::shared_ptr< const bgsched::Switch >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwitchCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SwitchCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SwitchCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SwitchCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SwitchCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SwitchCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SwitchCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SwitchCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Switch_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SwitchCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwitchCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Switch::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)\n"
    "    std::vector< bgsched::Switch::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Switch const > >::iterator,std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type,std::vector< boost::shared_ptr< bgsched::Switch const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwitchCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwitchCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwitchCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Switch const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwitchCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwitchCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Switch::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SwitchCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Switch::ConstPtr > *arg1 = (std::vector< bgsched::Switch::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwitchCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwitchCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Switch::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Switch::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SwitchCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IOLinkPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_IOLink_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_IOLink_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::IOLink > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_IOLink_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::IOLink > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_IOLink_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::IOLink > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_IOLink_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::IOLink > *smartresult = result ? new boost::shared_ptr<  bgsched::IOLink >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *)std_vector_Sl_bgsched_IOLink_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IOLinkPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *ptr = (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IOLinkPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOLinkPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IOLinkPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IOLinkPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &)\n"
    "    std::vector< bgsched::IOLink::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *)std_vector_Sl_bgsched_IOLink_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *ptr = (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOLinkPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IOLinkPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IOLinkPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type)\n"
    "    std::vector< bgsched::IOLink::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *) &std_vector_Sl_bgsched_IOLink_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::IOLink > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::IOLink > *smartresult = *result ? new boost::shared_ptr<  bgsched::IOLink >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IOLinkPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IOLinkPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::IOLink::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::IOLink > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IOLinkPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > const &)\n"
    "    std::vector< bgsched::IOLink::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::IOLink::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::IOLink > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOLinkPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_IOLink_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::IOLink > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IOLinkPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::IOLink::Ptr > *)new std::vector< bgsched::IOLink::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::IOLink::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOLinkPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *ptr = (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOLinkPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOLinkPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::IOLink::Ptr > *)new std::vector< bgsched::IOLink::Ptr >((std::vector< bgsched::IOLink::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::IOLink::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::IOLink::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< bgsched::IOLink::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOLinkPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::IOLink::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOLinkPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::IOLink::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::IOLink > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::IOLink::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::IOLink > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::IOLink::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOLinkPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IOLinkPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::IOLink::Ptr > *)new std::vector< bgsched::IOLink::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IOLinkPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IOLinkPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator)\n"
    "    std::vector< bgsched::IOLink::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator,std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IOLinkPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::IOLink::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IOLinkPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IOLinkPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IOLinkPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::IOLink::Ptr > *)new std::vector< bgsched::IOLink::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IOLinkPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IOLinkPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IOLinkPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IOLinkPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IOLinkPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::vector()\n"
    "    std::vector< bgsched::IOLink::Ptr >::vector(std::vector< bgsched::IOLink::Ptr > const &)\n"
    "    std::vector< bgsched::IOLink::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type)\n"
    "    std::vector< bgsched::IOLink::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOLinkPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *) &((std::vector< bgsched::IOLink::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::IOLink > *smartresult = *result ? new boost::shared_ptr<  bgsched::IOLink >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *) &((std::vector< bgsched::IOLink::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::IOLink > *smartresult = *result ? new boost::shared_ptr<  bgsched::IOLink >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IOLinkPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type)\n"
    "    std::vector< bgsched::IOLink::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IOLinkPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IOLinkPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IOLinkPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)\n"
    "    std::vector< bgsched::IOLink::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::IOLink > >::iterator,std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type,std::vector< boost::shared_ptr< bgsched::IOLink > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::IOLink::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOLinkPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::Ptr > *arg1 = (std::vector< bgsched::IOLink::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOLinkPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOLinkPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOLinkPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_IOLink_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::IOLink const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::IOLink const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::IOLink const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_IOLink_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::IOLink > *smartresult = result ? new boost::shared_ptr< const bgsched::IOLink >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *)std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IOLinkCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOLinkCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IOLinkCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IOLinkCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *)std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOLinkCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IOLinkCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IOLinkCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *) &std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::IOLink const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::IOLink > *smartresult = *result ? new boost::shared_ptr< const bgsched::IOLink >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IOLinkCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IOLinkCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_IOLink_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::IOLink const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IOLinkCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > const &)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::IOLink const > >::difference_type,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOLinkCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_IOLink_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::IOLink const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_IOLinkCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::IOLink::ConstPtr > *)new std::vector< bgsched::IOLink::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::IOLink::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOLinkCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IOLinkCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IOLinkCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::IOLink::ConstPtr > *)new std::vector< bgsched::IOLink::ConstPtr >((std::vector< bgsched::IOLink::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::IOLink::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::IOLink::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< bgsched::IOLink::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOLinkCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::IOLink::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IOLinkCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::IOLink::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::IOLink const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::IOLink::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::IOLink const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::IOLink::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_IOLinkCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IOLinkCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::IOLink::ConstPtr > *)new std::vector< bgsched::IOLink::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_IOLinkCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_IOLinkCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator,std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_IOLinkCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::IOLink::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IOLinkCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IOLinkCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IOLinkCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::IOLink::ConstPtr > *)new std::vector< bgsched::IOLink::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IOLinkCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IOLinkCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IOLinkCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IOLinkCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IOLinkCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IOLinkCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::vector()\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::vector(std::vector< bgsched::IOLink::ConstPtr > const &)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IOLinkCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *) &((std::vector< bgsched::IOLink::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::IOLink > *smartresult = *result ? new boost::shared_ptr< const bgsched::IOLink >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *) &((std::vector< bgsched::IOLink::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::IOLink > *smartresult = *result ? new boost::shared_ptr< const bgsched::IOLink >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IOLinkCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IOLinkCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IOLinkCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:IOLinkCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "IOLinkCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IOLinkCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IOLinkCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IOLinkCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__IOLink_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IOLinkCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IOLinkCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)\n"
    "    std::vector< bgsched::IOLink::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::IOLink const > >::iterator,std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type,std::vector< boost::shared_ptr< bgsched::IOLink const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IOLinkCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IOLinkCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IOLinkCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::IOLink const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IOLinkCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IOLinkCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::IOLink::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IOLinkCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::IOLink::ConstPtr > *arg1 = (std::vector< bgsched::IOLink::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IOLinkCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IOLinkCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::IOLink::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::IOLink::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IOLinkCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CablePtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Cable_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Cable_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Cable > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Cable_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Cable > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Cable_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Cable > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Cable_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Cable > *smartresult = result ? new boost::shared_ptr<  bgsched::Cable >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CablePtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *)std_vector_Sl_bgsched_Cable_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CablePtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CablePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CablePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CablePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CablePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CablePtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CablePtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &)\n"
    "    std::vector< bgsched::Cable::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CablePtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *)std_vector_Sl_bgsched_Cable_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CablePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CablePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CablePtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CablePtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type)\n"
    "    std::vector< bgsched::Cable::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *) &std_vector_Sl_bgsched_Cable_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Cable > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Cable > *smartresult = *result ? new boost::shared_ptr<  bgsched::Cable >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CablePtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CablePtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Cable::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CablePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Cable > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CablePtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CablePtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CablePtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > const &)\n"
    "    std::vector< bgsched::Cable::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Cable::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Cable > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CablePtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Cable_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Cable > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CablePtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CablePtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Cable::Ptr > *)new std::vector< bgsched::Cable::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CablePtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Cable::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CablePtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CablePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CablePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Cable::Ptr > *)new std::vector< bgsched::Cable::Ptr >((std::vector< bgsched::Cable::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Cable::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Cable::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< bgsched::Cable::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CablePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Cable::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CablePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Cable::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Cable > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Cable::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Cable > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CablePtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Cable::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CablePtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CablePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Cable::Ptr > *)new std::vector< bgsched::Cable::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CablePtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CablePtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Cable > >::iterator)\n"
    "    std::vector< bgsched::Cable::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Cable > >::iterator,std::vector< boost::shared_ptr< bgsched::Cable > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_CablePtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Cable::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CablePtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CablePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CablePtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Cable::Ptr > *)new std::vector< bgsched::Cable::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CablePtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CablePtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CablePtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CablePtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CablePtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CablePtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::vector()\n"
    "    std::vector< bgsched::Cable::Ptr >::vector(std::vector< bgsched::Cable::Ptr > const &)\n"
    "    std::vector< bgsched::Cable::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Cable > >::size_type)\n"
    "    std::vector< bgsched::Cable::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Cable > >::size_type,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CablePtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *) &((std::vector< bgsched::Cable::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Cable > *smartresult = *result ? new boost::shared_ptr<  bgsched::Cable >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *) &((std::vector< bgsched::Cable::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Cable > *smartresult = *result ? new boost::shared_ptr<  bgsched::Cable >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CablePtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CablePtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CablePtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CablePtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Cable > >::size_type)\n"
    "    std::vector< bgsched::Cable::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Cable > >::size_type,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CablePtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CablePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CablePtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CablePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CablePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CablePtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CablePtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CablePtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CablePtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Cable > >::iterator,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)\n"
    "    std::vector< bgsched::Cable::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Cable > >::iterator,std::vector< boost::shared_ptr< bgsched::Cable > >::size_type,std::vector< boost::shared_ptr< bgsched::Cable > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CablePtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CablePtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CablePtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CablePtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CablePtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Cable::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CablePtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::Ptr > *arg1 = (std::vector< bgsched::Cable::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CablePtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CablePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Cable::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CablePtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CableCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Cable_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Cable_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Cable const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Cable_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Cable const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Cable_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Cable const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Cable_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Cable > *smartresult = result ? new boost::shared_ptr< const bgsched::Cable >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CableCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *)std_vector_Sl_bgsched_Cable_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CableCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CableCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CableCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CableCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CableCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CableCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CableCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CableCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *)std_vector_Sl_bgsched_Cable_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CableCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CableCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CableCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CableCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *) &std_vector_Sl_bgsched_Cable_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Cable const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Cable > *smartresult = *result ? new boost::shared_ptr< const bgsched::Cable >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CableCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CableCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CableCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Cable_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Cable const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CableCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CableCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CableCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > const &)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Cable const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CableCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Cable_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Cable const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CableCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CableCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Cable::ConstPtr > *)new std::vector< bgsched::Cable::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CableCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Cable::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CableCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CableCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CableCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Cable::ConstPtr > *)new std::vector< bgsched::Cable::ConstPtr >((std::vector< bgsched::Cable::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Cable::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Cable::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< bgsched::Cable::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CableCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Cable::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CableCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Cable::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Cable const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Cable::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Cable const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CableCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Cable::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CableCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CableCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Cable::ConstPtr > *)new std::vector< bgsched::Cable::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CableCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CableCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator,std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_CableCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Cable::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CableCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CableCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CableCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Cable::ConstPtr > *)new std::vector< bgsched::Cable::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CableCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CableCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CableCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CableCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CableCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_CableCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Cable::ConstPtr >::vector(std::vector< bgsched::Cable::ConstPtr > const &)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CableCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *) &((std::vector< bgsched::Cable::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Cable > *smartresult = *result ? new boost::shared_ptr< const bgsched::Cable >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *) &((std::vector< bgsched::Cable::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Cable > *smartresult = *result ? new boost::shared_ptr< const bgsched::Cable >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CableCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CableCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CableCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CableCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CableCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CableCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CableCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CableCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CableCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CableCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CableCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Cable_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CableCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CableCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Cable::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)\n"
    "    std::vector< bgsched::Cable::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Cable const > >::iterator,std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type,std::vector< boost::shared_ptr< bgsched::Cable const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CableCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CableCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CableCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Cable const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CableCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CableCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Cable::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CableCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Cable::ConstPtr > *arg1 = (std::vector< bgsched::Cable::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CableCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CableCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Cable::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Cable::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CableCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_JobPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Job_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Job_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Job > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Job_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Job > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Job_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Job > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Job_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Job > *smartresult = result ? new boost::shared_ptr<  bgsched::Job >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *)std_vector_Sl_bgsched_Job_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:JobPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "JobPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JobPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_JobPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Job > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &)\n"
    "    std::vector< bgsched::Job::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Job > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *)std_vector_Sl_bgsched_Job_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_JobPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JobPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Job > >::difference_type)\n"
    "    std::vector< bgsched::Job::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Job > >::value_type *) &std_vector_Sl_bgsched_Job_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Job > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Job > *smartresult = *result ? new boost::shared_ptr<  bgsched::Job >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_JobPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JobPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Job::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Job > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Job > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_JobPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > const &)\n"
    "    std::vector< bgsched::Job::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Job::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Job > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Job_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Job > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JobPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Job::Ptr > *)new std::vector< bgsched::Job::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Job::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JobPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JobPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JobPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Job::Ptr > *)new std::vector< bgsched::Job::Ptr >((std::vector< bgsched::Job::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Job::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Job::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< bgsched::Job::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Job::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Job::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Job > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Job::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Job > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Job::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JobPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JobPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Job::Ptr > *)new std::vector< bgsched::Job::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_JobPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_JobPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Job > >::iterator)\n"
    "    std::vector< bgsched::Job::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Job > >::iterator,std::vector< boost::shared_ptr< bgsched::Job > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_JobPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Job::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JobPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JobPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JobPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Job::Ptr > *)new std::vector< bgsched::Job::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_JobPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JobPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JobPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_JobPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JobPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::vector()\n"
    "    std::vector< bgsched::Job::Ptr >::vector(std::vector< bgsched::Job::Ptr > const &)\n"
    "    std::vector< bgsched::Job::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Job > >::size_type)\n"
    "    std::vector< bgsched::Job::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Job > >::size_type,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Job > >::value_type *) &((std::vector< bgsched::Job::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Job > *smartresult = *result ? new boost::shared_ptr<  bgsched::Job >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Job > >::value_type *) &((std::vector< bgsched::Job::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Job > *smartresult = *result ? new boost::shared_ptr<  bgsched::Job >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JobPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Job > >::size_type)\n"
    "    std::vector< bgsched::Job::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Job > >::size_type,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:JobPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "JobPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_JobPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Job > >::iterator,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)\n"
    "    std::vector< bgsched::Job::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Job > >::iterator,std::vector< boost::shared_ptr< bgsched::Job > >::size_type,std::vector< boost::shared_ptr< bgsched::Job > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Job::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JobPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::Ptr > *arg1 = (std::vector< bgsched::Job::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JobPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JobPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Job::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JobPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_JobCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Job_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Job_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Job const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Job_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Job const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Job_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Job const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Job_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Job > *smartresult = result ? new boost::shared_ptr< const bgsched::Job >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *)std_vector_Sl_bgsched_Job_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:JobCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "JobCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_JobCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_JobCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &)\n"
    "    std::vector< bgsched::Job::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *)std_vector_Sl_bgsched_Job_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_JobCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JobCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type)\n"
    "    std::vector< bgsched::Job::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *) &std_vector_Sl_bgsched_Job_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Job const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Job > *smartresult = *result ? new boost::shared_ptr< const bgsched::Job >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_JobCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JobCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Job::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Job_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Job const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_JobCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > const &)\n"
    "    std::vector< bgsched::Job::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Job::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Job const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Job_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Job const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_JobCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Job::ConstPtr > *)new std::vector< bgsched::Job::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Job::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JobCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_JobCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_JobCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Job::ConstPtr > *)new std::vector< bgsched::Job::ConstPtr >((std::vector< bgsched::Job::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Job::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Job::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< bgsched::Job::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Job::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "JobCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Job::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Job const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Job::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Job const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Job::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_JobCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JobCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Job::ConstPtr > *)new std::vector< bgsched::Job::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_JobCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_JobCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Job const > >::iterator)\n"
    "    std::vector< bgsched::Job::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Job const > >::iterator,std::vector< boost::shared_ptr< bgsched::Job const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_JobCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Job::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_JobCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_JobCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_JobCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Job::ConstPtr > *)new std::vector< bgsched::Job::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_JobCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_JobCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_JobCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_JobCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_JobCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_JobCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Job::ConstPtr >::vector(std::vector< bgsched::Job::ConstPtr > const &)\n"
    "    std::vector< bgsched::Job::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Job const > >::size_type)\n"
    "    std::vector< bgsched::Job::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Job const > >::size_type,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "JobCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *) &((std::vector< bgsched::Job::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Job > *smartresult = *result ? new boost::shared_ptr< const bgsched::Job >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *) &((std::vector< bgsched::Job::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Job > *smartresult = *result ? new boost::shared_ptr< const bgsched::Job >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_JobCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Job const > >::size_type)\n"
    "    std::vector< bgsched::Job::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Job const > >::size_type,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:JobCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "JobCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Job const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:JobCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "JobCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "JobCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "JobCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_JobCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Job const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Job_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_JobCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'JobCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Job::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Job const > >::iterator,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)\n"
    "    std::vector< bgsched::Job::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Job const > >::iterator,std::vector< boost::shared_ptr< bgsched::Job const > >::size_type,std::vector< boost::shared_ptr< bgsched::Job const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:JobCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "JobCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Job const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Job const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JobCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Job const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JobCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "JobCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Job::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_JobCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Job::ConstPtr > *arg1 = (std::vector< bgsched::Job::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_JobCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_JobCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Job::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Job::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *JobCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BlockPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Block_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Block_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Block > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Block_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Block > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Block_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Block > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Block_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = result ? new boost::shared_ptr<  bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *)std_vector_Sl_bgsched_Block_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BlockPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BlockPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlockPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BlockPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Block > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &)\n"
    "    std::vector< bgsched::Block::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Block > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *)std_vector_Sl_bgsched_Block_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BlockPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Block > >::difference_type)\n"
    "    std::vector< bgsched::Block::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Block > >::value_type *) &std_vector_Sl_bgsched_Block_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Block > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = *result ? new boost::shared_ptr<  bgsched::Block >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BlockPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Block::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Block > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Block > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BlockPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > const &)\n"
    "    std::vector< bgsched::Block::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Block::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Block > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Block_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Block > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Block::Ptr > *)new std::vector< bgsched::Block::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Block::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlockPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Block::Ptr > *)new std::vector< bgsched::Block::Ptr >((std::vector< bgsched::Block::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Block::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Block::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< bgsched::Block::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Block::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Block::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Block > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Block::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Block > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Block::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlockPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlockPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Block::Ptr > *)new std::vector< bgsched::Block::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BlockPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BlockPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Block > >::iterator)\n"
    "    std::vector< bgsched::Block::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Block > >::iterator,std::vector< boost::shared_ptr< bgsched::Block > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BlockPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Block::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BlockPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlockPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BlockPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Block::Ptr > *)new std::vector< bgsched::Block::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BlockPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlockPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BlockPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BlockPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BlockPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::vector()\n"
    "    std::vector< bgsched::Block::Ptr >::vector(std::vector< bgsched::Block::Ptr > const &)\n"
    "    std::vector< bgsched::Block::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Block > >::size_type)\n"
    "    std::vector< bgsched::Block::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Block > >::size_type,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Block > >::value_type *) &((std::vector< bgsched::Block::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = *result ? new boost::shared_ptr<  bgsched::Block >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Block > >::value_type *) &((std::vector< bgsched::Block::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Block > *smartresult = *result ? new boost::shared_ptr<  bgsched::Block >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Block > >::size_type)\n"
    "    std::vector< bgsched::Block::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Block > >::size_type,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BlockPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BlockPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BlockPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Block > >::iterator,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)\n"
    "    std::vector< bgsched::Block::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Block > >::iterator,std::vector< boost::shared_ptr< bgsched::Block > >::size_type,std::vector< boost::shared_ptr< bgsched::Block > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Block::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::Ptr > *arg1 = (std::vector< bgsched::Block::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Block::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BlockCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Block_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Block_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Block const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Block_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Block const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Block_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Block const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Block_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Block > *smartresult = result ? new boost::shared_ptr< const bgsched::Block >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *)std_vector_Sl_bgsched_Block_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BlockCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BlockCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BlockCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BlockCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &)\n"
    "    std::vector< bgsched::Block::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *)std_vector_Sl_bgsched_Block_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BlockCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type)\n"
    "    std::vector< bgsched::Block::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *) &std_vector_Sl_bgsched_Block_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Block const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Block > *smartresult = *result ? new boost::shared_ptr< const bgsched::Block >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BlockCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Block::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Block_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Block const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BlockCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > const &)\n"
    "    std::vector< bgsched::Block::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Block::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Block const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Block_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Block const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Block::ConstPtr > *)new std::vector< bgsched::Block::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Block::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlockCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Block::ConstPtr > *)new std::vector< bgsched::Block::ConstPtr >((std::vector< bgsched::Block::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Block::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Block::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< bgsched::Block::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Block::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Block::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Block const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Block::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Block const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Block::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlockCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlockCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Block::ConstPtr > *)new std::vector< bgsched::Block::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BlockCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BlockCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Block const > >::iterator)\n"
    "    std::vector< bgsched::Block::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Block const > >::iterator,std::vector< boost::shared_ptr< bgsched::Block const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BlockCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Block::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BlockCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BlockCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BlockCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Block::ConstPtr > *)new std::vector< bgsched::Block::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BlockCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BlockCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BlockCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BlockCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BlockCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Block::ConstPtr >::vector(std::vector< bgsched::Block::ConstPtr > const &)\n"
    "    std::vector< bgsched::Block::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Block const > >::size_type)\n"
    "    std::vector< bgsched::Block::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Block const > >::size_type,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *) &((std::vector< bgsched::Block::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Block > *smartresult = *result ? new boost::shared_ptr< const bgsched::Block >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *) &((std::vector< bgsched::Block::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Block > *smartresult = *result ? new boost::shared_ptr< const bgsched::Block >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Block const > >::size_type)\n"
    "    std::vector< bgsched::Block::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Block const > >::size_type,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BlockCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Block const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:BlockCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BlockCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BlockCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BlockCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Block const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Block_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BlockCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Block::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Block const > >::iterator,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)\n"
    "    std::vector< bgsched::Block::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Block const > >::iterator,std::vector< boost::shared_ptr< bgsched::Block const > >::size_type,std::vector< boost::shared_ptr< bgsched::Block const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Block const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Block const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Block const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Block::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Block::ConstPtr > *arg1 = (std::vector< bgsched::Block::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Block::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Block::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ShapePtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Shape_Ptr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Shape_Ptr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Shape > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Shape_Ptr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Shape > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Shape_Ptr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Shape > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Shape_Ptr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = result ? new boost::shared_ptr<  bgsched::Shape >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapePtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *)std_vector_Sl_bgsched_Shape_Ptr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapePtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapePtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapePtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ShapePtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapePtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &)\n"
    "    std::vector< bgsched::Shape::Ptr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapePtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *)std_vector_Sl_bgsched_Shape_Ptr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapePtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapePtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type)\n"
    "    std::vector< bgsched::Shape::Ptr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *) &std_vector_Sl_bgsched_Shape_Ptr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Shape > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = *result ? new boost::shared_ptr<  bgsched::Shape >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapePtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapePtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Shape::Ptr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapePtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Ptr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Shape > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapePtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapePtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapePtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > const &)\n"
    "    std::vector< bgsched::Shape::Ptr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Shape::Ptr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Shape > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapePtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Shape_Ptr_Sg__append(arg1,(boost::shared_ptr< bgsched::Shape > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapePtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ShapePtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Shape::Ptr > *)new std::vector< bgsched::Shape::Ptr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapePtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapePtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Shape::Ptr > *)new std::vector< bgsched::Shape::Ptr >((std::vector< bgsched::Shape::Ptr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Shape::Ptr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape::Ptr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< bgsched::Shape::Ptr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Shape::Ptr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapePtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Shape::Ptr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Shape > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape::Ptr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Shape > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapePtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapePtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShapePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Shape::Ptr > *)new std::vector< bgsched::Shape::Ptr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ShapePtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ShapePtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Shape > >::iterator)\n"
    "    std::vector< bgsched::Shape::Ptr >::erase(std::vector< boost::shared_ptr< bgsched::Shape > >::iterator,std::vector< boost::shared_ptr< bgsched::Shape > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ShapePtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Shape::Ptr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ShapePtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShapePtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ShapePtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Shape::Ptr > *)new std::vector< bgsched::Shape::Ptr >(arg1,(std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapePtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ShapePtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ShapePtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ShapePtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ShapePtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ShapePtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::vector()\n"
    "    std::vector< bgsched::Shape::Ptr >::vector(std::vector< bgsched::Shape::Ptr > const &)\n"
    "    std::vector< bgsched::Shape::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Shape > >::size_type)\n"
    "    std::vector< bgsched::Shape::Ptr >::vector(std::vector< boost::shared_ptr< bgsched::Shape > >::size_type,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapePtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *) &((std::vector< bgsched::Shape::Ptr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = *result ? new boost::shared_ptr<  bgsched::Shape >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *) &((std::vector< bgsched::Shape::Ptr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = *result ? new boost::shared_ptr<  bgsched::Shape >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapePtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapePtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapePtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapePtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Shape > >::size_type)\n"
    "    std::vector< bgsched::Shape::Ptr >::resize(std::vector< boost::shared_ptr< bgsched::Shape > >::size_type,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapePtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapePtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapePtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapePtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapePtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapePtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapePtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapePtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Shape > >::iterator,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)\n"
    "    std::vector< bgsched::Shape::Ptr >::insert(std::vector< boost::shared_ptr< bgsched::Shape > >::iterator,std::vector< boost::shared_ptr< bgsched::Shape > >::size_type,std::vector< boost::shared_ptr< bgsched::Shape > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapePtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapePtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapePtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapePtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapePtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape::Ptr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShapePtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::Ptr > *arg1 = (std::vector< bgsched::Shape::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapePtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapePtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::Ptr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapePtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ShapeCPtrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Shape_ConstPtr_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Shape_ConstPtr_Sg____nonzero__((std::vector< boost::shared_ptr< bgsched::Shape const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Shape_ConstPtr_Sg____bool__((std::vector< boost::shared_ptr< bgsched::Shape const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Shape_ConstPtr_Sg____len__((std::vector< boost::shared_ptr< bgsched::Shape const > > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Shape_ConstPtr_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = result ? new boost::shared_ptr< const bgsched::Shape >(result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___getslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeCPtrVector___getslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *)std_vector_Sl_bgsched_Shape_ConstPtr_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeCPtrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val3);
  {
    std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapeCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeCPtrVector___setslice__" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___setslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeCPtrVector___setslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ShapeCPtrVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapeCPtrVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__setslice__(std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___delslice__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeCPtrVector___delslice__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___delitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *)std_vector_Sl_bgsched_Shape_ConstPtr_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapeCPtrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapeCPtrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__delitem__(std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___getitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *) &std_vector_Sl_bgsched_Shape_ConstPtr_Sg____getitem____SWIG_1((std::vector< boost::shared_ptr< bgsched::Shape const > > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = *result ? new boost::shared_ptr< const bgsched::Shape >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapeCPtrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapeCPtrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__getitem__(std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector___setitem__" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeCPtrVector___setitem__" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_ConstPtr_Sg____setitem____SWIG_2(arg1,arg2,(boost::shared_ptr< bgsched::Shape const > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapeCPtrVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeCPtrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeCPtrVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__setitem__(PySliceObject *,std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > const &)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::__setitem__(std::vector< boost::shared_ptr< bgsched::Shape const > >::difference_type,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeCPtrVector_append" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Shape_ConstPtr_Sg__append(arg1,(boost::shared_ptr< bgsched::Shape const > const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeCPtrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ShapeCPtrVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Shape::ConstPtr > *)new std::vector< bgsched::Shape::ConstPtr >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeCPtrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapeCPtrVector",&obj0)) SWIG_fail;
  {
    std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *ptr = (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapeCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Shape::ConstPtr > *)new std::vector< bgsched::Shape::ConstPtr >((std::vector< bgsched::Shape::ConstPtr > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Shape::ConstPtr > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape::ConstPtr > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< bgsched::Shape::ConstPtr > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Shape::ConstPtr > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeCPtrVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Shape::ConstPtr > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< boost::shared_ptr< bgsched::Shape const > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape::ConstPtr > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< boost::shared_ptr< bgsched::Shape const > >::allocator_type(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeCPtrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapeCPtrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShapeCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val1);
  {
    try{
      result = (std::vector< bgsched::Shape::ConstPtr > *)new std::vector< bgsched::Shape::ConstPtr >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > arg2 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_erase" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_erase" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ShapeCPtrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ShapeCPtrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::erase(std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator,std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ShapeCPtrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg1 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Shape::ConstPtr > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ShapeCPtrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShapeCPtrVector" "', argument " "1"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ShapeCPtrVector" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      result = (std::vector< bgsched::Shape::ConstPtr > *)new std::vector< bgsched::Shape::ConstPtr >(arg1,(std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeCPtrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ShapeCPtrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ShapeCPtrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ShapeCPtrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ShapeCPtrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ShapeCPtrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::vector()\n"
    "    std::vector< bgsched::Shape::ConstPtr >::vector(std::vector< bgsched::Shape::ConstPtr > const &)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::vector(std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeCPtrVector_push_back" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp2) tempshared2 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2);
      arg2 = &tempshared2;
    } else {
      arg2 = (argp2) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp2) : &tempshared2;
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *) &((std::vector< bgsched::Shape::ConstPtr > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = *result ? new boost::shared_ptr< const bgsched::Shape >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = (std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *) &((std::vector< bgsched::Shape::ConstPtr > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = *result ? new boost::shared_ptr< const bgsched::Shape >(*result) : 0;
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector_assign" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeCPtrVector_assign" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector_resize" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeCPtrVector_resize" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapeCPtrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeCPtrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::resize(std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 ;
  int res3 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeCPtrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp3) tempshared3 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3);
      arg3 = &tempshared3;
    } else {
      arg3 = (argp3) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp3) : &tempshared3;
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  SwigValueWrapper< std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > arg2 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg3 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeCPtrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeCPtrVector_insert" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeCPtrVector_insert" "', argument " "3"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapeCPtrVector_insert" "', argument " "4"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      if (argp4) tempshared4 = *reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp4);
      delete reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp4);
      arg4 = &tempshared4;
    } else {
      arg4 = (argp4) ? reinterpret_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type * >(argp4) : &tempshared4;
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeCPtrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapeCPtrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeCPtrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)\n"
    "    std::vector< bgsched::Shape::ConstPtr >::insert(std::vector< boost::shared_ptr< bgsched::Shape const > >::iterator,std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type,std::vector< boost::shared_ptr< bgsched::Shape const > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeCPtrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeCPtrVector_reserve" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeCPtrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< boost::shared_ptr< bgsched::Shape const > >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeCPtrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeCPtrVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape::ConstPtr > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShapeCPtrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape::ConstPtr > *arg1 = (std::vector< bgsched::Shape::ConstPtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeCPtrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeCPtrVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape::ConstPtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape::ConstPtr > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapeCPtrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ShapeVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_iterator" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_bgsched_Shape_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___nonzero__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Shape_Sg____nonzero__((std::vector< bgsched::Shape > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___bool__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_bgsched_Shape_Sg____bool__((std::vector< bgsched::Shape > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___len__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = std_vector_Sl_bgsched_Shape_Sg____len__((std::vector< bgsched::Shape > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< bgsched::Shape > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_pop" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_bgsched_Shape_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr<  bgsched::Shape > *smartresult = new boost::shared_ptr<  bgsched::Shape >(new std::vector< bgsched::Shape >::value_type((std::vector< bgsched::Shape >::value_type &)result));
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  std::vector< bgsched::Shape >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___getslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___getslice__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeVector___getslice__" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bgsched::Shape >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *)std_vector_Sl_bgsched_Shape_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  std::vector< bgsched::Shape >::difference_type arg3 ;
  std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___setslice__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeVector___setslice__" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bgsched::Shape >::difference_type >(val3);
  {
    std::vector<bgsched::Shape,std::allocator< bgsched::Shape > > *ptr = (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapeVector___setslice__" "', argument " "4"" of type '" "std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector___setslice__" "', argument " "4"" of type '" "std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  std::vector< bgsched::Shape >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___setslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___setslice__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeVector___setslice__" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bgsched::Shape >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_ShapeVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapeVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::__setslice__(std::vector< bgsched::Shape >::difference_type,std::vector< bgsched::Shape >::difference_type,std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &)\n"
    "    std::vector< bgsched::Shape >::__setslice__(std::vector< bgsched::Shape >::difference_type,std::vector< bgsched::Shape >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  std::vector< bgsched::Shape >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___delslice__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___delslice__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeVector___delslice__" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< bgsched::Shape >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___delitem__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *)std_vector_Sl_bgsched_Shape_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<bgsched::Shape,std::allocator< bgsched::Shape > > *ptr = (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeVector___setitem__" "', argument " "3"" of type '" "std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector___setitem__" "', argument " "3"" of type '" "std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___delitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapeVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapeVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::__delitem__(std::vector< bgsched::Shape >::difference_type)\n"
    "    std::vector< bgsched::Shape >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Shape >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___getitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___getitem__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< bgsched::Shape >::value_type *) &std_vector_Sl_bgsched_Shape_Sg____getitem____SWIG_1((std::vector< bgsched::Shape > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = new boost::shared_ptr< const bgsched::Shape >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapeVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_ShapeVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::__getitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Shape >::__getitem__(std::vector< bgsched::Shape >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::difference_type arg2 ;
  std::vector< bgsched::Shape >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector___setitem__" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector___setitem__" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::difference_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeVector___setitem__" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector___setitem__" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared3.get());
    } else {
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3)->get());
    }
  }
  {
    try{
      try {
        std_vector_Sl_bgsched_Shape_Sg____setitem____SWIG_2(arg1,arg2,(bgsched::Shape const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_ShapeVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::__setitem__(PySliceObject *,std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > const &)\n"
    "    std::vector< bgsched::Shape >::__setitem__(PySliceObject *)\n"
    "    std::vector< bgsched::Shape >::__setitem__(std::vector< bgsched::Shape >::difference_type,std::vector< bgsched::Shape >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_append" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeVector_append" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_append" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      arg2 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared2.get());
    } else {
      arg2 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2)->get());
    }
  }
  {
    try{
      std_vector_Sl_bgsched_Shape_Sg__append(arg1,(bgsched::Shape const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_ShapeVector")) SWIG_fail;
  {
    try{
      result = (std::vector< bgsched::Shape > *)new std::vector< bgsched::Shape >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_ShapeVector",&obj0)) SWIG_fail;
  {
    std::vector<bgsched::Shape,std::allocator< bgsched::Shape > > *ptr = (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShapeVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapeVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< bgsched::Shape > *)new std::vector< bgsched::Shape >((std::vector< bgsched::Shape > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_empty" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (bool)((std::vector< bgsched::Shape > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_size" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_clear" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_swap" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Shape > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_swap" "', argument " "2"" of type '" "std::vector< bgsched::Shape > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< bgsched::Shape > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_get_allocator" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< bgsched::Shape >::allocator_type(static_cast< const std::vector< bgsched::Shape >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_bgsched__Shape_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_begin" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_end" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_rbegin" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_rend" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_pop_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Shape >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_erase" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_erase" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::iterator arg2 ;
  std::vector< bgsched::Shape >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< bgsched::Shape >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_erase" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_erase" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_erase" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_erase" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_erase" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_ShapeVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_ShapeVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::erase(std::vector< bgsched::Shape >::iterator)\n"
    "    std::vector< bgsched::Shape >::erase(std::vector< bgsched::Shape >::iterator,std::vector< bgsched::Shape >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_ShapeVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape >::size_type arg1 ;
  std::vector< bgsched::Shape >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< bgsched::Shape > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ShapeVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShapeVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape >::size_type""'");
  } 
  arg1 = static_cast< std::vector< bgsched::Shape >::size_type >(val1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ShapeVector" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ShapeVector" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      arg2 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared2.get());
    } else {
      arg2 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2)->get());
    }
  }
  {
    try{
      result = (std::vector< bgsched::Shape > *)new std::vector< bgsched::Shape >(arg1,(std::vector< bgsched::Shape >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ShapeVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ShapeVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ShapeVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ShapeVector__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ShapeVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::vector()\n"
    "    std::vector< bgsched::Shape >::vector(std::vector< bgsched::Shape > const &)\n"
    "    std::vector< bgsched::Shape >::vector(std::vector< bgsched::Shape >::size_type,std::vector< bgsched::Shape >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_push_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    int newmem = 0;
    res2 = SWIG_ConvertPtrAndOwn(obj1, &argp2, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShapeVector_push_back" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_push_back" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared2 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2);
      arg2 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared2.get());
    } else {
      arg2 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp2)->get());
    }
  }
  {
    try{
      (arg1)->push_back((std::vector< bgsched::Shape >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_front" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (std::vector< bgsched::Shape >::value_type *) &((std::vector< bgsched::Shape > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = new boost::shared_ptr< const bgsched::Shape >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_back" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = (std::vector< bgsched::Shape >::value_type *) &((std::vector< bgsched::Shape > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  {
    boost::shared_ptr< const bgsched::Shape > *smartresult = new boost::shared_ptr< const bgsched::Shape >(result SWIG_NO_NULL_DELETER_0);
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(smartresult), SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, SWIG_POINTER_OWN);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::size_type arg2 ;
  std::vector< bgsched::Shape >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_assign" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector_assign" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeVector_assign" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_assign" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared3.get());
    } else {
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3)->get());
    }
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< bgsched::Shape >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_resize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::size_type arg2 ;
  std::vector< bgsched::Shape >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_resize" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector_resize" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::size_type >(val2);
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeVector_resize" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_resize" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared3.get());
    } else {
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3)->get());
    }
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< bgsched::Shape >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::iterator arg2 ;
  std::vector< bgsched::Shape >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< bgsched::Shape >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ShapeVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_insert" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_insert" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
    }
  }
  {
    int newmem = 0;
    res3 = SWIG_ConvertPtrAndOwn(obj2, &argp3, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ShapeVector_insert" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_insert" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared3 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3);
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared3.get());
    } else {
      arg3 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp3)->get());
    }
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< bgsched::Shape >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< bgsched::Shape >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::iterator arg2 ;
  std::vector< bgsched::Shape >::size_type arg3 ;
  std::vector< bgsched::Shape >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  boost::shared_ptr< bgsched::Shape const > tempshared4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:ShapeVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_insert" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_insert" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShapeVector_insert" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ShapeVector_insert" "', argument " "3"" of type '" "std::vector< bgsched::Shape >::size_type""'");
  } 
  arg3 = static_cast< std::vector< bgsched::Shape >::size_type >(val3);
  {
    int newmem = 0;
    res4 = SWIG_ConvertPtrAndOwn(obj3, &argp4, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t,  0 , &newmem);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ShapeVector_insert" "', argument " "4"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ShapeVector_insert" "', argument " "4"" of type '" "std::vector< bgsched::Shape >::value_type const &""'"); 
    }
    if (newmem & SWIG_CAST_NEW_MEMORY) {
      tempshared4 = *reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp4);
      delete reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp4);
      arg4 = const_cast< std::vector< bgsched::Shape >::value_type * >(tempshared4.get());
    } else {
      arg4 = const_cast< std::vector< bgsched::Shape >::value_type * >(reinterpret_cast< boost::shared_ptr< const bgsched::Shape > * >(argp4)->get());
    }
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< bgsched::Shape >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_ShapeVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<bgsched::Shape,std::allocator< bgsched::Shape > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< bgsched::Shape >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_boost__shared_ptrT_bgsched__Shape_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ShapeVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'ShapeVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< bgsched::Shape >::insert(std::vector< bgsched::Shape >::iterator,std::vector< bgsched::Shape >::value_type const &)\n"
    "    std::vector< bgsched::Shape >::insert(std::vector< bgsched::Shape >::iterator,std::vector< bgsched::Shape >::size_type,std::vector< bgsched::Shape >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShapeVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  std::vector< bgsched::Shape >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:ShapeVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_reserve" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShapeVector_reserve" "', argument " "2"" of type '" "std::vector< bgsched::Shape >::size_type""'");
  } 
  arg2 = static_cast< std::vector< bgsched::Shape >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShapeVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< bgsched::Shape >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ShapeVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShapeVector_capacity" "', argument " "1"" of type '" "std::vector< bgsched::Shape > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      result = ((std::vector< bgsched::Shape > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ShapeVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< bgsched::Shape > *arg1 = (std::vector< bgsched::Shape > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ShapeVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShapeVector" "', argument " "1"" of type '" "std::vector< bgsched::Shape > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< bgsched::Shape > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ShapeVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BlockStatusSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< bgsched::Block::Status > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< bgsched::Block::Status > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlockStatusSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_bgsched__Block__Status_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockStatusSet" "', argument " "1"" of type '" "std::less< bgsched::Block::Status > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockStatusSet" "', argument " "1"" of type '" "std::less< bgsched::Block::Status > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (std::set< bgsched::Block::Status > *)new std::set< bgsched::Block::Status >((std::less< bgsched::Block::Status > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_iterator" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_set_Sl_bgsched_Block_Status_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet___nonzero__" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (bool)std_set_Sl_bgsched_Block_Status_Sg____nonzero__((std::set< enum bgsched::Block::Status > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet___bool__" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (bool)std_set_Sl_bgsched_Block_Status_Sg____bool__((std::set< enum bgsched::Block::Status > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< enum bgsched::Block::Status >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet___len__" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = std_set_Sl_bgsched_Block_Status_Sg____len__((std::set< enum bgsched::Block::Status > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_append" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_append" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::value_type""'");
  } 
  arg2 = static_cast< std::set< enum bgsched::Block::Status >::value_type >(val2);
  {
    try{
      std_set_Sl_bgsched_Block_Status_Sg__append(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet___contains__" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet___contains__" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::value_type""'");
  } 
  arg2 = static_cast< std::set< enum bgsched::Block::Status >::value_type >(val2);
  {
    try{
      result = (bool)std_set_Sl_bgsched_Block_Status_Sg____contains__(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< enum bgsched::Block::Status >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet___getitem__" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet___getitem__" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::difference_type""'");
  } 
  arg2 = static_cast< std::set< enum bgsched::Block::Status >::difference_type >(val2);
  {
    try{
      try {
        result = (std::set< enum bgsched::Block::Status >::value_type)std_set_Sl_bgsched_Block_Status_Sg____getitem__((std::set< enum bgsched::Block::Status > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockStatusSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BlockStatusSet")) SWIG_fail;
  {
    try{
      result = (std::set< bgsched::Block::Status > *)new std::set< bgsched::Block::Status >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockStatusSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::set< bgsched::Block::Status > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BlockStatusSet",&obj0)) SWIG_fail;
  {
    std::set<bgsched::Block::Status,std::less< bgsched::Block::Status >,std::allocator< bgsched::Block::Status > > *ptr = (std::set<bgsched::Block::Status,std::less< bgsched::Block::Status >,std::allocator< bgsched::Block::Status > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlockStatusSet" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BlockStatusSet" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::set< bgsched::Block::Status > *)new std::set< bgsched::Block::Status >((std::set< bgsched::Block::Status > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlockStatusSet(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BlockStatusSet__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_bgsched__Block__Status_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BlockStatusSet__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<bgsched::Block::Status,std::less< bgsched::Block::Status >,std::allocator< bgsched::Block::Status > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BlockStatusSet__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BlockStatusSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< bgsched::Block::Status >::set(std::less< bgsched::Block::Status > const &)\n"
    "    std::set< bgsched::Block::Status >::set()\n"
    "    std::set< bgsched::Block::Status >::set(std::set< bgsched::Block::Status > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_empty" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (bool)((std::set< bgsched::Block::Status > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::set< enum bgsched::Block::Status >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_size" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = ((std::set< bgsched::Block::Status > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_clear" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< bgsched::Block::Status > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_swap" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BlockStatusSet_swap" "', argument " "2"" of type '" "std::set< bgsched::Block::Status > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BlockStatusSet_swap" "', argument " "2"" of type '" "std::set< bgsched::Block::Status > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< enum bgsched::Block::Status >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_erase" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_erase" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::key_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = (arg1)->erase((std::set< enum bgsched::Block::Status >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::set< enum bgsched::Block::Status >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_count" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_count" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::key_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = ((std::set< bgsched::Block::Status > const *)arg1)->count((std::set< enum bgsched::Block::Status >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_begin" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_end" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_rbegin" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::reverse_iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BlockStatusSet_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_rend" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_erase" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockStatusSet_erase" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockStatusSet_erase" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::iterator""'");
    }
  }
  {
    try{
      (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > arg2 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BlockStatusSet_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_erase" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockStatusSet_erase" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockStatusSet_erase" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockStatusSet_erase" "', argument " "3"" of type '" "std::set< enum bgsched::Block::Status >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlockStatusSet_erase" "', argument " "3"" of type '" "std::set< enum bgsched::Block::Status >::iterator""'");
    }
  }
  {
    try{
      (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<bgsched::Block::Status,std::less< bgsched::Block::Status >,std::allocator< bgsched::Block::Status > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BlockStatusSet_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<bgsched::Block::Status,std::less< bgsched::Block::Status >,std::allocator< bgsched::Block::Status > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BlockStatusSet_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set<bgsched::Block::Status,std::less< bgsched::Block::Status >,std::allocator< bgsched::Block::Status > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< enum bgsched::Block::Status >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BlockStatusSet_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BlockStatusSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< bgsched::Block::Status >::erase(std::set< enum bgsched::Block::Status >::key_type const &)\n"
    "    std::set< bgsched::Block::Status >::erase(std::set< enum bgsched::Block::Status >::iterator)\n"
    "    std::set< bgsched::Block::Status >::erase(std::set< enum bgsched::Block::Status >::iterator,std::set< enum bgsched::Block::Status >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_find" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_find" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::key_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = (arg1)->find((std::set< enum bgsched::Block::Status >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_lower_bound" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_lower_bound" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::key_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = (arg1)->lower_bound((std::set< enum bgsched::Block::Status >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::set< enum bgsched::Block::Status >::iterator > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_upper_bound" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_upper_bound" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::key_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = (arg1)->upper_bound((std::set< enum bgsched::Block::Status >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< enum bgsched::Block::Status >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::key_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< enum bgsched::Block::Status >::iterator,std::set< enum bgsched::Block::Status >::iterator > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_equal_range",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_equal_range" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_equal_range" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::key_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::key_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = (arg1)->equal_range((std::set< enum bgsched::Block::Status >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< enum bgsched::Block::Status >::iterator,std::set< enum bgsched::Block::Status >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< enum bgsched::Block::Status >::iterator,std::set< enum bgsched::Block::Status >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlockStatusSet_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  std::set< enum bgsched::Block::Status >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 ;
  std::set< enum bgsched::Block::Status >::value_type temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::pair< std::set< enum bgsched::Block::Status >::iterator,bool > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BlockStatusSet_insert",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlockStatusSet_insert" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  ecode2 = SWIG_AsVal_int (obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BlockStatusSet_insert" "', argument " "2"" of type '" "std::set< enum bgsched::Block::Status >::value_type const &""'");
  } else {
    temp2 = static_cast< std::set< enum bgsched::Block::Status >::value_type >(val2);
    arg2 = &temp2;
  }
  {
    try{
      result = (arg1)->insert((std::set< enum bgsched::Block::Status >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< enum bgsched::Block::Status >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< enum bgsched::Block::Status >::iterator,bool > & >(result).second));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlockStatusSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< bgsched::Block::Status > *arg1 = (std::set< bgsched::Block::Status > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BlockStatusSet",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlockStatusSet" "', argument " "1"" of type '" "std::set< bgsched::Block::Status > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< bgsched::Block::Status > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlockStatusSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DimensionConnectivityMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< bgsched::Dimension > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimensionConnectivityMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_bgsched__Dimension_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimensionConnectivityMap" "', argument " "1"" of type '" "std::less< bgsched::Dimension > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimensionConnectivityMap" "', argument " "1"" of type '" "std::less< bgsched::Dimension > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< bgsched::Dimension > * >(argp1);
  {
    try{
      result = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *)new std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >((std::less< bgsched::Dimension > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_iterator" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___nonzero__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (bool)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____nonzero__((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___bool__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (bool)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____bool__((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___len__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____len__((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___getitem__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap___getitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap___getitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      try {
        result = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type *) &std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____getitem__(arg1,(bgsched::Dimension const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_bgsched__Block__Connectivity__Value, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___delitem__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap___delitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap___delitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      try {
        std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____delitem__(arg1,(bgsched::Dimension const &)*arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_has_key" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_has_key" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_has_key" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = (bool)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__has_key((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1,(bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_keys" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (PyObject *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__keys(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_values" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (PyObject *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__values(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_items" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (PyObject *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__items(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___contains__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap___contains__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap___contains__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = (bool)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____contains__(arg1,(bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_key_iterator" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__key_iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_value_iterator" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__value_iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___setitem__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap___setitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap___setitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____setitem____SWIG_0(arg1,(bgsched::Dimension const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DimensionConnectivityMap___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap___setitem__" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap___setitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap___setitem__" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_bgsched__Block__Connectivity__Value,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DimensionConnectivityMap___setitem__" "', argument " "3"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap___setitem__" "', argument " "3"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type * >(argp3);
  {
    try{
      try {
        std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg____setitem____SWIG_1(arg1,(bgsched::Dimension const &)*arg2,(bgsched::Block::Connectivity::Value const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__Dimension, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DimensionConnectivityMap___setitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__Dimension, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_bgsched__Block__Connectivity__Value, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DimensionConnectivityMap___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DimensionConnectivityMap___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::__setitem__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::__setitem__(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_asdict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_asdict",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_asdict" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (PyObject *)std_map_Sl_bgsched_Dimension_Sc_bgsched_Block_Connectivity_Value_Sg__asdict(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimensionConnectivityMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DimensionConnectivityMap")) SWIG_fail;
  {
    try{
      result = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *)new std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimensionConnectivityMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DimensionConnectivityMap",&obj0)) SWIG_fail;
  {
    std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > *ptr = (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DimensionConnectivityMap" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DimensionConnectivityMap" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *)new std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DimensionConnectivityMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DimensionConnectivityMap__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_bgsched__Dimension_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DimensionConnectivityMap__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DimensionConnectivityMap__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DimensionConnectivityMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::map(std::less< bgsched::Dimension > const &)\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::map()\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::map(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_empty" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (bool)((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_size" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = ((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_clear" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_swap" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_swap" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_swap" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_get_allocator" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = ((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::allocator_type(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_begin" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_end" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_rbegin" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DimensionConnectivityMap_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_rend" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_erase" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_erase" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_erase" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = (arg1)->erase((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_count" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_count" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_count" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = ((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > const *)arg1)->count((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_erase" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DimensionConnectivityMap_erase" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DimensionConnectivityMap_erase" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator""'");
    }
  }
  {
    try{
      (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator arg2 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DimensionConnectivityMap_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_erase" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DimensionConnectivityMap_erase" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DimensionConnectivityMap_erase" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DimensionConnectivityMap_erase" "', argument " "3"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DimensionConnectivityMap_erase" "', argument " "3"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator""'");
    }
  }
  {
    try{
      (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_bgsched__Dimension, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DimensionConnectivityMap_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DimensionConnectivityMap_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DimensionConnectivityMap_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DimensionConnectivityMap_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::erase(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::erase(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator)\n"
    "    std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::erase(std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator,std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_find" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_find" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_find" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = (arg1)->find((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_lower_bound" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_lower_bound" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_lower_bound" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = (arg1)->lower_bound((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DimensionConnectivityMap_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DimensionConnectivityMap_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DimensionConnectivityMap_upper_bound" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_bgsched__Dimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DimensionConnectivityMap_upper_bound" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DimensionConnectivityMap_upper_bound" "', argument " "2"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type * >(argp2);
  {
    try{
      result = (arg1)->upper_bound((std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DimensionConnectivityMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *arg1 = (std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DimensionConnectivityMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DimensionConnectivityMap" "', argument " "1"" of type '" "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DimensionConnectivityMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      try {
        result = std_vector_Sl_std_string_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try{
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___setslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StringVector___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___setitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    try{
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      try {
        std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StringVector")) SWIG_fail;
  {
    try{
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringVector",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try{
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = ((std::vector< std::string > const *)arg1)->size();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      (arg1)->clear();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  {
    try{
      (arg1)->swap(*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = ((std::vector< std::string > const *)arg1)->get_allocator();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (arg1)->begin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (arg1)->end();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (arg1)->rbegin();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (arg1)->rend();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StringVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    try{
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      (arg1)->pop_back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try{
      (arg1)->resize(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    try{
      result = (arg1)->erase(arg2,arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StringVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_StringVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try{
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StringVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try{
      result = (arg1)->insert(arg2,(std::vector< std::string >::value_type const &)*arg3);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StringVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try{
      (arg1)->insert(arg2,arg3,(std::vector< std::string >::value_type const &)*arg4);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'StringVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StringVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    try{
      (arg1)->reserve(arg2);
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StringVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StringVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    try{
      delete arg1;
    }
    catch(std::exception &e){
      SWIG_exception(SWIG_RuntimeError, e.what());
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SortOrder", _wrap_new_SortOrder, METH_VARARGS, NULL},
	 { (char *)"delete_SortOrder", _wrap_delete_SortOrder, METH_VARARGS, NULL},
	 { (char *)"SortOrder_swigregister", SortOrder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Dimension", _wrap_new_Dimension, METH_VARARGS, NULL},
	 { (char *)"Dimension___str__", _wrap_Dimension___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Dimension", _wrap_delete_Dimension, METH_VARARGS, NULL},
	 { (char *)"Dimension_swigregister", Dimension_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Coordinates", _wrap_new_Coordinates, METH_VARARGS, NULL},
	 { (char *)"Coordinates___eq__", _wrap_Coordinates___eq__, METH_VARARGS, NULL},
	 { (char *)"Coordinates___ne__", _wrap_Coordinates___ne__, METH_VARARGS, NULL},
	 { (char *)"Coordinates___le__", _wrap_Coordinates___le__, METH_VARARGS, NULL},
	 { (char *)"Coordinates___ge__", _wrap_Coordinates___ge__, METH_VARARGS, NULL},
	 { (char *)"Coordinates___getitem__", _wrap_Coordinates___getitem__, METH_VARARGS, NULL},
	 { (char *)"Coordinates___assign__", _wrap_Coordinates___assign__, METH_VARARGS, NULL},
	 { (char *)"Coordinates___str__", _wrap_Coordinates___str__, METH_VARARGS, NULL},
	 { (char *)"delete_Coordinates", _wrap_delete_Coordinates, METH_VARARGS, NULL},
	 { (char *)"Coordinates_swigregister", Coordinates_swigregister, METH_VARARGS, NULL},
	 { (char *)"Job_getId", _wrap_Job_getId, METH_VARARGS, NULL},
	 { (char *)"Job_getComputeBlockName", _wrap_Job_getComputeBlockName, METH_VARARGS, NULL},
	 { (char *)"Job_getComputeBlockCreationId", _wrap_Job_getComputeBlockCreationId, METH_VARARGS, NULL},
	 { (char *)"Job_getStatus", _wrap_Job_getStatus, METH_VARARGS, NULL},
	 { (char *)"Job_getUser", _wrap_Job_getUser, METH_VARARGS, NULL},
	 { (char *)"Job_getExecutable", _wrap_Job_getExecutable, METH_VARARGS, NULL},
	 { (char *)"Job_getWorkingDirectory", _wrap_Job_getWorkingDirectory, METH_VARARGS, NULL},
	 { (char *)"Job_getErrorText", _wrap_Job_getErrorText, METH_VARARGS, NULL},
	 { (char *)"Job_getArgs", _wrap_Job_getArgs, METH_VARARGS, NULL},
	 { (char *)"Job_getEnvs", _wrap_Job_getEnvs, METH_VARARGS, NULL},
	 { (char *)"Job_getStartTime", _wrap_Job_getStartTime, METH_VARARGS, NULL},
	 { (char *)"Job_getEndTime", _wrap_Job_getEndTime, METH_VARARGS, NULL},
	 { (char *)"Job_getRunTime", _wrap_Job_getRunTime, METH_VARARGS, NULL},
	 { (char *)"Job_isInHistory", _wrap_Job_isInHistory, METH_VARARGS, NULL},
	 { (char *)"Job_getComputeNodesUsed", _wrap_Job_getComputeNodesUsed, METH_VARARGS, NULL},
	 { (char *)"Job_getSequenceId", _wrap_Job_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"Job_getExitStatus", _wrap_Job_getExitStatus, METH_VARARGS, NULL},
	 { (char *)"Job_getCorner", _wrap_Job_getCorner, METH_VARARGS, NULL},
	 { (char *)"Job_getShape", _wrap_Job_getShape, METH_VARARGS, NULL},
	 { (char *)"Job_getRanksPerNode", _wrap_Job_getRanksPerNode, METH_VARARGS, NULL},
	 { (char *)"Job_getNP", _wrap_Job_getNP, METH_VARARGS, NULL},
	 { (char *)"Job_getSchedulerData", _wrap_Job_getSchedulerData, METH_VARARGS, NULL},
	 { (char *)"Job_getMapping", _wrap_Job_getMapping, METH_VARARGS, NULL},
	 { (char *)"Job_getClientInfo", _wrap_Job_getClientInfo, METH_VARARGS, NULL},
	 { (char *)"new_Job", _wrap_new_Job, METH_VARARGS, NULL},
	 { (char *)"Job_getStatusValue", _wrap_Job_getStatusValue, METH_VARARGS, NULL},
	 { (char *)"Job_getInUseString", _wrap_Job_getInUseString, METH_VARARGS, NULL},
	 { (char *)"delete_Job", _wrap_delete_Job, METH_VARARGS, NULL},
	 { (char *)"Job_swigregister", Job_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JobSort_Field", _wrap_new_JobSort_Field, METH_VARARGS, NULL},
	 { (char *)"delete_JobSort_Field", _wrap_delete_JobSort_Field, METH_VARARGS, NULL},
	 { (char *)"JobSort_Field_swigregister", JobSort_Field_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JobSort", _wrap_new_JobSort, METH_VARARGS, NULL},
	 { (char *)"JobSort_isSorted", _wrap_JobSort_isSorted, METH_VARARGS, NULL},
	 { (char *)"JobSort_getField", _wrap_JobSort_getField, METH_VARARGS, NULL},
	 { (char *)"JobSort_getSortOrder", _wrap_JobSort_getSortOrder, METH_VARARGS, NULL},
	 { (char *)"JobSort_setSort", _wrap_JobSort_setSort, METH_VARARGS, NULL},
	 { (char *)"JobSort_getPimpl", _wrap_JobSort_getPimpl, METH_VARARGS, NULL},
	 { (char *)"delete_JobSort", _wrap_delete_JobSort, METH_VARARGS, NULL},
	 { (char *)"JobSort_swigregister", JobSort_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JobType", _wrap_new_JobType, METH_VARARGS, NULL},
	 { (char *)"delete_JobType", _wrap_delete_JobType, METH_VARARGS, NULL},
	 { (char *)"JobType_swigregister", JobType_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_JobFilter", _wrap_new_JobFilter, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setJobType", _wrap_JobFilter_setJobType, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getJobType", _wrap_JobFilter_getJobType, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setJobId", _wrap_JobFilter_setJobId, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getJobId", _wrap_JobFilter_getJobId, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setSchedulerData", _wrap_JobFilter_setSchedulerData, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getSchedulerData", _wrap_JobFilter_getSchedulerData, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setComputeBlockName", _wrap_JobFilter_setComputeBlockName, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getComputeBlockName", _wrap_JobFilter_getComputeBlockName, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setUser", _wrap_JobFilter_setUser, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getUser", _wrap_JobFilter_getUser, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setExecutable", _wrap_JobFilter_setExecutable, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getExecutable", _wrap_JobFilter_getExecutable, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setStatuses", _wrap_JobFilter_setStatuses, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getStatuses", _wrap_JobFilter_getStatuses, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setExitStatus", _wrap_JobFilter_setExitStatus, METH_VARARGS, NULL},
	 { (char *)"JobFilter_isExitStatusSet", _wrap_JobFilter_isExitStatusSet, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getExitStatus", _wrap_JobFilter_getExitStatus, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setStartTimeInterval", _wrap_JobFilter_setStartTimeInterval, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getStartTimeInterval", _wrap_JobFilter_getStartTimeInterval, METH_VARARGS, NULL},
	 { (char *)"JobFilter_setEndTimeInterval", _wrap_JobFilter_setEndTimeInterval, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getEndTimeInterval", _wrap_JobFilter_getEndTimeInterval, METH_VARARGS, NULL},
	 { (char *)"JobFilter_getPimpl", _wrap_JobFilter_getPimpl, METH_VARARGS, NULL},
	 { (char *)"delete_JobFilter", _wrap_delete_JobFilter, METH_VARARGS, NULL},
	 { (char *)"JobFilter_swigregister", JobFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"Hardware_toString", _wrap_Hardware_toString, METH_VARARGS, NULL},
	 { (char *)"Hardware_getState", _wrap_Hardware_getState, METH_VARARGS, NULL},
	 { (char *)"Hardware_getLocation", _wrap_Hardware_getLocation, METH_VARARGS, NULL},
	 { (char *)"delete_Hardware", _wrap_delete_Hardware, METH_VARARGS, NULL},
	 { (char *)"Hardware_getPimpl", _wrap_Hardware_getPimpl, METH_VARARGS, NULL},
	 { (char *)"Hardware_getStateValue", _wrap_Hardware_getStateValue, METH_VARARGS, NULL},
	 { (char *)"Hardware_getStateString", _wrap_Hardware_getStateString, METH_VARARGS, NULL},
	 { (char *)"Hardware___str__", _wrap_Hardware___str__, METH_VARARGS, NULL},
	 { (char *)"Hardware_swigregister", Hardware_swigregister, METH_VARARGS, NULL},
	 { (char *)"Node_getSequenceId", _wrap_Node_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"new_Node", _wrap_new_Node, METH_VARARGS, NULL},
	 { (char *)"delete_Node", _wrap_delete_Node, METH_VARARGS, NULL},
	 { (char *)"Node_swigregister", Node_swigregister, METH_VARARGS, NULL},
	 { (char *)"Shape_getMidplaneSize", _wrap_Shape_getMidplaneSize, METH_VARARGS, NULL},
	 { (char *)"Shape_getNodeSize", _wrap_Shape_getNodeSize, METH_VARARGS, NULL},
	 { (char *)"Shape_getMidplaneCount", _wrap_Shape_getMidplaneCount, METH_VARARGS, NULL},
	 { (char *)"Shape_getNodeCount", _wrap_Shape_getNodeCount, METH_VARARGS, NULL},
	 { (char *)"Shape_isSmall", _wrap_Shape_isSmall, METH_VARARGS, NULL},
	 { (char *)"Shape_isLarge", _wrap_Shape_isLarge, METH_VARARGS, NULL},
	 { (char *)"Shape_isFull", _wrap_Shape_isFull, METH_VARARGS, NULL},
	 { (char *)"Shape_getPimpl", _wrap_Shape_getPimpl, METH_VARARGS, NULL},
	 { (char *)"new_Shape", _wrap_new_Shape, METH_VARARGS, NULL},
	 { (char *)"Shape___eq__", _wrap_Shape___eq__, METH_VARARGS, NULL},
	 { (char *)"Shape___ne__", _wrap_Shape___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_Shape", _wrap_delete_Shape, METH_VARARGS, NULL},
	 { (char *)"Shape_swigregister", Shape_swigregister, METH_VARARGS, NULL},
	 { (char *)"Cable_getDestinationLocation", _wrap_Cable_getDestinationLocation, METH_VARARGS, NULL},
	 { (char *)"Cable_getSequenceId", _wrap_Cable_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"new_Cable", _wrap_new_Cable, METH_VARARGS, NULL},
	 { (char *)"delete_Cable", _wrap_delete_Cable, METH_VARARGS, NULL},
	 { (char *)"Cable_swigregister", Cable_swigregister, METH_VARARGS, NULL},
	 { (char *)"SwitchSettings_getLocation", _wrap_SwitchSettings_getLocation, METH_VARARGS, NULL},
	 { (char *)"SwitchSettings_getPortsSetting", _wrap_SwitchSettings_getPortsSetting, METH_VARARGS, NULL},
	 { (char *)"SwitchSettings_isIncludedMidplane", _wrap_SwitchSettings_isIncludedMidplane, METH_VARARGS, NULL},
	 { (char *)"SwitchSettings_getComputeBlockName", _wrap_SwitchSettings_getComputeBlockName, METH_VARARGS, NULL},
	 { (char *)"SwitchSettings_isPassthrough", _wrap_SwitchSettings_isPassthrough, METH_VARARGS, NULL},
	 { (char *)"new_SwitchSettings", _wrap_new_SwitchSettings, METH_VARARGS, NULL},
	 { (char *)"delete_SwitchSettings", _wrap_delete_SwitchSettings, METH_VARARGS, NULL},
	 { (char *)"SwitchSettings_swigregister", SwitchSettings_swigregister, METH_VARARGS, NULL},
	 { (char *)"Switch_getInUse", _wrap_Switch_getInUse, METH_VARARGS, NULL},
	 { (char *)"Switch_getSequenceId", _wrap_Switch_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"Switch_getSwitchSettings", _wrap_Switch_getSwitchSettings, METH_VARARGS, NULL},
	 { (char *)"Switch_getCable", _wrap_Switch_getCable, METH_VARARGS, NULL},
	 { (char *)"Switch_getMidplaneCoordinates", _wrap_Switch_getMidplaneCoordinates, METH_VARARGS, NULL},
	 { (char *)"Switch_getMidplaneLocation", _wrap_Switch_getMidplaneLocation, METH_VARARGS, NULL},
	 { (char *)"new_Switch", _wrap_new_Switch, METH_VARARGS, NULL},
	 { (char *)"Switch_getInUseValue", _wrap_Switch_getInUseValue, METH_VARARGS, NULL},
	 { (char *)"Switch_getInUseString", _wrap_Switch_getInUseString, METH_VARARGS, NULL},
	 { (char *)"delete_Switch", _wrap_delete_Switch, METH_VARARGS, NULL},
	 { (char *)"Switch_swigregister", Switch_swigregister, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getSequenceId", _wrap_NodeBoard_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getQuadrant", _wrap_NodeBoard_getQuadrant, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_isInUse", _wrap_NodeBoard_isInUse, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getComputeBlockName", _wrap_NodeBoard_getComputeBlockName, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getMidplaneCoordinates", _wrap_NodeBoard_getMidplaneCoordinates, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getMidplaneLocation", _wrap_NodeBoard_getMidplaneLocation, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getAvailableNodeCount", _wrap_NodeBoard_getAvailableNodeCount, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_isMetaState", _wrap_NodeBoard_isMetaState, METH_VARARGS, NULL},
	 { (char *)"new_NodeBoard", _wrap_new_NodeBoard, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getQuadrantValue", _wrap_NodeBoard_getQuadrantValue, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_getQuadrantString", _wrap_NodeBoard_getQuadrantString, METH_VARARGS, NULL},
	 { (char *)"delete_NodeBoard", _wrap_delete_NodeBoard, METH_VARARGS, NULL},
	 { (char *)"NodeBoard_swigregister", NodeBoard_swigregister, METH_VARARGS, NULL},
	 { (char *)"Midplane_getSequenceId", _wrap_Midplane_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"Midplane_getComputeNodeMemory", _wrap_Midplane_getComputeNodeMemory, METH_VARARGS, NULL},
	 { (char *)"Midplane_getAvailableNodeBoardCount", _wrap_Midplane_getAvailableNodeBoardCount, METH_VARARGS, NULL},
	 { (char *)"Midplane_getNodeBoard", _wrap_Midplane_getNodeBoard, METH_VARARGS, NULL},
	 { (char *)"Midplane_getSwitch", _wrap_Midplane_getSwitch, METH_VARARGS, NULL},
	 { (char *)"Midplane_getCoordinates", _wrap_Midplane_getCoordinates, METH_VARARGS, NULL},
	 { (char *)"Midplane_getInUse", _wrap_Midplane_getInUse, METH_VARARGS, NULL},
	 { (char *)"Midplane_getComputeBlockName", _wrap_Midplane_getComputeBlockName, METH_VARARGS, NULL},
	 { (char *)"new_Midplane", _wrap_new_Midplane, METH_VARARGS, NULL},
	 { (char *)"Midplane_getPimpl", _wrap_Midplane_getPimpl, METH_VARARGS, NULL},
	 { (char *)"Midplane_getInUseValue", _wrap_Midplane_getInUseValue, METH_VARARGS, NULL},
	 { (char *)"Midplane_getInUseString", _wrap_Midplane_getInUseString, METH_VARARGS, NULL},
	 { (char *)"delete_Midplane", _wrap_delete_Midplane, METH_VARARGS, NULL},
	 { (char *)"Midplane_swigregister", Midplane_swigregister, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_getState", _wrap_ComputeHardware_getState, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_getMachineSize", _wrap_ComputeHardware_getMachineSize, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_getMidplaneSize", _wrap_ComputeHardware_getMidplaneSize, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_getMachineRows", _wrap_ComputeHardware_getMachineRows, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_getMachineColumns", _wrap_ComputeHardware_getMachineColumns, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_getMidplane", _wrap_ComputeHardware_getMidplane, METH_VARARGS, NULL},
	 { (char *)"new_ComputeHardware", _wrap_new_ComputeHardware, METH_VARARGS, NULL},
	 { (char *)"delete_ComputeHardware", _wrap_delete_ComputeHardware, METH_VARARGS, NULL},
	 { (char *)"ComputeHardware_swigregister", ComputeHardware_swigregister, METH_VARARGS, NULL},
	 { (char *)"DatabaseErrors_toString", _wrap_DatabaseErrors_toString, METH_VARARGS, NULL},
	 { (char *)"DatabaseErrors_fromDatabaseStatus", _wrap_DatabaseErrors_fromDatabaseStatus, METH_VARARGS, NULL},
	 { (char *)"new_DatabaseErrors", _wrap_new_DatabaseErrors, METH_VARARGS, NULL},
	 { (char *)"delete_DatabaseErrors", _wrap_delete_DatabaseErrors, METH_VARARGS, NULL},
	 { (char *)"DatabaseErrors_swigregister", DatabaseErrors_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BlockSort_Field", _wrap_new_BlockSort_Field, METH_VARARGS, NULL},
	 { (char *)"delete_BlockSort_Field", _wrap_delete_BlockSort_Field, METH_VARARGS, NULL},
	 { (char *)"BlockSort_Field_swigregister", BlockSort_Field_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BlockSort", _wrap_new_BlockSort, METH_VARARGS, NULL},
	 { (char *)"BlockSort_isSorted", _wrap_BlockSort_isSorted, METH_VARARGS, NULL},
	 { (char *)"BlockSort_getField", _wrap_BlockSort_getField, METH_VARARGS, NULL},
	 { (char *)"BlockSort_getSortOrder", _wrap_BlockSort_getSortOrder, METH_VARARGS, NULL},
	 { (char *)"BlockSort_setSort", _wrap_BlockSort_setSort, METH_VARARGS, NULL},
	 { (char *)"BlockSort_getPimpl", _wrap_BlockSort_getPimpl, METH_VARARGS, NULL},
	 { (char *)"delete_BlockSort", _wrap_delete_BlockSort, METH_VARARGS, NULL},
	 { (char *)"BlockSort_swigregister", BlockSort_swigregister, METH_VARARGS, NULL},
	 { (char *)"IOLink_getDestinationLocation", _wrap_IOLink_getDestinationLocation, METH_VARARGS, NULL},
	 { (char *)"IOLink_getSequenceId", _wrap_IOLink_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"new_IOLink", _wrap_new_IOLink, METH_VARARGS, NULL},
	 { (char *)"delete_IOLink", _wrap_delete_IOLink, METH_VARARGS, NULL},
	 { (char *)"IOLink_swigregister", IOLink_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Connectivity", _wrap_new_Connectivity, METH_VARARGS, NULL},
	 { (char *)"delete_Connectivity", _wrap_delete_Connectivity, METH_VARARGS, NULL},
	 { (char *)"Connectivity_swigregister", Connectivity_swigregister, METH_VARARGS, NULL},
	 { (char *)"Block_create", _wrap_Block_create, METH_VARARGS, NULL},
	 { (char *)"Block_isIOConnected", _wrap_Block_isIOConnected, METH_VARARGS, NULL},
	 { (char *)"Block_checkIOLinks", _wrap_Block_checkIOLinks, METH_VARARGS, NULL},
	 { (char *)"Block_checkIOLinksSummary", _wrap_Block_checkIOLinksSummary, METH_VARARGS, NULL},
	 { (char *)"Block_initiateBoot", _wrap_Block_initiateBoot, METH_VARARGS, NULL},
	 { (char *)"Block_initiateFree", _wrap_Block_initiateFree, METH_VARARGS, NULL},
	 { (char *)"Block_remove", _wrap_Block_remove, METH_VARARGS, NULL},
	 { (char *)"Block_addUser", _wrap_Block_addUser, METH_VARARGS, NULL},
	 { (char *)"Block_removeUser", _wrap_Block_removeUser, METH_VARARGS, NULL},
	 { (char *)"Block_isAuthorized", _wrap_Block_isAuthorized, METH_VARARGS, NULL},
	 { (char *)"Block_getUsers", _wrap_Block_getUsers, METH_VARARGS, NULL},
	 { (char *)"Block_add", _wrap_Block_add, METH_VARARGS, NULL},
	 { (char *)"Block_update", _wrap_Block_update, METH_VARARGS, NULL},
	 { (char *)"Block_toString", _wrap_Block_toString, METH_VARARGS, NULL},
	 { (char *)"Block_isLarge", _wrap_Block_isLarge, METH_VARARGS, NULL},
	 { (char *)"Block_isSmall", _wrap_Block_isSmall, METH_VARARGS, NULL},
	 { (char *)"Block_getDimensionSize", _wrap_Block_getDimensionSize, METH_VARARGS, NULL},
	 { (char *)"Block_isTorus", _wrap_Block_isTorus, METH_VARARGS, NULL},
	 { (char *)"Block_isMesh", _wrap_Block_isMesh, METH_VARARGS, NULL},
	 { (char *)"Block_getName", _wrap_Block_getName, METH_VARARGS, NULL},
	 { (char *)"Block_getCreationId", _wrap_Block_getCreationId, METH_VARARGS, NULL},
	 { (char *)"Block_getDescription", _wrap_Block_getDescription, METH_VARARGS, NULL},
	 { (char *)"Block_getOwner", _wrap_Block_getOwner, METH_VARARGS, NULL},
	 { (char *)"Block_getUser", _wrap_Block_getUser, METH_VARARGS, NULL},
	 { (char *)"Block_getBootOptions", _wrap_Block_getBootOptions, METH_VARARGS, NULL},
	 { (char *)"Block_getMicroLoaderImage", _wrap_Block_getMicroLoaderImage, METH_VARARGS, NULL},
	 { (char *)"Block_getNodeConfiguration", _wrap_Block_getNodeConfiguration, METH_VARARGS, NULL},
	 { (char *)"Block_getSequenceId", _wrap_Block_getSequenceId, METH_VARARGS, NULL},
	 { (char *)"Block_getStatus", _wrap_Block_getStatus, METH_VARARGS, NULL},
	 { (char *)"Block_getComputeNodeCount", _wrap_Block_getComputeNodeCount, METH_VARARGS, NULL},
	 { (char *)"Block_getOptions", _wrap_Block_getOptions, METH_VARARGS, NULL},
	 { (char *)"Block_getJobIds", _wrap_Block_getJobIds, METH_VARARGS, NULL},
	 { (char *)"Block_getMidplanes", _wrap_Block_getMidplanes, METH_VARARGS, NULL},
	 { (char *)"Block_getNodeBoards", _wrap_Block_getNodeBoards, METH_VARARGS, NULL},
	 { (char *)"Block_getPassthroughMidplanes", _wrap_Block_getPassthroughMidplanes, METH_VARARGS, NULL},
	 { (char *)"Block_setName", _wrap_Block_setName, METH_VARARGS, NULL},
	 { (char *)"Block_setDescription", _wrap_Block_setDescription, METH_VARARGS, NULL},
	 { (char *)"Block_setOptions", _wrap_Block_setOptions, METH_VARARGS, NULL},
	 { (char *)"Block_setBootOptions", _wrap_Block_setBootOptions, METH_VARARGS, NULL},
	 { (char *)"Block_setMicroLoaderImage", _wrap_Block_setMicroLoaderImage, METH_VARARGS, NULL},
	 { (char *)"Block_setNodeConfiguration", _wrap_Block_setNodeConfiguration, METH_VARARGS, NULL},
	 { (char *)"Block_getPimpl", _wrap_Block_getPimpl, METH_VARARGS, NULL},
	 { (char *)"new_Block", _wrap_new_Block, METH_VARARGS, NULL},
	 { (char *)"Block_getStatusValue", _wrap_Block_getStatusValue, METH_VARARGS, NULL},
	 { (char *)"Block_getStatusString", _wrap_Block_getStatusString, METH_VARARGS, NULL},
	 { (char *)"delete_Block", _wrap_delete_Block, METH_VARARGS, NULL},
	 { (char *)"Block_swigregister", Block_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BlockSize", _wrap_new_BlockSize, METH_VARARGS, NULL},
	 { (char *)"delete_BlockSize", _wrap_delete_BlockSize, METH_VARARGS, NULL},
	 { (char *)"BlockSize_swigregister", BlockSize_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BlockFilter", _wrap_new_BlockFilter, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setStatuses", _wrap_BlockFilter_setStatuses, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setExtendedInfo", _wrap_BlockFilter_setExtendedInfo, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setIncludeJobs", _wrap_BlockFilter_setIncludeJobs, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setName", _wrap_BlockFilter_setName, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setOwner", _wrap_BlockFilter_setOwner, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setUser", _wrap_BlockFilter_setUser, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_setSize", _wrap_BlockFilter_setSize, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getStatuses", _wrap_BlockFilter_getStatuses, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getName", _wrap_BlockFilter_getName, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getOwner", _wrap_BlockFilter_getOwner, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getUser", _wrap_BlockFilter_getUser, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getExtendedInfo", _wrap_BlockFilter_getExtendedInfo, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getIncludeJobs", _wrap_BlockFilter_getIncludeJobs, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getSize", _wrap_BlockFilter_getSize, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_getPimpl", _wrap_BlockFilter_getPimpl, METH_VARARGS, NULL},
	 { (char *)"delete_BlockFilter", _wrap_delete_BlockFilter, METH_VARARGS, NULL},
	 { (char *)"BlockFilter_swigregister", BlockFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_Errors_toString", _wrap_SchedUtil_Errors_toString, METH_VARARGS, NULL},
	 { (char *)"new_SchedUtil_Errors", _wrap_new_SchedUtil_Errors, METH_VARARGS, NULL},
	 { (char *)"delete_SchedUtil_Errors", _wrap_delete_SchedUtil_Errors, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_Errors_swigregister", SchedUtil_Errors_swigregister, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_createBlockName", _wrap_SchedUtil_createBlockName, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_iterateAll", _wrap_SchedUtil_iterateAll, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_iterateAllMidplanes", _wrap_SchedUtil_iterateAllMidplanes, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_iterateMidplanes", _wrap_SchedUtil_iterateMidplanes, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_iterate", _wrap_SchedUtil_iterate, METH_VARARGS, NULL},
	 { (char *)"new_SchedUtil", _wrap_new_SchedUtil, METH_VARARGS, NULL},
	 { (char *)"delete_SchedUtil", _wrap_delete_SchedUtil, METH_VARARGS, NULL},
	 { (char *)"SchedUtil_swigregister", SchedUtil_swigregister, METH_VARARGS, NULL},
	 { (char *)"InitializationErrors_toString", _wrap_InitializationErrors_toString, METH_VARARGS, NULL},
	 { (char *)"new_InitializationErrors", _wrap_new_InitializationErrors, METH_VARARGS, NULL},
	 { (char *)"delete_InitializationErrors", _wrap_delete_InitializationErrors, METH_VARARGS, NULL},
	 { (char *)"InitializationErrors_swigregister", InitializationErrors_swigregister, METH_VARARGS, NULL},
	 { (char *)"InternalErrors_toString", _wrap_InternalErrors_toString, METH_VARARGS, NULL},
	 { (char *)"new_InternalErrors", _wrap_new_InternalErrors, METH_VARARGS, NULL},
	 { (char *)"delete_InternalErrors", _wrap_delete_InternalErrors, METH_VARARGS, NULL},
	 { (char *)"InternalErrors_swigregister", InternalErrors_swigregister, METH_VARARGS, NULL},
	 { (char *)"InputErrors_toString", _wrap_InputErrors_toString, METH_VARARGS, NULL},
	 { (char *)"new_InputErrors", _wrap_new_InputErrors, METH_VARARGS, NULL},
	 { (char *)"delete_InputErrors", _wrap_delete_InputErrors, METH_VARARGS, NULL},
	 { (char *)"InputErrors_swigregister", InputErrors_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeInterval", _wrap_new_TimeInterval, METH_VARARGS, NULL},
	 { (char *)"TimeInterval___eq__", _wrap_TimeInterval___eq__, METH_VARARGS, NULL},
	 { (char *)"TimeInterval___ne__", _wrap_TimeInterval___ne__, METH_VARARGS, NULL},
	 { (char *)"TimeInterval_getStart", _wrap_TimeInterval_getStart, METH_VARARGS, NULL},
	 { (char *)"TimeInterval_getEnd", _wrap_TimeInterval_getEnd, METH_VARARGS, NULL},
	 { (char *)"delete_TimeInterval", _wrap_delete_TimeInterval, METH_VARARGS, NULL},
	 { (char *)"TimeInterval_swigregister", TimeInterval_swigregister, METH_VARARGS, NULL},
	 { (char *)"RuntimeErrors_toString", _wrap_RuntimeErrors_toString, METH_VARARGS, NULL},
	 { (char *)"new_RuntimeErrors", _wrap_new_RuntimeErrors, METH_VARARGS, NULL},
	 { (char *)"delete_RuntimeErrors", _wrap_delete_RuntimeErrors, METH_VARARGS, NULL},
	 { (char *)"RuntimeErrors_swigregister", RuntimeErrors_swigregister, METH_VARARGS, NULL},
	 { (char *)"AllocatorEventListener_handleAllocate", _wrap_AllocatorEventListener_handleAllocate, METH_VARARGS, NULL},
	 { (char *)"AllocatorEventListener_handleDeallocate", _wrap_AllocatorEventListener_handleDeallocate, METH_VARARGS, NULL},
	 { (char *)"delete_AllocatorEventListener", _wrap_delete_AllocatorEventListener, METH_VARARGS, NULL},
	 { (char *)"new_AllocatorEventListener", _wrap_new_AllocatorEventListener, METH_VARARGS, NULL},
	 { (char *)"AllocatorEventListener_swigregister", AllocatorEventListener_swigregister, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_getShape", _wrap_ResourceSpec_getShape, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_canRotateShape", _wrap_ResourceSpec_canRotateShape, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_canUsePassthrough", _wrap_ResourceSpec_canUsePassthrough, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_getNodeCount", _wrap_ResourceSpec_getNodeCount, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_getConnectivitySpec", _wrap_ResourceSpec_getConnectivitySpec, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_setConnectivitySpec", _wrap_ResourceSpec_setConnectivitySpec, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_getDrainedMidplanes", _wrap_ResourceSpec_getDrainedMidplanes, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_addDrainedMidplane", _wrap_ResourceSpec_addDrainedMidplane, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_removeDrainedMidplane", _wrap_ResourceSpec_removeDrainedMidplane, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_getExtendedOptions", _wrap_ResourceSpec_getExtendedOptions, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_addExtendedOption", _wrap_ResourceSpec_addExtendedOption, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_removeExtendedOption", _wrap_ResourceSpec_removeExtendedOption, METH_VARARGS, NULL},
	 { (char *)"new_ResourceSpec", _wrap_new_ResourceSpec, METH_VARARGS, NULL},
	 { (char *)"delete_ResourceSpec", _wrap_delete_ResourceSpec, METH_VARARGS, NULL},
	 { (char *)"ResourceSpec_swigregister", ResourceSpec_swigregister, METH_VARARGS, NULL},
	 { (char *)"Midplanes_get", _wrap_Midplanes_get, METH_VARARGS, NULL},
	 { (char *)"Midplanes_getMachineSize", _wrap_Midplanes_getMachineSize, METH_VARARGS, NULL},
	 { (char *)"new_Midplanes", _wrap_new_Midplanes, METH_VARARGS, NULL},
	 { (char *)"delete_Midplanes", _wrap_delete_Midplanes, METH_VARARGS, NULL},
	 { (char *)"Midplanes_swigregister", Midplanes_swigregister, METH_VARARGS, NULL},
	 { (char *)"Model_allocate", _wrap_Model_allocate, METH_VARARGS, NULL},
	 { (char *)"Model_deallocate", _wrap_Model_deallocate, METH_VARARGS, NULL},
	 { (char *)"Model_addBlock", _wrap_Model_addBlock, METH_VARARGS, NULL},
	 { (char *)"Model_removeBlock", _wrap_Model_removeBlock, METH_VARARGS, NULL},
	 { (char *)"Model_getBlock", _wrap_Model_getBlock, METH_VARARGS, NULL},
	 { (char *)"Model_getBlockStatus", _wrap_Model_getBlockStatus, METH_VARARGS, NULL},
	 { (char *)"Model_getMidplanes", _wrap_Model_getMidplanes, METH_VARARGS, NULL},
	 { (char *)"Model_getMidplane", _wrap_Model_getMidplane, METH_VARARGS, NULL},
	 { (char *)"Model_getDrainedMidplanes", _wrap_Model_getDrainedMidplanes, METH_VARARGS, NULL},
	 { (char *)"Model_addDrainedMidplane", _wrap_Model_addDrainedMidplane, METH_VARARGS, NULL},
	 { (char *)"Model_removeDrainedMidplane", _wrap_Model_removeDrainedMidplane, METH_VARARGS, NULL},
	 { (char *)"Model_syncState", _wrap_Model_syncState, METH_VARARGS, NULL},
	 { (char *)"Model_dump", _wrap_Model_dump, METH_VARARGS, NULL},
	 { (char *)"delete_Model", _wrap_delete_Model, METH_VARARGS, NULL},
	 { (char *)"Model_getPimpl", _wrap_Model_getPimpl, METH_VARARGS, NULL},
	 { (char *)"Model_swigregister", Model_swigregister, METH_VARARGS, NULL},
	 { (char *)"LiveModel_allocate", _wrap_LiveModel_allocate, METH_VARARGS, NULL},
	 { (char *)"LiveModel_deallocate", _wrap_LiveModel_deallocate, METH_VARARGS, NULL},
	 { (char *)"LiveModel_addBlock", _wrap_LiveModel_addBlock, METH_VARARGS, NULL},
	 { (char *)"LiveModel_removeBlock", _wrap_LiveModel_removeBlock, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getBlock", _wrap_LiveModel_getBlock, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getBlockStatus", _wrap_LiveModel_getBlockStatus, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getFilteredBlocks", _wrap_LiveModel_getFilteredBlocks, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getMidplanes", _wrap_LiveModel_getMidplanes, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getMidplane", _wrap_LiveModel_getMidplane, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getDrainedMidplanes", _wrap_LiveModel_getDrainedMidplanes, METH_VARARGS, NULL},
	 { (char *)"LiveModel_addDrainedMidplane", _wrap_LiveModel_addDrainedMidplane, METH_VARARGS, NULL},
	 { (char *)"LiveModel_removeDrainedMidplane", _wrap_LiveModel_removeDrainedMidplane, METH_VARARGS, NULL},
	 { (char *)"LiveModel_syncState", _wrap_LiveModel_syncState, METH_VARARGS, NULL},
	 { (char *)"LiveModel_dump", _wrap_LiveModel_dump, METH_VARARGS, NULL},
	 { (char *)"LiveModel_registerListener", _wrap_LiveModel_registerListener, METH_VARARGS, NULL},
	 { (char *)"LiveModel_notifyAllocated", _wrap_LiveModel_notifyAllocated, METH_VARARGS, NULL},
	 { (char *)"LiveModel_notifyDeallocated", _wrap_LiveModel_notifyDeallocated, METH_VARARGS, NULL},
	 { (char *)"new_LiveModel", _wrap_new_LiveModel, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getBlockStatusValue", _wrap_LiveModel_getBlockStatusValue, METH_VARARGS, NULL},
	 { (char *)"LiveModel_getBlockStatusString", _wrap_LiveModel_getBlockStatusString, METH_VARARGS, NULL},
	 { (char *)"delete_LiveModel", _wrap_delete_LiveModel, METH_VARARGS, NULL},
	 { (char *)"LiveModel_swigregister", LiveModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Allocator", _wrap_new_Allocator, METH_VARARGS, NULL},
	 { (char *)"delete_Allocator", _wrap_delete_Allocator, METH_VARARGS, NULL},
	 { (char *)"Allocator_getLiveModel", _wrap_Allocator_getLiveModel, METH_VARARGS, NULL},
	 { (char *)"Allocator_getPluginList", _wrap_Allocator_getPluginList, METH_VARARGS, NULL},
	 { (char *)"Allocator_getShapesForSize", _wrap_Allocator_getShapesForSize, METH_VARARGS, NULL},
	 { (char *)"Allocator_getShapes", _wrap_Allocator_getShapes, METH_VARARGS, NULL},
	 { (char *)"Allocator_getRotations", _wrap_Allocator_getRotations, METH_VARARGS, NULL},
	 { (char *)"Allocator_createMidplaneShape", _wrap_Allocator_createMidplaneShape, METH_VARARGS, NULL},
	 { (char *)"Allocator_createSmallShape", _wrap_Allocator_createSmallShape, METH_VARARGS, NULL},
	 { (char *)"Allocator_findBlockResources", _wrap_Allocator_findBlockResources, METH_VARARGS, NULL},
	 { (char *)"Allocator_prepare", _wrap_Allocator_prepare, METH_VARARGS, NULL},
	 { (char *)"Allocator_release", _wrap_Allocator_release, METH_VARARGS, NULL},
	 { (char *)"Allocator_dump", _wrap_Allocator_dump, METH_VARARGS, NULL},
	 { (char *)"Allocator_swigregister", Allocator_swigregister, METH_VARARGS, NULL},
	 { (char *)"init", _wrap_init, METH_VARARGS, NULL},
	 { (char *)"refreshConfiguration", _wrap_refreshConfiguration, METH_VARARGS, NULL},
	 { (char *)"getIOUsageLimit", _wrap_getIOUsageLimit, METH_VARARGS, NULL},
	 { (char *)"getComputeHardware", _wrap_getComputeHardware, METH_VARARGS, NULL},
	 { (char *)"getMachineSize", _wrap_getMachineSize, METH_VARARGS, NULL},
	 { (char *)"getMidplaneCoordinates", _wrap_getMidplaneCoordinates, METH_VARARGS, NULL},
	 { (char *)"getNodeMidplaneCoordinates", _wrap_getNodeMidplaneCoordinates, METH_VARARGS, NULL},
	 { (char *)"getNodeBoards", _wrap_getNodeBoards, METH_VARARGS, NULL},
	 { (char *)"getNodes", _wrap_getNodes, METH_VARARGS, NULL},
	 { (char *)"getMidplaneNodes", _wrap_getMidplaneNodes, METH_VARARGS, NULL},
	 { (char *)"getIOLinks", _wrap_getIOLinks, METH_VARARGS, NULL},
	 { (char *)"getBlocks", _wrap_getBlocks, METH_VARARGS, NULL},
	 { (char *)"getJobs", _wrap_getJobs, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_iterator", _wrap_NodeBoardPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___nonzero__", _wrap_NodeBoardPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___bool__", _wrap_NodeBoardPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___len__", _wrap_NodeBoardPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_pop", _wrap_NodeBoardPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___getslice__", _wrap_NodeBoardPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___setslice__", _wrap_NodeBoardPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___delslice__", _wrap_NodeBoardPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___delitem__", _wrap_NodeBoardPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___getitem__", _wrap_NodeBoardPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector___setitem__", _wrap_NodeBoardPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_append", _wrap_NodeBoardPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_empty", _wrap_NodeBoardPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_size", _wrap_NodeBoardPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_clear", _wrap_NodeBoardPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_swap", _wrap_NodeBoardPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_get_allocator", _wrap_NodeBoardPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_begin", _wrap_NodeBoardPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_end", _wrap_NodeBoardPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_rbegin", _wrap_NodeBoardPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_rend", _wrap_NodeBoardPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_pop_back", _wrap_NodeBoardPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_erase", _wrap_NodeBoardPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_NodeBoardPtrVector", _wrap_new_NodeBoardPtrVector, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_push_back", _wrap_NodeBoardPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_front", _wrap_NodeBoardPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_back", _wrap_NodeBoardPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_assign", _wrap_NodeBoardPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_resize", _wrap_NodeBoardPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_insert", _wrap_NodeBoardPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_reserve", _wrap_NodeBoardPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_capacity", _wrap_NodeBoardPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_NodeBoardPtrVector", _wrap_delete_NodeBoardPtrVector, METH_VARARGS, NULL},
	 { (char *)"NodeBoardPtrVector_swigregister", NodeBoardPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_iterator", _wrap_NodeBoardCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___nonzero__", _wrap_NodeBoardCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___bool__", _wrap_NodeBoardCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___len__", _wrap_NodeBoardCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_pop", _wrap_NodeBoardCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___getslice__", _wrap_NodeBoardCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___setslice__", _wrap_NodeBoardCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___delslice__", _wrap_NodeBoardCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___delitem__", _wrap_NodeBoardCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___getitem__", _wrap_NodeBoardCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector___setitem__", _wrap_NodeBoardCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_append", _wrap_NodeBoardCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_empty", _wrap_NodeBoardCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_size", _wrap_NodeBoardCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_clear", _wrap_NodeBoardCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_swap", _wrap_NodeBoardCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_get_allocator", _wrap_NodeBoardCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_begin", _wrap_NodeBoardCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_end", _wrap_NodeBoardCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_rbegin", _wrap_NodeBoardCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_rend", _wrap_NodeBoardCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_pop_back", _wrap_NodeBoardCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_erase", _wrap_NodeBoardCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_NodeBoardCPtrVector", _wrap_new_NodeBoardCPtrVector, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_push_back", _wrap_NodeBoardCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_front", _wrap_NodeBoardCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_back", _wrap_NodeBoardCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_assign", _wrap_NodeBoardCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_resize", _wrap_NodeBoardCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_insert", _wrap_NodeBoardCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_reserve", _wrap_NodeBoardCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_capacity", _wrap_NodeBoardCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_NodeBoardCPtrVector", _wrap_delete_NodeBoardCPtrVector, METH_VARARGS, NULL},
	 { (char *)"NodeBoardCPtrVector_swigregister", NodeBoardCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_iterator", _wrap_MidplanePtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___nonzero__", _wrap_MidplanePtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___bool__", _wrap_MidplanePtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___len__", _wrap_MidplanePtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_pop", _wrap_MidplanePtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___getslice__", _wrap_MidplanePtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___setslice__", _wrap_MidplanePtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___delslice__", _wrap_MidplanePtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___delitem__", _wrap_MidplanePtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___getitem__", _wrap_MidplanePtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector___setitem__", _wrap_MidplanePtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_append", _wrap_MidplanePtrVector_append, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_empty", _wrap_MidplanePtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_size", _wrap_MidplanePtrVector_size, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_clear", _wrap_MidplanePtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_swap", _wrap_MidplanePtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_get_allocator", _wrap_MidplanePtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_begin", _wrap_MidplanePtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_end", _wrap_MidplanePtrVector_end, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_rbegin", _wrap_MidplanePtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_rend", _wrap_MidplanePtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_pop_back", _wrap_MidplanePtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_erase", _wrap_MidplanePtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_MidplanePtrVector", _wrap_new_MidplanePtrVector, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_push_back", _wrap_MidplanePtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_front", _wrap_MidplanePtrVector_front, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_back", _wrap_MidplanePtrVector_back, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_assign", _wrap_MidplanePtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_resize", _wrap_MidplanePtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_insert", _wrap_MidplanePtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_reserve", _wrap_MidplanePtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_capacity", _wrap_MidplanePtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_MidplanePtrVector", _wrap_delete_MidplanePtrVector, METH_VARARGS, NULL},
	 { (char *)"MidplanePtrVector_swigregister", MidplanePtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_iterator", _wrap_MidplaneCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___nonzero__", _wrap_MidplaneCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___bool__", _wrap_MidplaneCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___len__", _wrap_MidplaneCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_pop", _wrap_MidplaneCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___getslice__", _wrap_MidplaneCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___setslice__", _wrap_MidplaneCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___delslice__", _wrap_MidplaneCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___delitem__", _wrap_MidplaneCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___getitem__", _wrap_MidplaneCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector___setitem__", _wrap_MidplaneCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_append", _wrap_MidplaneCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_empty", _wrap_MidplaneCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_size", _wrap_MidplaneCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_clear", _wrap_MidplaneCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_swap", _wrap_MidplaneCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_get_allocator", _wrap_MidplaneCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_begin", _wrap_MidplaneCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_end", _wrap_MidplaneCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_rbegin", _wrap_MidplaneCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_rend", _wrap_MidplaneCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_pop_back", _wrap_MidplaneCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_erase", _wrap_MidplaneCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_MidplaneCPtrVector", _wrap_new_MidplaneCPtrVector, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_push_back", _wrap_MidplaneCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_front", _wrap_MidplaneCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_back", _wrap_MidplaneCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_assign", _wrap_MidplaneCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_resize", _wrap_MidplaneCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_insert", _wrap_MidplaneCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_reserve", _wrap_MidplaneCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_capacity", _wrap_MidplaneCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_MidplaneCPtrVector", _wrap_delete_MidplaneCPtrVector, METH_VARARGS, NULL},
	 { (char *)"MidplaneCPtrVector_swigregister", MidplaneCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_iterator", _wrap_NodePtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___nonzero__", _wrap_NodePtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___bool__", _wrap_NodePtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___len__", _wrap_NodePtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_pop", _wrap_NodePtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___getslice__", _wrap_NodePtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___setslice__", _wrap_NodePtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___delslice__", _wrap_NodePtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___delitem__", _wrap_NodePtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___getitem__", _wrap_NodePtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector___setitem__", _wrap_NodePtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_append", _wrap_NodePtrVector_append, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_empty", _wrap_NodePtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_size", _wrap_NodePtrVector_size, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_clear", _wrap_NodePtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_swap", _wrap_NodePtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_get_allocator", _wrap_NodePtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_begin", _wrap_NodePtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_end", _wrap_NodePtrVector_end, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_rbegin", _wrap_NodePtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_rend", _wrap_NodePtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_pop_back", _wrap_NodePtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_erase", _wrap_NodePtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_NodePtrVector", _wrap_new_NodePtrVector, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_push_back", _wrap_NodePtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_front", _wrap_NodePtrVector_front, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_back", _wrap_NodePtrVector_back, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_assign", _wrap_NodePtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_resize", _wrap_NodePtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_insert", _wrap_NodePtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_reserve", _wrap_NodePtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_capacity", _wrap_NodePtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_NodePtrVector", _wrap_delete_NodePtrVector, METH_VARARGS, NULL},
	 { (char *)"NodePtrVector_swigregister", NodePtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_iterator", _wrap_NodeCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___nonzero__", _wrap_NodeCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___bool__", _wrap_NodeCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___len__", _wrap_NodeCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_pop", _wrap_NodeCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___getslice__", _wrap_NodeCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___setslice__", _wrap_NodeCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___delslice__", _wrap_NodeCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___delitem__", _wrap_NodeCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___getitem__", _wrap_NodeCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector___setitem__", _wrap_NodeCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_append", _wrap_NodeCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_empty", _wrap_NodeCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_size", _wrap_NodeCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_clear", _wrap_NodeCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_swap", _wrap_NodeCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_get_allocator", _wrap_NodeCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_begin", _wrap_NodeCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_end", _wrap_NodeCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_rbegin", _wrap_NodeCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_rend", _wrap_NodeCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_pop_back", _wrap_NodeCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_erase", _wrap_NodeCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_NodeCPtrVector", _wrap_new_NodeCPtrVector, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_push_back", _wrap_NodeCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_front", _wrap_NodeCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_back", _wrap_NodeCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_assign", _wrap_NodeCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_resize", _wrap_NodeCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_insert", _wrap_NodeCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_reserve", _wrap_NodeCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_capacity", _wrap_NodeCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_NodeCPtrVector", _wrap_delete_NodeCPtrVector, METH_VARARGS, NULL},
	 { (char *)"NodeCPtrVector_swigregister", NodeCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_iterator", _wrap_SwitchPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___nonzero__", _wrap_SwitchPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___bool__", _wrap_SwitchPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___len__", _wrap_SwitchPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_pop", _wrap_SwitchPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___getslice__", _wrap_SwitchPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___setslice__", _wrap_SwitchPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___delslice__", _wrap_SwitchPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___delitem__", _wrap_SwitchPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___getitem__", _wrap_SwitchPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector___setitem__", _wrap_SwitchPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_append", _wrap_SwitchPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_empty", _wrap_SwitchPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_size", _wrap_SwitchPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_clear", _wrap_SwitchPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_swap", _wrap_SwitchPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_get_allocator", _wrap_SwitchPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_begin", _wrap_SwitchPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_end", _wrap_SwitchPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_rbegin", _wrap_SwitchPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_rend", _wrap_SwitchPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_pop_back", _wrap_SwitchPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_erase", _wrap_SwitchPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_SwitchPtrVector", _wrap_new_SwitchPtrVector, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_push_back", _wrap_SwitchPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_front", _wrap_SwitchPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_back", _wrap_SwitchPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_assign", _wrap_SwitchPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_resize", _wrap_SwitchPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_insert", _wrap_SwitchPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_reserve", _wrap_SwitchPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_capacity", _wrap_SwitchPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_SwitchPtrVector", _wrap_delete_SwitchPtrVector, METH_VARARGS, NULL},
	 { (char *)"SwitchPtrVector_swigregister", SwitchPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_iterator", _wrap_SwitchCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___nonzero__", _wrap_SwitchCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___bool__", _wrap_SwitchCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___len__", _wrap_SwitchCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_pop", _wrap_SwitchCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___getslice__", _wrap_SwitchCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___setslice__", _wrap_SwitchCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___delslice__", _wrap_SwitchCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___delitem__", _wrap_SwitchCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___getitem__", _wrap_SwitchCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector___setitem__", _wrap_SwitchCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_append", _wrap_SwitchCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_empty", _wrap_SwitchCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_size", _wrap_SwitchCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_clear", _wrap_SwitchCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_swap", _wrap_SwitchCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_get_allocator", _wrap_SwitchCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_begin", _wrap_SwitchCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_end", _wrap_SwitchCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_rbegin", _wrap_SwitchCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_rend", _wrap_SwitchCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_pop_back", _wrap_SwitchCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_erase", _wrap_SwitchCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_SwitchCPtrVector", _wrap_new_SwitchCPtrVector, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_push_back", _wrap_SwitchCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_front", _wrap_SwitchCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_back", _wrap_SwitchCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_assign", _wrap_SwitchCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_resize", _wrap_SwitchCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_insert", _wrap_SwitchCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_reserve", _wrap_SwitchCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_capacity", _wrap_SwitchCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_SwitchCPtrVector", _wrap_delete_SwitchCPtrVector, METH_VARARGS, NULL},
	 { (char *)"SwitchCPtrVector_swigregister", SwitchCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_iterator", _wrap_IOLinkPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___nonzero__", _wrap_IOLinkPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___bool__", _wrap_IOLinkPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___len__", _wrap_IOLinkPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_pop", _wrap_IOLinkPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___getslice__", _wrap_IOLinkPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___setslice__", _wrap_IOLinkPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___delslice__", _wrap_IOLinkPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___delitem__", _wrap_IOLinkPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___getitem__", _wrap_IOLinkPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector___setitem__", _wrap_IOLinkPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_append", _wrap_IOLinkPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_empty", _wrap_IOLinkPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_size", _wrap_IOLinkPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_clear", _wrap_IOLinkPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_swap", _wrap_IOLinkPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_get_allocator", _wrap_IOLinkPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_begin", _wrap_IOLinkPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_end", _wrap_IOLinkPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_rbegin", _wrap_IOLinkPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_rend", _wrap_IOLinkPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_pop_back", _wrap_IOLinkPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_erase", _wrap_IOLinkPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IOLinkPtrVector", _wrap_new_IOLinkPtrVector, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_push_back", _wrap_IOLinkPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_front", _wrap_IOLinkPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_back", _wrap_IOLinkPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_assign", _wrap_IOLinkPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_resize", _wrap_IOLinkPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_insert", _wrap_IOLinkPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_reserve", _wrap_IOLinkPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_capacity", _wrap_IOLinkPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IOLinkPtrVector", _wrap_delete_IOLinkPtrVector, METH_VARARGS, NULL},
	 { (char *)"IOLinkPtrVector_swigregister", IOLinkPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_iterator", _wrap_IOLinkCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___nonzero__", _wrap_IOLinkCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___bool__", _wrap_IOLinkCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___len__", _wrap_IOLinkCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_pop", _wrap_IOLinkCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___getslice__", _wrap_IOLinkCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___setslice__", _wrap_IOLinkCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___delslice__", _wrap_IOLinkCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___delitem__", _wrap_IOLinkCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___getitem__", _wrap_IOLinkCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector___setitem__", _wrap_IOLinkCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_append", _wrap_IOLinkCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_empty", _wrap_IOLinkCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_size", _wrap_IOLinkCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_clear", _wrap_IOLinkCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_swap", _wrap_IOLinkCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_get_allocator", _wrap_IOLinkCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_begin", _wrap_IOLinkCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_end", _wrap_IOLinkCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_rbegin", _wrap_IOLinkCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_rend", _wrap_IOLinkCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_pop_back", _wrap_IOLinkCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_erase", _wrap_IOLinkCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_IOLinkCPtrVector", _wrap_new_IOLinkCPtrVector, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_push_back", _wrap_IOLinkCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_front", _wrap_IOLinkCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_back", _wrap_IOLinkCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_assign", _wrap_IOLinkCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_resize", _wrap_IOLinkCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_insert", _wrap_IOLinkCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_reserve", _wrap_IOLinkCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_capacity", _wrap_IOLinkCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_IOLinkCPtrVector", _wrap_delete_IOLinkCPtrVector, METH_VARARGS, NULL},
	 { (char *)"IOLinkCPtrVector_swigregister", IOLinkCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_iterator", _wrap_CablePtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___nonzero__", _wrap_CablePtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___bool__", _wrap_CablePtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___len__", _wrap_CablePtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_pop", _wrap_CablePtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___getslice__", _wrap_CablePtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___setslice__", _wrap_CablePtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___delslice__", _wrap_CablePtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___delitem__", _wrap_CablePtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___getitem__", _wrap_CablePtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector___setitem__", _wrap_CablePtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_append", _wrap_CablePtrVector_append, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_empty", _wrap_CablePtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_size", _wrap_CablePtrVector_size, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_clear", _wrap_CablePtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_swap", _wrap_CablePtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_get_allocator", _wrap_CablePtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_begin", _wrap_CablePtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_end", _wrap_CablePtrVector_end, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_rbegin", _wrap_CablePtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_rend", _wrap_CablePtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_pop_back", _wrap_CablePtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_erase", _wrap_CablePtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_CablePtrVector", _wrap_new_CablePtrVector, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_push_back", _wrap_CablePtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_front", _wrap_CablePtrVector_front, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_back", _wrap_CablePtrVector_back, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_assign", _wrap_CablePtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_resize", _wrap_CablePtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_insert", _wrap_CablePtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_reserve", _wrap_CablePtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_capacity", _wrap_CablePtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_CablePtrVector", _wrap_delete_CablePtrVector, METH_VARARGS, NULL},
	 { (char *)"CablePtrVector_swigregister", CablePtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_iterator", _wrap_CableCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___nonzero__", _wrap_CableCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___bool__", _wrap_CableCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___len__", _wrap_CableCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_pop", _wrap_CableCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___getslice__", _wrap_CableCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___setslice__", _wrap_CableCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___delslice__", _wrap_CableCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___delitem__", _wrap_CableCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___getitem__", _wrap_CableCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector___setitem__", _wrap_CableCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_append", _wrap_CableCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_empty", _wrap_CableCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_size", _wrap_CableCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_clear", _wrap_CableCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_swap", _wrap_CableCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_get_allocator", _wrap_CableCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_begin", _wrap_CableCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_end", _wrap_CableCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_rbegin", _wrap_CableCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_rend", _wrap_CableCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_pop_back", _wrap_CableCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_erase", _wrap_CableCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_CableCPtrVector", _wrap_new_CableCPtrVector, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_push_back", _wrap_CableCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_front", _wrap_CableCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_back", _wrap_CableCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_assign", _wrap_CableCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_resize", _wrap_CableCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_insert", _wrap_CableCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_reserve", _wrap_CableCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_capacity", _wrap_CableCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_CableCPtrVector", _wrap_delete_CableCPtrVector, METH_VARARGS, NULL},
	 { (char *)"CableCPtrVector_swigregister", CableCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_iterator", _wrap_JobPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___nonzero__", _wrap_JobPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___bool__", _wrap_JobPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___len__", _wrap_JobPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_pop", _wrap_JobPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___getslice__", _wrap_JobPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___setslice__", _wrap_JobPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___delslice__", _wrap_JobPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___delitem__", _wrap_JobPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___getitem__", _wrap_JobPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector___setitem__", _wrap_JobPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_append", _wrap_JobPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_empty", _wrap_JobPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_size", _wrap_JobPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_clear", _wrap_JobPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_swap", _wrap_JobPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_get_allocator", _wrap_JobPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_begin", _wrap_JobPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_end", _wrap_JobPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_rbegin", _wrap_JobPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_rend", _wrap_JobPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_pop_back", _wrap_JobPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_erase", _wrap_JobPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_JobPtrVector", _wrap_new_JobPtrVector, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_push_back", _wrap_JobPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_front", _wrap_JobPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_back", _wrap_JobPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_assign", _wrap_JobPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_resize", _wrap_JobPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_insert", _wrap_JobPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_reserve", _wrap_JobPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_capacity", _wrap_JobPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_JobPtrVector", _wrap_delete_JobPtrVector, METH_VARARGS, NULL},
	 { (char *)"JobPtrVector_swigregister", JobPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_iterator", _wrap_JobCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___nonzero__", _wrap_JobCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___bool__", _wrap_JobCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___len__", _wrap_JobCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_pop", _wrap_JobCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___getslice__", _wrap_JobCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___setslice__", _wrap_JobCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___delslice__", _wrap_JobCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___delitem__", _wrap_JobCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___getitem__", _wrap_JobCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector___setitem__", _wrap_JobCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_append", _wrap_JobCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_empty", _wrap_JobCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_size", _wrap_JobCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_clear", _wrap_JobCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_swap", _wrap_JobCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_get_allocator", _wrap_JobCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_begin", _wrap_JobCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_end", _wrap_JobCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_rbegin", _wrap_JobCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_rend", _wrap_JobCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_pop_back", _wrap_JobCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_erase", _wrap_JobCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_JobCPtrVector", _wrap_new_JobCPtrVector, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_push_back", _wrap_JobCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_front", _wrap_JobCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_back", _wrap_JobCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_assign", _wrap_JobCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_resize", _wrap_JobCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_insert", _wrap_JobCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_reserve", _wrap_JobCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_capacity", _wrap_JobCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_JobCPtrVector", _wrap_delete_JobCPtrVector, METH_VARARGS, NULL},
	 { (char *)"JobCPtrVector_swigregister", JobCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_iterator", _wrap_BlockPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___nonzero__", _wrap_BlockPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___bool__", _wrap_BlockPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___len__", _wrap_BlockPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_pop", _wrap_BlockPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___getslice__", _wrap_BlockPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___setslice__", _wrap_BlockPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___delslice__", _wrap_BlockPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___delitem__", _wrap_BlockPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___getitem__", _wrap_BlockPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector___setitem__", _wrap_BlockPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_append", _wrap_BlockPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_empty", _wrap_BlockPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_size", _wrap_BlockPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_clear", _wrap_BlockPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_swap", _wrap_BlockPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_get_allocator", _wrap_BlockPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_begin", _wrap_BlockPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_end", _wrap_BlockPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_rbegin", _wrap_BlockPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_rend", _wrap_BlockPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_pop_back", _wrap_BlockPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_erase", _wrap_BlockPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_BlockPtrVector", _wrap_new_BlockPtrVector, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_push_back", _wrap_BlockPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_front", _wrap_BlockPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_back", _wrap_BlockPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_assign", _wrap_BlockPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_resize", _wrap_BlockPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_insert", _wrap_BlockPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_reserve", _wrap_BlockPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_capacity", _wrap_BlockPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_BlockPtrVector", _wrap_delete_BlockPtrVector, METH_VARARGS, NULL},
	 { (char *)"BlockPtrVector_swigregister", BlockPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_iterator", _wrap_BlockCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___nonzero__", _wrap_BlockCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___bool__", _wrap_BlockCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___len__", _wrap_BlockCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_pop", _wrap_BlockCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___getslice__", _wrap_BlockCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___setslice__", _wrap_BlockCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___delslice__", _wrap_BlockCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___delitem__", _wrap_BlockCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___getitem__", _wrap_BlockCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector___setitem__", _wrap_BlockCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_append", _wrap_BlockCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_empty", _wrap_BlockCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_size", _wrap_BlockCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_clear", _wrap_BlockCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_swap", _wrap_BlockCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_get_allocator", _wrap_BlockCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_begin", _wrap_BlockCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_end", _wrap_BlockCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_rbegin", _wrap_BlockCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_rend", _wrap_BlockCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_pop_back", _wrap_BlockCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_erase", _wrap_BlockCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_BlockCPtrVector", _wrap_new_BlockCPtrVector, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_push_back", _wrap_BlockCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_front", _wrap_BlockCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_back", _wrap_BlockCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_assign", _wrap_BlockCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_resize", _wrap_BlockCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_insert", _wrap_BlockCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_reserve", _wrap_BlockCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_capacity", _wrap_BlockCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_BlockCPtrVector", _wrap_delete_BlockCPtrVector, METH_VARARGS, NULL},
	 { (char *)"BlockCPtrVector_swigregister", BlockCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_iterator", _wrap_ShapePtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___nonzero__", _wrap_ShapePtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___bool__", _wrap_ShapePtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___len__", _wrap_ShapePtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_pop", _wrap_ShapePtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___getslice__", _wrap_ShapePtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___setslice__", _wrap_ShapePtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___delslice__", _wrap_ShapePtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___delitem__", _wrap_ShapePtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___getitem__", _wrap_ShapePtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector___setitem__", _wrap_ShapePtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_append", _wrap_ShapePtrVector_append, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_empty", _wrap_ShapePtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_size", _wrap_ShapePtrVector_size, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_clear", _wrap_ShapePtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_swap", _wrap_ShapePtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_get_allocator", _wrap_ShapePtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_begin", _wrap_ShapePtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_end", _wrap_ShapePtrVector_end, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_rbegin", _wrap_ShapePtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_rend", _wrap_ShapePtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_pop_back", _wrap_ShapePtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_erase", _wrap_ShapePtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_ShapePtrVector", _wrap_new_ShapePtrVector, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_push_back", _wrap_ShapePtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_front", _wrap_ShapePtrVector_front, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_back", _wrap_ShapePtrVector_back, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_assign", _wrap_ShapePtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_resize", _wrap_ShapePtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_insert", _wrap_ShapePtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_reserve", _wrap_ShapePtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_capacity", _wrap_ShapePtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_ShapePtrVector", _wrap_delete_ShapePtrVector, METH_VARARGS, NULL},
	 { (char *)"ShapePtrVector_swigregister", ShapePtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_iterator", _wrap_ShapeCPtrVector_iterator, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___nonzero__", _wrap_ShapeCPtrVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___bool__", _wrap_ShapeCPtrVector___bool__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___len__", _wrap_ShapeCPtrVector___len__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_pop", _wrap_ShapeCPtrVector_pop, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___getslice__", _wrap_ShapeCPtrVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___setslice__", _wrap_ShapeCPtrVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___delslice__", _wrap_ShapeCPtrVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___delitem__", _wrap_ShapeCPtrVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___getitem__", _wrap_ShapeCPtrVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector___setitem__", _wrap_ShapeCPtrVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_append", _wrap_ShapeCPtrVector_append, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_empty", _wrap_ShapeCPtrVector_empty, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_size", _wrap_ShapeCPtrVector_size, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_clear", _wrap_ShapeCPtrVector_clear, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_swap", _wrap_ShapeCPtrVector_swap, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_get_allocator", _wrap_ShapeCPtrVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_begin", _wrap_ShapeCPtrVector_begin, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_end", _wrap_ShapeCPtrVector_end, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_rbegin", _wrap_ShapeCPtrVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_rend", _wrap_ShapeCPtrVector_rend, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_pop_back", _wrap_ShapeCPtrVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_erase", _wrap_ShapeCPtrVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_ShapeCPtrVector", _wrap_new_ShapeCPtrVector, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_push_back", _wrap_ShapeCPtrVector_push_back, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_front", _wrap_ShapeCPtrVector_front, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_back", _wrap_ShapeCPtrVector_back, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_assign", _wrap_ShapeCPtrVector_assign, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_resize", _wrap_ShapeCPtrVector_resize, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_insert", _wrap_ShapeCPtrVector_insert, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_reserve", _wrap_ShapeCPtrVector_reserve, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_capacity", _wrap_ShapeCPtrVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_ShapeCPtrVector", _wrap_delete_ShapeCPtrVector, METH_VARARGS, NULL},
	 { (char *)"ShapeCPtrVector_swigregister", ShapeCPtrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_iterator", _wrap_ShapeVector_iterator, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___nonzero__", _wrap_ShapeVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___bool__", _wrap_ShapeVector___bool__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___len__", _wrap_ShapeVector___len__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_pop", _wrap_ShapeVector_pop, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___getslice__", _wrap_ShapeVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___setslice__", _wrap_ShapeVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___delslice__", _wrap_ShapeVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___delitem__", _wrap_ShapeVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___getitem__", _wrap_ShapeVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector___setitem__", _wrap_ShapeVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_append", _wrap_ShapeVector_append, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_empty", _wrap_ShapeVector_empty, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_size", _wrap_ShapeVector_size, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_clear", _wrap_ShapeVector_clear, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_swap", _wrap_ShapeVector_swap, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_get_allocator", _wrap_ShapeVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_begin", _wrap_ShapeVector_begin, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_end", _wrap_ShapeVector_end, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_rbegin", _wrap_ShapeVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_rend", _wrap_ShapeVector_rend, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_pop_back", _wrap_ShapeVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_erase", _wrap_ShapeVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_ShapeVector", _wrap_new_ShapeVector, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_push_back", _wrap_ShapeVector_push_back, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_front", _wrap_ShapeVector_front, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_back", _wrap_ShapeVector_back, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_assign", _wrap_ShapeVector_assign, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_resize", _wrap_ShapeVector_resize, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_insert", _wrap_ShapeVector_insert, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_reserve", _wrap_ShapeVector_reserve, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_capacity", _wrap_ShapeVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_ShapeVector", _wrap_delete_ShapeVector, METH_VARARGS, NULL},
	 { (char *)"ShapeVector_swigregister", ShapeVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_iterator", _wrap_BlockStatusSet_iterator, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet___nonzero__", _wrap_BlockStatusSet___nonzero__, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet___bool__", _wrap_BlockStatusSet___bool__, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet___len__", _wrap_BlockStatusSet___len__, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_append", _wrap_BlockStatusSet_append, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet___contains__", _wrap_BlockStatusSet___contains__, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet___getitem__", _wrap_BlockStatusSet___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_BlockStatusSet", _wrap_new_BlockStatusSet, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_empty", _wrap_BlockStatusSet_empty, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_size", _wrap_BlockStatusSet_size, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_clear", _wrap_BlockStatusSet_clear, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_swap", _wrap_BlockStatusSet_swap, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_count", _wrap_BlockStatusSet_count, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_begin", _wrap_BlockStatusSet_begin, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_end", _wrap_BlockStatusSet_end, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_rbegin", _wrap_BlockStatusSet_rbegin, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_rend", _wrap_BlockStatusSet_rend, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_erase", _wrap_BlockStatusSet_erase, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_find", _wrap_BlockStatusSet_find, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_lower_bound", _wrap_BlockStatusSet_lower_bound, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_upper_bound", _wrap_BlockStatusSet_upper_bound, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_equal_range", _wrap_BlockStatusSet_equal_range, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_insert", _wrap_BlockStatusSet_insert, METH_VARARGS, NULL},
	 { (char *)"delete_BlockStatusSet", _wrap_delete_BlockStatusSet, METH_VARARGS, NULL},
	 { (char *)"BlockStatusSet_swigregister", BlockStatusSet_swigregister, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_iterator", _wrap_DimensionConnectivityMap_iterator, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___nonzero__", _wrap_DimensionConnectivityMap___nonzero__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___bool__", _wrap_DimensionConnectivityMap___bool__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___len__", _wrap_DimensionConnectivityMap___len__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___getitem__", _wrap_DimensionConnectivityMap___getitem__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___delitem__", _wrap_DimensionConnectivityMap___delitem__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_has_key", _wrap_DimensionConnectivityMap_has_key, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_keys", _wrap_DimensionConnectivityMap_keys, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_values", _wrap_DimensionConnectivityMap_values, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_items", _wrap_DimensionConnectivityMap_items, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___contains__", _wrap_DimensionConnectivityMap___contains__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_key_iterator", _wrap_DimensionConnectivityMap_key_iterator, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_value_iterator", _wrap_DimensionConnectivityMap_value_iterator, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap___setitem__", _wrap_DimensionConnectivityMap___setitem__, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_asdict", _wrap_DimensionConnectivityMap_asdict, METH_VARARGS, NULL},
	 { (char *)"new_DimensionConnectivityMap", _wrap_new_DimensionConnectivityMap, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_empty", _wrap_DimensionConnectivityMap_empty, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_size", _wrap_DimensionConnectivityMap_size, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_clear", _wrap_DimensionConnectivityMap_clear, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_swap", _wrap_DimensionConnectivityMap_swap, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_get_allocator", _wrap_DimensionConnectivityMap_get_allocator, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_begin", _wrap_DimensionConnectivityMap_begin, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_end", _wrap_DimensionConnectivityMap_end, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_rbegin", _wrap_DimensionConnectivityMap_rbegin, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_rend", _wrap_DimensionConnectivityMap_rend, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_count", _wrap_DimensionConnectivityMap_count, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_erase", _wrap_DimensionConnectivityMap_erase, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_find", _wrap_DimensionConnectivityMap_find, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_lower_bound", _wrap_DimensionConnectivityMap_lower_bound, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_upper_bound", _wrap_DimensionConnectivityMap_upper_bound, METH_VARARGS, NULL},
	 { (char *)"delete_DimensionConnectivityMap", _wrap_delete_DimensionConnectivityMap, METH_VARARGS, NULL},
	 { (char *)"DimensionConnectivityMap_swigregister", DimensionConnectivityMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"StringVector_iterator", _wrap_StringVector_iterator, METH_VARARGS, NULL},
	 { (char *)"StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_VARARGS, NULL},
	 { (char *)"StringVector___bool__", _wrap_StringVector___bool__, METH_VARARGS, NULL},
	 { (char *)"StringVector___len__", _wrap_StringVector___len__, METH_VARARGS, NULL},
	 { (char *)"StringVector_pop", _wrap_StringVector_pop, METH_VARARGS, NULL},
	 { (char *)"StringVector___getslice__", _wrap_StringVector___getslice__, METH_VARARGS, NULL},
	 { (char *)"StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS, NULL},
	 { (char *)"StringVector___delslice__", _wrap_StringVector___delslice__, METH_VARARGS, NULL},
	 { (char *)"StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS, NULL},
	 { (char *)"StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS, NULL},
	 { (char *)"StringVector_append", _wrap_StringVector_append, METH_VARARGS, NULL},
	 { (char *)"StringVector_empty", _wrap_StringVector_empty, METH_VARARGS, NULL},
	 { (char *)"StringVector_size", _wrap_StringVector_size, METH_VARARGS, NULL},
	 { (char *)"StringVector_clear", _wrap_StringVector_clear, METH_VARARGS, NULL},
	 { (char *)"StringVector_swap", _wrap_StringVector_swap, METH_VARARGS, NULL},
	 { (char *)"StringVector_get_allocator", _wrap_StringVector_get_allocator, METH_VARARGS, NULL},
	 { (char *)"StringVector_begin", _wrap_StringVector_begin, METH_VARARGS, NULL},
	 { (char *)"StringVector_end", _wrap_StringVector_end, METH_VARARGS, NULL},
	 { (char *)"StringVector_rbegin", _wrap_StringVector_rbegin, METH_VARARGS, NULL},
	 { (char *)"StringVector_rend", _wrap_StringVector_rend, METH_VARARGS, NULL},
	 { (char *)"StringVector_pop_back", _wrap_StringVector_pop_back, METH_VARARGS, NULL},
	 { (char *)"StringVector_erase", _wrap_StringVector_erase, METH_VARARGS, NULL},
	 { (char *)"new_StringVector", _wrap_new_StringVector, METH_VARARGS, NULL},
	 { (char *)"StringVector_push_back", _wrap_StringVector_push_back, METH_VARARGS, NULL},
	 { (char *)"StringVector_front", _wrap_StringVector_front, METH_VARARGS, NULL},
	 { (char *)"StringVector_back", _wrap_StringVector_back, METH_VARARGS, NULL},
	 { (char *)"StringVector_assign", _wrap_StringVector_assign, METH_VARARGS, NULL},
	 { (char *)"StringVector_resize", _wrap_StringVector_resize, METH_VARARGS, NULL},
	 { (char *)"StringVector_insert", _wrap_StringVector_insert, METH_VARARGS, NULL},
	 { (char *)"StringVector_reserve", _wrap_StringVector_reserve, METH_VARARGS, NULL},
	 { (char *)"StringVector_capacity", _wrap_StringVector_capacity, METH_VARARGS, NULL},
	 { (char *)"delete_StringVector", _wrap_delete_StringVector, METH_VARARGS, NULL},
	 { (char *)"StringVector_swigregister", StringVector_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_boost__shared_ptrT_bgsched__Switch_tTo_p_boost__shared_ptrT_bgsched__Hardware_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< bgsched::Hardware >(*(boost::shared_ptr< bgsched::Switch > *)x);
}
static void *_p_boost__shared_ptrT_bgsched__NodeBoard_tTo_p_boost__shared_ptrT_bgsched__Hardware_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< bgsched::Hardware >(*(boost::shared_ptr< bgsched::NodeBoard > *)x);
}
static void *_p_boost__shared_ptrT_bgsched__IOLink_tTo_p_boost__shared_ptrT_bgsched__Hardware_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< bgsched::Hardware >(*(boost::shared_ptr< bgsched::IOLink > *)x);
}
static void *_p_boost__shared_ptrT_bgsched__Node_tTo_p_boost__shared_ptrT_bgsched__Hardware_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< bgsched::Hardware >(*(boost::shared_ptr< bgsched::Node > *)x);
}
static void *_p_boost__shared_ptrT_bgsched__Cable_tTo_p_boost__shared_ptrT_bgsched__Hardware_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< bgsched::Hardware >(*(boost::shared_ptr< bgsched::Cable > *)x);
}
static void *_p_boost__shared_ptrT_bgsched__Midplane_tTo_p_boost__shared_ptrT_bgsched__Hardware_t(void *x, int *newmemory) {
    *newmemory = SWIG_CAST_NEW_MEMORY;
    return (void *) new boost::shared_ptr< bgsched::Hardware >(*(boost::shared_ptr< bgsched::Midplane > *)x);
}
static void *_p_bgsched__allocator__LiveModelTo_p_bgsched__allocator__Model(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::allocator::Model *)  ((bgsched::allocator::LiveModel *) x));
}
static void *_p_bgsched__SwitchTo_p_bgsched__Hardware(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::Hardware *)  ((bgsched::Switch *) x));
}
static void *_p_bgsched__NodeTo_p_bgsched__Hardware(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::Hardware *)  ((bgsched::Node *) x));
}
static void *_p_bgsched__NodeBoardTo_p_bgsched__Hardware(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::Hardware *)  ((bgsched::NodeBoard *) x));
}
static void *_p_bgsched__MidplaneTo_p_bgsched__Hardware(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::Hardware *)  ((bgsched::Midplane *) x));
}
static void *_p_bgsched__IOLinkTo_p_bgsched__Hardware(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::Hardware *)  ((bgsched::IOLink *) x));
}
static void *_p_bgsched__CableTo_p_bgsched__Hardware(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((bgsched::Hardware *)  ((bgsched::Cable *) x));
}
static swig_type_info _swigt__p_BlockSize = {"_p_BlockSize", "BlockSize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BlockSort_Field = {"_p_BlockSort_Field", "BlockSort_Field *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Connectivity = {"_p_Connectivity", "Connectivity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstPtr = {"_p_ConstPtr", "ConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstPtrs = {"_p_ConstPtrs", "ConstPtrs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DimensionConnectivity = {"_p_DimensionConnectivity", "DimensionConnectivity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DrainedMidplanes = {"_p_DrainedMidplanes", "DrainedMidplanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exception = {"_p_Exception", "Exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ExtendedOptions = {"_p_ExtendedOptions", "ExtendedOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Id = {"_p_Id", "Id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_JobSort_Field = {"_p_JobSort_Field", "JobSort_Field *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_JobType = {"_p_JobType", "JobType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Midplanes = {"_p_Midplanes", "Midplanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NodeBoards = {"_p_NodeBoards", "NodeBoards *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PassthroughMidplanes = {"_p_PassthroughMidplanes", "PassthroughMidplanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Pimpl = {"_p_Pimpl", "Pimpl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptr = {"_p_Ptr", "Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptrs = {"_p_Ptrs", "Ptrs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RuntimeErrorT_bgsched__DatabaseErrors_t = {"_p_RuntimeErrorT_bgsched__DatabaseErrors_t", "RuntimeError< bgsched::DatabaseErrors > *|bgsched::DatabaseException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SchedUtil_Errors = {"_p_SchedUtil_Errors", "SchedUtil_Errors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Shapes = {"_p_Shapes", "Shapes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Statuses = {"_p_Statuses", "Statuses *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Block = {"_p_bgsched__Block", "bgsched::Block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__BlockFilter = {"_p_bgsched__BlockFilter", "bgsched::BlockFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__BlockFilter__BlockSize__Value = {"_p_bgsched__BlockFilter__BlockSize__Value", "bgsched::BlockFilter::BlockSize::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Block__Connectivity__Value = {"_p_bgsched__Block__Connectivity__Value", "bgsched::Block::Connectivity::Value *|std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Cable = {"_p_bgsched__Cable", "bgsched::Cable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__ComputeHardware = {"_p_bgsched__ComputeHardware", "bgsched::ComputeHardware *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Coordinates = {"_p_bgsched__Coordinates", "bgsched::Coordinates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__DatabaseErrors = {"_p_bgsched__DatabaseErrors", "bgsched::DatabaseErrors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Dimension = {"_p_bgsched__Dimension", "bgsched::Dimension *|std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__Block__Status_t = {"_p_bgsched__EnumWrapperT_bgsched__Block__Status_t", "bgsched::EnumWrapper< enum bgsched::Block::Status > *|bgsched::EnumWrapper< bgsched::Block::Status > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__Hardware__State_t = {"_p_bgsched__EnumWrapperT_bgsched__Hardware__State_t", "bgsched::EnumWrapper< bgsched::Hardware::State > *|bgsched::EnumWrapper< enum bgsched::Hardware::State > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__Job__Status_t = {"_p_bgsched__EnumWrapperT_bgsched__Job__Status_t", "bgsched::EnumWrapper< enum bgsched::Job::Status > *|bgsched::EnumWrapper< bgsched::Job::Status > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t = {"_p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t", "bgsched::EnumWrapper< enum bgsched::Midplane::InUse > *|bgsched::EnumWrapper< bgsched::Midplane::InUse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t = {"_p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t", "bgsched::EnumWrapper< enum bgsched::NodeBoard::Quadrant > *|bgsched::EnumWrapper< bgsched::NodeBoard::Quadrant > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t = {"_p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t", "bgsched::EnumWrapper< bgsched::SwitchSettings::PortsSetting > *|bgsched::EnumWrapper< enum bgsched::SwitchSettings::PortsSetting > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t = {"_p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t", "bgsched::EnumWrapper< enum bgsched::Switch::InUse > *|bgsched::EnumWrapper< bgsched::Switch::InUse > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t = {"_p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t", "bgsched::EnumWrapper< bgsched::allocator::Allocator::DumpVerbosity::Value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t = {"_p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t", "bgsched::EnumWrapper< bgsched::allocator::Model::DumpVerbosity::Value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t = {"_p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t", "bgsched::EnumWrapper< bgsched::core::BlockSort::Field::Value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t = {"_p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t", "bgsched::EnumWrapper< bgsched::core::JobSort::Field::Value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t = {"_p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t", "bgsched::EnumWrapper< bgsched::core::SortOrder::Value > *|bgsched::EnumWrapper< enum bgsched::core::SortOrder::Value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Hardware = {"_p_bgsched__Hardware", "bgsched::Hardware *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__IOLink = {"_p_bgsched__IOLink", "bgsched::IOLink *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__InitializationErrors = {"_p_bgsched__InitializationErrors", "bgsched::InitializationErrors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__InputErrors = {"_p_bgsched__InputErrors", "bgsched::InputErrors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__InternalErrors = {"_p_bgsched__InternalErrors", "bgsched::InternalErrors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__InvalidArgumentT_bgsched__InputErrors_t = {"_p_bgsched__InvalidArgumentT_bgsched__InputErrors_t", "bgsched::InvalidArgument< bgsched::InputErrors > *|bgsched::InputException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Job = {"_p_bgsched__Job", "bgsched::Job *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__JobFilter = {"_p_bgsched__JobFilter", "bgsched::JobFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__JobFilter__JobType__Value = {"_p_bgsched__JobFilter__JobType__Value", "bgsched::JobFilter::JobType::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__LogicErrorT_bgsched__InternalErrors_t = {"_p_bgsched__LogicErrorT_bgsched__InternalErrors_t", "bgsched::LogicError< bgsched::InternalErrors > *|bgsched::InternalException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Midplane = {"_p_bgsched__Midplane", "bgsched::Midplane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Node = {"_p_bgsched__Node", "bgsched::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__NodeBoard = {"_p_bgsched__NodeBoard", "bgsched::NodeBoard *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t = {"_p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t", "bgsched::InitializationException *|bgsched::RuntimeError< bgsched::InitializationErrors > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t = {"_p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t", "bgsched::RuntimeError< bgsched::RuntimeErrors > *|bgsched::RuntimeException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__RuntimeErrors = {"_p_bgsched__RuntimeErrors", "bgsched::RuntimeErrors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__SchedUtil = {"_p_bgsched__SchedUtil", "bgsched::SchedUtil *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Shape = {"_p_bgsched__Shape", "bgsched::Shape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__Switch = {"_p_bgsched__Switch", "bgsched::Switch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__SwitchSettings = {"_p_bgsched__SwitchSettings", "bgsched::SwitchSettings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__TimeInterval = {"_p_bgsched__TimeInterval", "bgsched::TimeInterval *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__Allocator = {"_p_bgsched__allocator__Allocator", "bgsched::allocator::Allocator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__AllocatorEventListener = {"_p_bgsched__allocator__AllocatorEventListener", "bgsched::allocator::AllocatorEventListener *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__AllocatorEventListener__AllocateCompleted = {"_p_bgsched__allocator__AllocatorEventListener__AllocateCompleted", "bgsched::allocator::AllocatorEventListener::AllocateCompleted *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted = {"_p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted", "bgsched::allocator::AllocatorEventListener::DeallocateCompleted *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__LiveModel = {"_p_bgsched__allocator__LiveModel", "bgsched::allocator::LiveModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__Midplanes = {"_p_bgsched__allocator__Midplanes", "bgsched::allocator::Midplanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__Model = {"_p_bgsched__allocator__Model", "bgsched::allocator::Model *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__ResourceSpec = {"_p_bgsched__allocator__ResourceSpec", "bgsched::allocator::ResourceSpec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value = {"_p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value", "bgsched::allocator::ResourceSpec::ConnectivitySpec::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__core__BlockSort = {"_p_bgsched__core__BlockSort", "bgsched::core::BlockSort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__core__BlockSort__Field__Value = {"_p_bgsched__core__BlockSort__Field__Value", "bgsched::core::BlockSort::Field::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__core__JobSort = {"_p_bgsched__core__JobSort", "bgsched::core::JobSort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__core__JobSort__Field__Value = {"_p_bgsched__core__JobSort__Field__Value", "bgsched::core::JobSort::Field::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bgsched__core__SortOrder = {"_p_bgsched__core__SortOrder", "bgsched::core::SortOrder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__posix_time__ptime = {"_p_boost__posix_time__ptime", "boost::posix_time::ptime *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Block_t = {"_p_boost__shared_ptrT_bgsched__Block_t", "boost::shared_ptr< bgsched::Block > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Cable_t = {"_p_boost__shared_ptrT_bgsched__Cable_t", "boost::shared_ptr< bgsched::Cable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__ComputeHardware_t = {"_p_boost__shared_ptrT_bgsched__ComputeHardware_t", "boost::shared_ptr< bgsched::ComputeHardware > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Hardware_t = {"_p_boost__shared_ptrT_bgsched__Hardware_t", "boost::shared_ptr< bgsched::Hardware > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__IOLink_t = {"_p_boost__shared_ptrT_bgsched__IOLink_t", "boost::shared_ptr< bgsched::IOLink > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Impl_t = {"_p_boost__shared_ptrT_bgsched__Impl_t", "boost::shared_ptr< bgsched::SwitchSettings::Impl > *|boost::shared_ptr< bgsched::Switch::Impl > *|boost::shared_ptr< bgsched::NodeBoard::Impl > *|boost::shared_ptr< bgsched::Midplane::Impl > *|boost::shared_ptr< bgsched::IOLink::Impl > *|boost::shared_ptr< bgsched::Block::Impl > *|boost::shared_ptr< bgsched::Impl > *|boost::shared_ptr< bgsched::BlockFilter::Impl > *|boost::shared_ptr< bgsched::ComputeHardware::Impl > *|boost::shared_ptr< bgsched::Cable::Impl > *|boost::shared_ptr< bgsched::Shape::Impl > *|boost::shared_ptr< bgsched::Node::Impl > *|boost::shared_ptr< bgsched::Hardware::Impl > *|boost::shared_ptr< bgsched::JobFilter::Impl > *|boost::shared_ptr< bgsched::Job::Impl > *|bgsched::NodeBoard::Pimpl *|bgsched::Midplane::Pimpl *|bgsched::ComputeHardware::Pimpl *|bgsched::IOLink::Pimpl *|bgsched::Block::Pimpl *|bgsched::BlockFilter::Pimpl *|bgsched::Switch::Pimpl *|bgsched::SwitchSettings::Pimpl *|bgsched::Cable::Pimpl *|bgsched::Shape::Pimpl *|bgsched::Node::Pimpl *|bgsched::Hardware::Pimpl *|bgsched::JobFilter::Pimpl *|bgsched::Job::Pimpl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Job_t = {"_p_boost__shared_ptrT_bgsched__Job_t", "boost::shared_ptr< bgsched::Job > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Midplane_t = {"_p_boost__shared_ptrT_bgsched__Midplane_t", "boost::shared_ptr< bgsched::Midplane > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__NodeBoard_t = {"_p_boost__shared_ptrT_bgsched__NodeBoard_t", "boost::shared_ptr< bgsched::NodeBoard > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Node_t = {"_p_boost__shared_ptrT_bgsched__Node_t", "boost::shared_ptr< bgsched::Node > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Shape_t = {"_p_boost__shared_ptrT_bgsched__Shape_t", "boost::shared_ptr< bgsched::Shape > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__Switch_t = {"_p_boost__shared_ptrT_bgsched__Switch_t", "boost::shared_ptr< bgsched::Switch > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__allocator__Impl_t = {"_p_boost__shared_ptrT_bgsched__allocator__Impl_t", "boost::shared_ptr< bgsched::allocator::Midplanes::Impl > *|bgsched::allocator::ResourceSpec::Pimpl *|bgsched::allocator::Midplanes::Pimpl *|bgsched::allocator::Model::Pimpl *|boost::shared_ptr< bgsched::allocator::LiveModel::Impl > *|bgsched::allocator::LiveModel::Pimpl *|boost::shared_ptr< bgsched::allocator::ResourceSpec::Impl > *|boost::shared_ptr< bgsched::allocator::Model::Impl > *|boost::shared_ptr< bgsched::allocator::Impl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t = {"_p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t", "boost::shared_ptr< bgsched::allocator::Midplanes const > *|bgsched::allocator::Midplanes::ConstPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_bgsched__core__Impl_t = {"_p_boost__shared_ptrT_bgsched__core__Impl_t", "bgsched::core::JobSort::Pimpl *|boost::shared_ptr< bgsched::core::BlockSort::Impl > *|bgsched::core::BlockSort::Pimpl *|boost::shared_ptr< bgsched::core::JobSort::Impl > *|boost::shared_ptr< bgsched::core::Impl > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__bgsched__Coordinates_p_void__void = {"_p_f_r_q_const__bgsched__Coordinates_p_void__void", "void (*)(bgsched::Coordinates const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void = {"_p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void", "void (*)(std::vector< uint32_t,std::allocator< uint32_t > > const &,void *)|void (*)(std::vector< unsigned int,std::allocator< unsigned int > > const &,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void = {"_p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void", "void (*)(std::vector< uint32_t,std::allocator< uint32_t > >,void *)|void (*)(std::vector< unsigned int,std::allocator< unsigned int > >,void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_bgsched__Shape_t = {"_p_std__allocatorT_bgsched__Shape_t", "std::vector< bgsched::Shape >::allocator_type *|std::allocator< bgsched::Shape > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t", "std::vector< boost::shared_ptr< bgsched::Block const > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Block const > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t", "std::allocator< boost::shared_ptr< bgsched::Block > > *|std::vector< boost::shared_ptr< bgsched::Block > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t", "std::vector< boost::shared_ptr< bgsched::Cable const > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Cable const > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t", "std::allocator< boost::shared_ptr< bgsched::Cable > > *|std::vector< boost::shared_ptr< bgsched::Cable > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t", "std::vector< boost::shared_ptr< bgsched::IOLink const > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::IOLink const > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t", "std::vector< boost::shared_ptr< bgsched::IOLink > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::IOLink > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t", "std::vector< boost::shared_ptr< bgsched::Job const > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Job const > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t", "std::vector< boost::shared_ptr< bgsched::Job > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Job > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t", "std::vector< boost::shared_ptr< bgsched::Midplane const > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Midplane const > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t", "std::vector< boost::shared_ptr< bgsched::Midplane > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Midplane > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t", "std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > *|std::vector< boost::shared_ptr< bgsched::NodeBoard const > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t", "std::allocator< boost::shared_ptr< bgsched::NodeBoard > > *|std::vector< boost::shared_ptr< bgsched::NodeBoard > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t", "std::allocator< boost::shared_ptr< bgsched::Node const > > *|std::vector< boost::shared_ptr< bgsched::Node const > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t", "std::vector< boost::shared_ptr< bgsched::Node > >::allocator_type *|std::allocator< boost::shared_ptr< bgsched::Node > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t", "std::allocator< boost::shared_ptr< bgsched::Shape const > > *|std::vector< boost::shared_ptr< bgsched::Shape const > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t", "std::allocator< boost::shared_ptr< bgsched::Shape > > *|std::vector< boost::shared_ptr< bgsched::Shape > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t", "std::allocator< boost::shared_ptr< bgsched::Switch const > > *|std::vector< boost::shared_ptr< bgsched::Switch const > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t = {"_p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t", "std::allocator< boost::shared_ptr< bgsched::Switch > > *|std::vector< boost::shared_ptr< bgsched::Switch > >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t = {"_p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t", "std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > *|std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_bgsched__Block__Status_t = {"_p_std__lessT_bgsched__Block__Status_t", "std::less< enum bgsched::Block::Status > *|std::less< bgsched::Block::Status > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_bgsched__Dimension_t = {"_p_std__lessT_bgsched__Dimension_t", "std::less< bgsched::Dimension > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t = {"_p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t", "std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value,std::less< bgsched::Dimension >,std::allocator< std::pair< bgsched::Dimension const,bgsched::Block::Connectivity::Value > > > *|std::map< bgsched::Dimension,bgsched::Block::Connectivity::Value > *|bgsched::Block::DimensionConnectivity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *|bgsched::allocator::ResourceSpec::ExtendedOptions *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t = {"_p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t", "bgsched::BlockFilter::Statuses *|std::set< enum bgsched::Block::Status > *|std::set< bgsched::Block::Status > *|std::set< enum bgsched::Block::Status,std::less< enum bgsched::Block::Status >,std::allocator< enum bgsched::Block::Status > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t = {"_p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t", "bgsched::JobFilter::Statuses *|std::set< enum bgsched::Job::Status,std::less< enum bgsched::Job::Status >,std::allocator< enum bgsched::Job::Status > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t = {"_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t", "std::set< std::string,std::less< std::string >,std::allocator< std::string > > *|bgsched::allocator::ResourceSpec::DrainedMidplanes *|bgsched::allocator::Model::DrainedMidplanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT__Tp__Alloc_t = {"_p_std__vectorT__Tp__Alloc_t", "std::vector< _Tp,_Alloc > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t = {"_p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t", "bgsched::allocator::Allocator::Shapes *|std::vector< bgsched::Shape,std::allocator< bgsched::Shape > > *|std::vector< bgsched::Shape > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t = {"_p_std__vectorT_bool_std__allocatorT_bool_t_t", "std::vector< bool,std::allocator< bool > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::Block const >,std::allocator< boost::shared_ptr< bgsched::Block const > > > *|std::vector< boost::shared_ptr< bgsched::Block const > > *|std::vector< bgsched::Block::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t", "bgsched::Block::Ptrs *|std::vector< boost::shared_ptr< bgsched::Block > > *|std::vector< bgsched::Block::Ptr > *|std::vector< boost::shared_ptr< bgsched::Block >,std::allocator< boost::shared_ptr< bgsched::Block > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::Cable const >,std::allocator< boost::shared_ptr< bgsched::Cable const > > > *|std::vector< boost::shared_ptr< bgsched::Cable const > > *|std::vector< bgsched::Cable::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t", "std::vector< boost::shared_ptr< bgsched::Cable >,std::allocator< boost::shared_ptr< bgsched::Cable > > > *|std::vector< bgsched::Cable::Ptr > *|std::vector< boost::shared_ptr< bgsched::Cable > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t", "bgsched::IOLink::ConstPtrs *|std::vector< boost::shared_ptr< bgsched::IOLink const >,std::allocator< boost::shared_ptr< bgsched::IOLink const > > > *|std::vector< boost::shared_ptr< bgsched::IOLink const > > *|std::vector< bgsched::IOLink::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t", "std::vector< boost::shared_ptr< bgsched::IOLink > > *|std::vector< bgsched::IOLink::Ptr > *|std::vector< boost::shared_ptr< bgsched::IOLink >,std::allocator< boost::shared_ptr< bgsched::IOLink > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::Job const >,std::allocator< boost::shared_ptr< bgsched::Job const > > > *|bgsched::Job::ConstPtrs *|std::vector< boost::shared_ptr< bgsched::Job const > > *|std::vector< bgsched::Job::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t", "std::vector< boost::shared_ptr< bgsched::Job > > *|std::vector< boost::shared_ptr< bgsched::Job >,std::allocator< boost::shared_ptr< bgsched::Job > > > *|std::vector< bgsched::Job::Ptr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::Midplane const > > *|std::vector< boost::shared_ptr< bgsched::Midplane const >,std::allocator< boost::shared_ptr< bgsched::Midplane const > > > *|std::vector< bgsched::Midplane::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t", "std::vector< boost::shared_ptr< bgsched::Midplane > > *|std::vector< boost::shared_ptr< bgsched::Midplane >,std::allocator< boost::shared_ptr< bgsched::Midplane > > > *|std::vector< bgsched::Midplane::Ptr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::NodeBoard const >,std::allocator< boost::shared_ptr< bgsched::NodeBoard const > > > *|bgsched::NodeBoard::ConstPtrs *|std::vector< boost::shared_ptr< bgsched::NodeBoard const > > *|std::vector< bgsched::NodeBoard::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t", "std::vector< boost::shared_ptr< bgsched::NodeBoard >,std::allocator< boost::shared_ptr< bgsched::NodeBoard > > > *|std::vector< boost::shared_ptr< bgsched::NodeBoard > > *|std::vector< bgsched::NodeBoard::Ptr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::Node const >,std::allocator< boost::shared_ptr< bgsched::Node const > > > *|std::vector< boost::shared_ptr< bgsched::Node const > > *|bgsched::Node::ConstPtrs *|std::vector< bgsched::Node::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t", "std::vector< boost::shared_ptr< bgsched::Node >,std::allocator< boost::shared_ptr< bgsched::Node > > > *|std::vector< bgsched::Node::Ptr > *|std::vector< boost::shared_ptr< bgsched::Node > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::Shape const >,std::allocator< boost::shared_ptr< bgsched::Shape const > > > *|std::vector< boost::shared_ptr< bgsched::Shape const > > *|std::vector< bgsched::Shape::ConstPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t", "std::vector< boost::shared_ptr< bgsched::Shape >,std::allocator< boost::shared_ptr< bgsched::Shape > > > *|std::vector< bgsched::Shape::Ptr > *|std::vector< boost::shared_ptr< bgsched::Shape > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t", "std::vector< boost::shared_ptr< bgsched::SwitchSettings const >,std::allocator< boost::shared_ptr< bgsched::SwitchSettings const > > > *|bgsched::SwitchSettings::ConstPtrs *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t", "std::vector< bgsched::Switch::ConstPtr > *|std::vector< boost::shared_ptr< bgsched::Switch const > > *|std::vector< boost::shared_ptr< bgsched::Switch const >,std::allocator< boost::shared_ptr< bgsched::Switch const > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t", "std::vector< boost::shared_ptr< bgsched::Switch >,std::allocator< boost::shared_ptr< bgsched::Switch > > > *|std::vector< boost::shared_ptr< bgsched::Switch > > *|std::vector< bgsched::Switch::Ptr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *|bgsched::Block::NodeBoards *|bgsched::Block::Midplanes *|bgsched::Block::PassthroughMidplanes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t = {"_p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t", "std::vector< std::vector< uint32_t,std::allocator< uint32_t > >,std::allocator< std::vector< uint32_t,std::allocator< uint32_t > > > > *|std::vector< std::vector< unsigned int,std::allocator< unsigned int > >,std::allocator< std::vector< unsigned int,std::allocator< unsigned int > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< uint32_t,std::allocator< uint32_t > > *|std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t = {"_p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t", "std::vector< unsigned long,std::allocator< unsigned long > > *|std::vector< bgsched::Job::Id,std::allocator< bgsched::Job::Id > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "bgsched::SequenceId *|uint64_t *|unsigned long *|bgsched::BlockCreationId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BlockSize,
  &_swigt__p_BlockSort_Field,
  &_swigt__p_Connectivity,
  &_swigt__p_ConstPtr,
  &_swigt__p_ConstPtrs,
  &_swigt__p_DimensionConnectivity,
  &_swigt__p_DrainedMidplanes,
  &_swigt__p_Exception,
  &_swigt__p_ExtendedOptions,
  &_swigt__p_Id,
  &_swigt__p_JobSort_Field,
  &_swigt__p_JobType,
  &_swigt__p_Midplanes,
  &_swigt__p_NodeBoards,
  &_swigt__p_PassthroughMidplanes,
  &_swigt__p_Pimpl,
  &_swigt__p_Ptr,
  &_swigt__p_Ptrs,
  &_swigt__p_RuntimeErrorT_bgsched__DatabaseErrors_t,
  &_swigt__p_SchedUtil_Errors,
  &_swigt__p_Shapes,
  &_swigt__p_Statuses,
  &_swigt__p_allocator_type,
  &_swigt__p_bgsched__Block,
  &_swigt__p_bgsched__BlockFilter,
  &_swigt__p_bgsched__BlockFilter__BlockSize__Value,
  &_swigt__p_bgsched__Block__Connectivity__Value,
  &_swigt__p_bgsched__Cable,
  &_swigt__p_bgsched__ComputeHardware,
  &_swigt__p_bgsched__Coordinates,
  &_swigt__p_bgsched__DatabaseErrors,
  &_swigt__p_bgsched__Dimension,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__Block__Status_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__Hardware__State_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__Job__Status_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t,
  &_swigt__p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t,
  &_swigt__p_bgsched__Hardware,
  &_swigt__p_bgsched__IOLink,
  &_swigt__p_bgsched__InitializationErrors,
  &_swigt__p_bgsched__InputErrors,
  &_swigt__p_bgsched__InternalErrors,
  &_swigt__p_bgsched__InvalidArgumentT_bgsched__InputErrors_t,
  &_swigt__p_bgsched__Job,
  &_swigt__p_bgsched__JobFilter,
  &_swigt__p_bgsched__JobFilter__JobType__Value,
  &_swigt__p_bgsched__LogicErrorT_bgsched__InternalErrors_t,
  &_swigt__p_bgsched__Midplane,
  &_swigt__p_bgsched__Node,
  &_swigt__p_bgsched__NodeBoard,
  &_swigt__p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t,
  &_swigt__p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t,
  &_swigt__p_bgsched__RuntimeErrors,
  &_swigt__p_bgsched__SchedUtil,
  &_swigt__p_bgsched__Shape,
  &_swigt__p_bgsched__Switch,
  &_swigt__p_bgsched__SwitchSettings,
  &_swigt__p_bgsched__TimeInterval,
  &_swigt__p_bgsched__allocator__Allocator,
  &_swigt__p_bgsched__allocator__AllocatorEventListener,
  &_swigt__p_bgsched__allocator__AllocatorEventListener__AllocateCompleted,
  &_swigt__p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted,
  &_swigt__p_bgsched__allocator__LiveModel,
  &_swigt__p_bgsched__allocator__Midplanes,
  &_swigt__p_bgsched__allocator__Model,
  &_swigt__p_bgsched__allocator__ResourceSpec,
  &_swigt__p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value,
  &_swigt__p_bgsched__core__BlockSort,
  &_swigt__p_bgsched__core__BlockSort__Field__Value,
  &_swigt__p_bgsched__core__JobSort,
  &_swigt__p_bgsched__core__JobSort__Field__Value,
  &_swigt__p_bgsched__core__SortOrder,
  &_swigt__p_boost__posix_time__ptime,
  &_swigt__p_boost__shared_ptrT_bgsched__Block_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Cable_t,
  &_swigt__p_boost__shared_ptrT_bgsched__ComputeHardware_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Hardware_t,
  &_swigt__p_boost__shared_ptrT_bgsched__IOLink_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Impl_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Job_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Midplane_t,
  &_swigt__p_boost__shared_ptrT_bgsched__NodeBoard_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Node_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Shape_t,
  &_swigt__p_boost__shared_ptrT_bgsched__Switch_t,
  &_swigt__p_boost__shared_ptrT_bgsched__allocator__Impl_t,
  &_swigt__p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t,
  &_swigt__p_boost__shared_ptrT_bgsched__core__Impl_t,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_f_r_q_const__bgsched__Coordinates_p_void__void,
  &_swigt__p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void,
  &_swigt__p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_bgsched__Shape_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t,
  &_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t,
  &_swigt__p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_bgsched__Block__Status_t,
  &_swigt__p_std__lessT_bgsched__Dimension_t,
  &_swigt__p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t,
  &_swigt__p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t,
  &_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT__Tp__Alloc_t,
  &_swigt__p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t,
  &_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_uint8_t,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_BlockSize[] = {  {&_swigt__p_BlockSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BlockSort_Field[] = {  {&_swigt__p_BlockSort_Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Connectivity[] = {  {&_swigt__p_Connectivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstPtr[] = {  {&_swigt__p_ConstPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstPtrs[] = {  {&_swigt__p_ConstPtrs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DimensionConnectivity[] = {  {&_swigt__p_DimensionConnectivity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DrainedMidplanes[] = {  {&_swigt__p_DrainedMidplanes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exception[] = {  {&_swigt__p_Exception, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ExtendedOptions[] = {  {&_swigt__p_ExtendedOptions, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Id[] = {  {&_swigt__p_Id, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_JobSort_Field[] = {  {&_swigt__p_JobSort_Field, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_JobType[] = {  {&_swigt__p_JobType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Midplanes[] = {  {&_swigt__p_Midplanes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NodeBoards[] = {  {&_swigt__p_NodeBoards, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PassthroughMidplanes[] = {  {&_swigt__p_PassthroughMidplanes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Pimpl[] = {  {&_swigt__p_Pimpl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptr[] = {  {&_swigt__p_Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptrs[] = {  {&_swigt__p_Ptrs, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RuntimeErrorT_bgsched__DatabaseErrors_t[] = {  {&_swigt__p_RuntimeErrorT_bgsched__DatabaseErrors_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SchedUtil_Errors[] = {  {&_swigt__p_SchedUtil_Errors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Shapes[] = {  {&_swigt__p_Shapes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Statuses[] = {  {&_swigt__p_Statuses, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Block[] = {  {&_swigt__p_bgsched__Block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__BlockFilter[] = {  {&_swigt__p_bgsched__BlockFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__BlockFilter__BlockSize__Value[] = {  {&_swigt__p_bgsched__BlockFilter__BlockSize__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Block__Connectivity__Value[] = {  {&_swigt__p_bgsched__Block__Connectivity__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Cable[] = {  {&_swigt__p_bgsched__Cable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__ComputeHardware[] = {  {&_swigt__p_bgsched__ComputeHardware, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Coordinates[] = {  {&_swigt__p_bgsched__Coordinates, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__DatabaseErrors[] = {  {&_swigt__p_bgsched__DatabaseErrors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Dimension[] = {  {&_swigt__p_bgsched__Dimension, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__Block__Status_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__Block__Status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__Hardware__State_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__Hardware__State_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__Job__Status_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__Job__Status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t[] = {  {&_swigt__p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Hardware[] = {  {&_swigt__p_bgsched__Cable, _p_bgsched__CableTo_p_bgsched__Hardware, 0, 0},  {&_swigt__p_bgsched__Switch, _p_bgsched__SwitchTo_p_bgsched__Hardware, 0, 0},  {&_swigt__p_bgsched__NodeBoard, _p_bgsched__NodeBoardTo_p_bgsched__Hardware, 0, 0},  {&_swigt__p_bgsched__Hardware, 0, 0, 0},  {&_swigt__p_bgsched__Node, _p_bgsched__NodeTo_p_bgsched__Hardware, 0, 0},  {&_swigt__p_bgsched__Midplane, _p_bgsched__MidplaneTo_p_bgsched__Hardware, 0, 0},  {&_swigt__p_bgsched__IOLink, _p_bgsched__IOLinkTo_p_bgsched__Hardware, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__IOLink[] = {  {&_swigt__p_bgsched__IOLink, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__InitializationErrors[] = {  {&_swigt__p_bgsched__InitializationErrors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__InputErrors[] = {  {&_swigt__p_bgsched__InputErrors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__InternalErrors[] = {  {&_swigt__p_bgsched__InternalErrors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__InvalidArgumentT_bgsched__InputErrors_t[] = {  {&_swigt__p_bgsched__InvalidArgumentT_bgsched__InputErrors_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Job[] = {  {&_swigt__p_bgsched__Job, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__JobFilter[] = {  {&_swigt__p_bgsched__JobFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__JobFilter__JobType__Value[] = {  {&_swigt__p_bgsched__JobFilter__JobType__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__LogicErrorT_bgsched__InternalErrors_t[] = {  {&_swigt__p_bgsched__LogicErrorT_bgsched__InternalErrors_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Midplane[] = {  {&_swigt__p_bgsched__Midplane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Node[] = {  {&_swigt__p_bgsched__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__NodeBoard[] = {  {&_swigt__p_bgsched__NodeBoard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t[] = {  {&_swigt__p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t[] = {  {&_swigt__p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__RuntimeErrors[] = {  {&_swigt__p_bgsched__RuntimeErrors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__SchedUtil[] = {  {&_swigt__p_bgsched__SchedUtil, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Shape[] = {  {&_swigt__p_bgsched__Shape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__Switch[] = {  {&_swigt__p_bgsched__Switch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__SwitchSettings[] = {  {&_swigt__p_bgsched__SwitchSettings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__TimeInterval[] = {  {&_swigt__p_bgsched__TimeInterval, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__Allocator[] = {  {&_swigt__p_bgsched__allocator__Allocator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__AllocatorEventListener[] = {  {&_swigt__p_bgsched__allocator__AllocatorEventListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__AllocatorEventListener__AllocateCompleted[] = {  {&_swigt__p_bgsched__allocator__AllocatorEventListener__AllocateCompleted, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted[] = {  {&_swigt__p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__LiveModel[] = {  {&_swigt__p_bgsched__allocator__LiveModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__Midplanes[] = {  {&_swigt__p_bgsched__allocator__Midplanes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__Model[] = {  {&_swigt__p_bgsched__allocator__LiveModel, _p_bgsched__allocator__LiveModelTo_p_bgsched__allocator__Model, 0, 0},  {&_swigt__p_bgsched__allocator__Model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__ResourceSpec[] = {  {&_swigt__p_bgsched__allocator__ResourceSpec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value[] = {  {&_swigt__p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__core__BlockSort[] = {  {&_swigt__p_bgsched__core__BlockSort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__core__BlockSort__Field__Value[] = {  {&_swigt__p_bgsched__core__BlockSort__Field__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__core__JobSort[] = {  {&_swigt__p_bgsched__core__JobSort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__core__JobSort__Field__Value[] = {  {&_swigt__p_bgsched__core__JobSort__Field__Value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bgsched__core__SortOrder[] = {  {&_swigt__p_bgsched__core__SortOrder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__posix_time__ptime[] = {  {&_swigt__p_boost__posix_time__ptime, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Block_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Block_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Cable_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Cable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__ComputeHardware_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__ComputeHardware_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Hardware_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0, 0},  {&_swigt__p_boost__shared_ptrT_bgsched__Cable_t, _p_boost__shared_ptrT_bgsched__Cable_tTo_p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_bgsched__Midplane_t, _p_boost__shared_ptrT_bgsched__Midplane_tTo_p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_bgsched__Switch_t, _p_boost__shared_ptrT_bgsched__Switch_tTo_p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_bgsched__NodeBoard_t, _p_boost__shared_ptrT_bgsched__NodeBoard_tTo_p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_bgsched__Node_t, _p_boost__shared_ptrT_bgsched__Node_tTo_p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0},  {&_swigt__p_boost__shared_ptrT_bgsched__IOLink_t, _p_boost__shared_ptrT_bgsched__IOLink_tTo_p_boost__shared_ptrT_bgsched__Hardware_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__IOLink_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__IOLink_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Impl_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Impl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Job_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Job_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Midplane_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Midplane_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__NodeBoard_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__NodeBoard_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Node_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Node_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Shape_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Shape_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__Switch_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__Switch_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__allocator__Impl_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__allocator__Impl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_bgsched__core__Impl_t[] = {  {&_swigt__p_boost__shared_ptrT_bgsched__core__Impl_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__bgsched__Coordinates_p_void__void[] = {  {&_swigt__p_f_r_q_const__bgsched__Coordinates_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void[] = {  {&_swigt__p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void[] = {  {&_swigt__p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_bgsched__Shape_t[] = {  {&_swigt__p_std__allocatorT_bgsched__Shape_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t[] = {  {&_swigt__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_bgsched__Block__Status_t[] = {  {&_swigt__p_std__lessT_bgsched__Block__Status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_bgsched__Dimension_t[] = {  {&_swigt__p_std__lessT_bgsched__Dimension_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t[] = {  {&_swigt__p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t[] = {  {&_swigt__p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t[] = {  {&_swigt__p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT__Tp__Alloc_t[] = {  {&_swigt__p_std__vectorT__Tp__Alloc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t[] = {  {&_swigt__p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t[] = {  {&_swigt__p_std__vectorT_bool_std__allocatorT_bool_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BlockSize,
  _swigc__p_BlockSort_Field,
  _swigc__p_Connectivity,
  _swigc__p_ConstPtr,
  _swigc__p_ConstPtrs,
  _swigc__p_DimensionConnectivity,
  _swigc__p_DrainedMidplanes,
  _swigc__p_Exception,
  _swigc__p_ExtendedOptions,
  _swigc__p_Id,
  _swigc__p_JobSort_Field,
  _swigc__p_JobType,
  _swigc__p_Midplanes,
  _swigc__p_NodeBoards,
  _swigc__p_PassthroughMidplanes,
  _swigc__p_Pimpl,
  _swigc__p_Ptr,
  _swigc__p_Ptrs,
  _swigc__p_RuntimeErrorT_bgsched__DatabaseErrors_t,
  _swigc__p_SchedUtil_Errors,
  _swigc__p_Shapes,
  _swigc__p_Statuses,
  _swigc__p_allocator_type,
  _swigc__p_bgsched__Block,
  _swigc__p_bgsched__BlockFilter,
  _swigc__p_bgsched__BlockFilter__BlockSize__Value,
  _swigc__p_bgsched__Block__Connectivity__Value,
  _swigc__p_bgsched__Cable,
  _swigc__p_bgsched__ComputeHardware,
  _swigc__p_bgsched__Coordinates,
  _swigc__p_bgsched__DatabaseErrors,
  _swigc__p_bgsched__Dimension,
  _swigc__p_bgsched__EnumWrapperT_bgsched__Block__Status_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__Hardware__State_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__Job__Status_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__Midplane__InUse_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__NodeBoard__Quadrant_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__SwitchSettings__PortsSetting_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__Switch__InUse_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__allocator__Allocator__DumpVerbosity__Value_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__allocator__Model__DumpVerbosity__Value_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__core__BlockSort__Field__Value_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__core__JobSort__Field__Value_t,
  _swigc__p_bgsched__EnumWrapperT_bgsched__core__SortOrder__Value_t,
  _swigc__p_bgsched__Hardware,
  _swigc__p_bgsched__IOLink,
  _swigc__p_bgsched__InitializationErrors,
  _swigc__p_bgsched__InputErrors,
  _swigc__p_bgsched__InternalErrors,
  _swigc__p_bgsched__InvalidArgumentT_bgsched__InputErrors_t,
  _swigc__p_bgsched__Job,
  _swigc__p_bgsched__JobFilter,
  _swigc__p_bgsched__JobFilter__JobType__Value,
  _swigc__p_bgsched__LogicErrorT_bgsched__InternalErrors_t,
  _swigc__p_bgsched__Midplane,
  _swigc__p_bgsched__Node,
  _swigc__p_bgsched__NodeBoard,
  _swigc__p_bgsched__RuntimeErrorT_bgsched__InitializationErrors_t,
  _swigc__p_bgsched__RuntimeErrorT_bgsched__RuntimeErrors_t,
  _swigc__p_bgsched__RuntimeErrors,
  _swigc__p_bgsched__SchedUtil,
  _swigc__p_bgsched__Shape,
  _swigc__p_bgsched__Switch,
  _swigc__p_bgsched__SwitchSettings,
  _swigc__p_bgsched__TimeInterval,
  _swigc__p_bgsched__allocator__Allocator,
  _swigc__p_bgsched__allocator__AllocatorEventListener,
  _swigc__p_bgsched__allocator__AllocatorEventListener__AllocateCompleted,
  _swigc__p_bgsched__allocator__AllocatorEventListener__DeallocateCompleted,
  _swigc__p_bgsched__allocator__LiveModel,
  _swigc__p_bgsched__allocator__Midplanes,
  _swigc__p_bgsched__allocator__Model,
  _swigc__p_bgsched__allocator__ResourceSpec,
  _swigc__p_bgsched__allocator__ResourceSpec__ConnectivitySpec__Value,
  _swigc__p_bgsched__core__BlockSort,
  _swigc__p_bgsched__core__BlockSort__Field__Value,
  _swigc__p_bgsched__core__JobSort,
  _swigc__p_bgsched__core__JobSort__Field__Value,
  _swigc__p_bgsched__core__SortOrder,
  _swigc__p_boost__posix_time__ptime,
  _swigc__p_boost__shared_ptrT_bgsched__Block_t,
  _swigc__p_boost__shared_ptrT_bgsched__Cable_t,
  _swigc__p_boost__shared_ptrT_bgsched__ComputeHardware_t,
  _swigc__p_boost__shared_ptrT_bgsched__Hardware_t,
  _swigc__p_boost__shared_ptrT_bgsched__IOLink_t,
  _swigc__p_boost__shared_ptrT_bgsched__Impl_t,
  _swigc__p_boost__shared_ptrT_bgsched__Job_t,
  _swigc__p_boost__shared_ptrT_bgsched__Midplane_t,
  _swigc__p_boost__shared_ptrT_bgsched__NodeBoard_t,
  _swigc__p_boost__shared_ptrT_bgsched__Node_t,
  _swigc__p_boost__shared_ptrT_bgsched__Shape_t,
  _swigc__p_boost__shared_ptrT_bgsched__Switch_t,
  _swigc__p_boost__shared_ptrT_bgsched__allocator__Impl_t,
  _swigc__p_boost__shared_ptrT_bgsched__allocator__Midplanes_const_t,
  _swigc__p_boost__shared_ptrT_bgsched__core__Impl_t,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_f_r_q_const__bgsched__Coordinates_p_void__void,
  _swigc__p_f_r_q_const__std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void,
  _swigc__p_f_std__vector__unsigned_int_std__allocator__unsigned_int_____p_void__void,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_bgsched__Shape_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t,
  _swigc__p_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t,
  _swigc__p_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_bgsched__Block__Status_t,
  _swigc__p_std__lessT_bgsched__Dimension_t,
  _swigc__p_std__mapT_bgsched__Dimension_bgsched__Block__Connectivity__Value_std__lessT_bgsched__Dimension_t_std__allocatorT_std__pairT_bgsched__Dimension_const_bgsched__Block__Connectivity__Value_t_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__ostream,
  _swigc__p_std__setT_bgsched__Block__Status_std__lessT_bgsched__Block__Status_t_std__allocatorT_bgsched__Block__Status_t_t,
  _swigc__p_std__setT_bgsched__Job__Status_std__lessT_bgsched__Job__Status_t_std__allocatorT_bgsched__Job__Status_t_t,
  _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT__Tp__Alloc_t,
  _swigc__p_std__vectorT_bgsched__Shape_std__allocatorT_bgsched__Shape_t_t,
  _swigc__p_std__vectorT_bool_std__allocatorT_bool_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Block_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Block_t_std__allocatorT_boost__shared_ptrT_bgsched__Block_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Cable_t_std__allocatorT_boost__shared_ptrT_bgsched__Cable_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_const_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__IOLink_t_std__allocatorT_boost__shared_ptrT_bgsched__IOLink_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Job_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Job_t_std__allocatorT_boost__shared_ptrT_bgsched__Job_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Midplane_t_std__allocatorT_boost__shared_ptrT_bgsched__Midplane_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__NodeBoard_t_std__allocatorT_boost__shared_ptrT_bgsched__NodeBoard_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Node_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Node_t_std__allocatorT_boost__shared_ptrT_bgsched__Node_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Shape_t_std__allocatorT_boost__shared_ptrT_bgsched__Shape_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_std__allocatorT_boost__shared_ptrT_bgsched__SwitchSettings_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_const_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_const_t_t_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_bgsched__Switch_t_std__allocatorT_boost__shared_ptrT_bgsched__Switch_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_std__allocatorT_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_std__vectorT_unsigned_long_std__allocatorT_unsigned_long_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_uint8_t,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "SHARED_PTR_DISOWN",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "SortOrder_Ascending",SWIG_From_int(static_cast< int >(bgsched::core::SortOrder::Ascending)));
  SWIG_Python_SetConstant(d, "SortOrder_Descending",SWIG_From_int(static_cast< int >(bgsched::core::SortOrder::Descending)));
  SWIG_Python_SetConstant(d, "Dimension_A",SWIG_From_int(static_cast< int >(bgsched::Dimension::A)));
  SWIG_Python_SetConstant(d, "Dimension_B",SWIG_From_int(static_cast< int >(bgsched::Dimension::B)));
  SWIG_Python_SetConstant(d, "Dimension_C",SWIG_From_int(static_cast< int >(bgsched::Dimension::C)));
  SWIG_Python_SetConstant(d, "Dimension_D",SWIG_From_int(static_cast< int >(bgsched::Dimension::D)));
  SWIG_Python_SetConstant(d, "Dimension_E",SWIG_From_int(static_cast< int >(bgsched::Dimension::E)));
  SWIG_Python_SetConstant(d, "Dimension_InvalidDimension",SWIG_From_int(static_cast< int >(bgsched::Dimension::InvalidDimension)));
  SWIG_Python_SetConstant(d, "Dimension_MidplaneDims",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Dimension::MidplaneDims)));
  SWIG_Python_SetConstant(d, "Dimension_NodeDims",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Dimension::NodeDims)));
  SWIG_Python_SetConstant(d, "Job_Setup",SWIG_From_int(static_cast< int >(bgsched::Job::Setup)));
  SWIG_Python_SetConstant(d, "Job_Loading",SWIG_From_int(static_cast< int >(bgsched::Job::Loading)));
  SWIG_Python_SetConstant(d, "Job_Starting",SWIG_From_int(static_cast< int >(bgsched::Job::Starting)));
  SWIG_Python_SetConstant(d, "Job_Running",SWIG_From_int(static_cast< int >(bgsched::Job::Running)));
  SWIG_Python_SetConstant(d, "Job_Debug",SWIG_From_int(static_cast< int >(bgsched::Job::Debug)));
  SWIG_Python_SetConstant(d, "Job_Cleanup",SWIG_From_int(static_cast< int >(bgsched::Job::Cleanup)));
  SWIG_Python_SetConstant(d, "Job_Terminated",SWIG_From_int(static_cast< int >(bgsched::Job::Terminated)));
  SWIG_Python_SetConstant(d, "Job_Error",SWIG_From_int(static_cast< int >(bgsched::Job::Error)));
  SWIG_Python_SetConstant(d, "JobSort_Field_Id",SWIG_From_int(static_cast< int >(JobSort_Field::Id)));
  SWIG_Python_SetConstant(d, "JobSort_Field_User",SWIG_From_int(static_cast< int >(JobSort_Field::User)));
  SWIG_Python_SetConstant(d, "JobSort_Field_Block",SWIG_From_int(static_cast< int >(JobSort_Field::Block)));
  SWIG_Python_SetConstant(d, "JobSort_Field_Executable",SWIG_From_int(static_cast< int >(JobSort_Field::Executable)));
  SWIG_Python_SetConstant(d, "JobSort_Field_StartTime",SWIG_From_int(static_cast< int >(JobSort_Field::StartTime)));
  SWIG_Python_SetConstant(d, "JobSort_Field_EndTime",SWIG_From_int(static_cast< int >(JobSort_Field::EndTime)));
  SWIG_Python_SetConstant(d, "JobSort_Field_ExitStatus",SWIG_From_int(static_cast< int >(JobSort_Field::ExitStatus)));
  SWIG_Python_SetConstant(d, "JobSort_Field_Status",SWIG_From_int(static_cast< int >(JobSort_Field::Status)));
  SWIG_Python_SetConstant(d, "JobSort_Field_ComputeNodesUsed",SWIG_From_int(static_cast< int >(JobSort_Field::ComputeNodesUsed)));
  SWIG_Python_SetConstant(d, "JobSort_Field_RanksPerNode",SWIG_From_int(static_cast< int >(JobSort_Field::RanksPerNode)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"JobSort_AnyOrder",Swig_var_JobSort_AnyOrder_get, Swig_var_JobSort_AnyOrder_set);
  SWIG_Python_SetConstant(d, "JobType_Active",SWIG_From_int(static_cast< int >(JobType::Active)));
  SWIG_Python_SetConstant(d, "JobType_Completed",SWIG_From_int(static_cast< int >(JobType::Completed)));
  SWIG_Python_SetConstant(d, "JobType_All",SWIG_From_int(static_cast< int >(JobType::All)));
  SWIG_Python_SetConstant(d, "Hardware_Available",SWIG_From_int(static_cast< int >(bgsched::Hardware::Available)));
  SWIG_Python_SetConstant(d, "Hardware_Missing",SWIG_From_int(static_cast< int >(bgsched::Hardware::Missing)));
  SWIG_Python_SetConstant(d, "Hardware_Error",SWIG_From_int(static_cast< int >(bgsched::Hardware::Error)));
  SWIG_Python_SetConstant(d, "Hardware_Service",SWIG_From_int(static_cast< int >(bgsched::Hardware::Service)));
  SWIG_Python_SetConstant(d, "Hardware_SoftwareFailure",SWIG_From_int(static_cast< int >(bgsched::Hardware::SoftwareFailure)));
  SWIG_Python_SetConstant(d, "SwitchSettings_In",SWIG_From_int(static_cast< int >(bgsched::SwitchSettings::In)));
  SWIG_Python_SetConstant(d, "SwitchSettings_Out",SWIG_From_int(static_cast< int >(bgsched::SwitchSettings::Out)));
  SWIG_Python_SetConstant(d, "SwitchSettings_Both",SWIG_From_int(static_cast< int >(bgsched::SwitchSettings::Both)));
  SWIG_Python_SetConstant(d, "Switch_NotInUse",SWIG_From_int(static_cast< int >(bgsched::Switch::NotInUse)));
  SWIG_Python_SetConstant(d, "Switch_IncludedBothPortsInUse",SWIG_From_int(static_cast< int >(bgsched::Switch::IncludedBothPortsInUse)));
  SWIG_Python_SetConstant(d, "Switch_IncludedOutputPortInUse",SWIG_From_int(static_cast< int >(bgsched::Switch::IncludedOutputPortInUse)));
  SWIG_Python_SetConstant(d, "Switch_IncludedInputPortInUse",SWIG_From_int(static_cast< int >(bgsched::Switch::IncludedInputPortInUse)));
  SWIG_Python_SetConstant(d, "Switch_Wrapped",SWIG_From_int(static_cast< int >(bgsched::Switch::Wrapped)));
  SWIG_Python_SetConstant(d, "Switch_Passthrough",SWIG_From_int(static_cast< int >(bgsched::Switch::Passthrough)));
  SWIG_Python_SetConstant(d, "Switch_WrappedPassthrough",SWIG_From_int(static_cast< int >(bgsched::Switch::WrappedPassthrough)));
  SWIG_Python_SetConstant(d, "NodeBoard_Q1",SWIG_From_int(static_cast< int >(bgsched::NodeBoard::Q1)));
  SWIG_Python_SetConstant(d, "NodeBoard_Q2",SWIG_From_int(static_cast< int >(bgsched::NodeBoard::Q2)));
  SWIG_Python_SetConstant(d, "NodeBoard_Q3",SWIG_From_int(static_cast< int >(bgsched::NodeBoard::Q3)));
  SWIG_Python_SetConstant(d, "NodeBoard_Q4",SWIG_From_int(static_cast< int >(bgsched::NodeBoard::Q4)));
  SWIG_Python_SetConstant(d, "NodeBoard_NodeCount",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::NodeBoard::NodeCount)));
  SWIG_Python_SetConstant(d, "Midplane_NotInUse",SWIG_From_int(static_cast< int >(bgsched::Midplane::NotInUse)));
  SWIG_Python_SetConstant(d, "Midplane_AllInUse",SWIG_From_int(static_cast< int >(bgsched::Midplane::AllInUse)));
  SWIG_Python_SetConstant(d, "Midplane_SubdividedInUse",SWIG_From_int(static_cast< int >(bgsched::Midplane::SubdividedInUse)));
  SWIG_Python_SetConstant(d, "Midplane_Eighth",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Midplane::Eighth)));
  SWIG_Python_SetConstant(d, "Midplane_Quarter",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Midplane::Quarter)));
  SWIG_Python_SetConstant(d, "Midplane_Half",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Midplane::Half)));
  SWIG_Python_SetConstant(d, "Midplane_NodeCount",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Midplane::NodeCount)));
  SWIG_Python_SetConstant(d, "Midplane_MaxNodeBoards",SWIG_From_unsigned_SS_int(static_cast< unsigned int >(bgsched::Midplane::MaxNodeBoards)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_DatabaseError",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::DatabaseError)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_OperationFailed",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::OperationFailed)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_InvalidKey",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::InvalidKey)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_DataNotFound",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::DataNotFound)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_DuplicateEntry",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::DuplicateEntry)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_XmlError",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::XmlError)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_ConnectionError",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::ConnectionError)));
  SWIG_Python_SetConstant(d, "DatabaseErrors_UnexpectedError",SWIG_From_int(static_cast< int >(bgsched::DatabaseErrors::UnexpectedError)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_ComputeNodeCount",SWIG_From_int(static_cast< int >(BlockSort_Field::ComputeNodeCount)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_CreateDate",SWIG_From_int(static_cast< int >(BlockSort_Field::CreateDate)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_Name",SWIG_From_int(static_cast< int >(BlockSort_Field::Name)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_Owner",SWIG_From_int(static_cast< int >(BlockSort_Field::Owner)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_User",SWIG_From_int(static_cast< int >(BlockSort_Field::User)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_Status",SWIG_From_int(static_cast< int >(BlockSort_Field::Status)));
  SWIG_Python_SetConstant(d, "BlockSort_Field_StatusLastModified",SWIG_From_int(static_cast< int >(BlockSort_Field::StatusLastModified)));
  SWIG_addvarlink(SWIG_globals(),(char*)"BlockSort_AnyOrder",Swig_var_BlockSort_AnyOrder_get, Swig_var_BlockSort_AnyOrder_set);
  SWIG_Python_SetConstant(d, "Connectivity_Torus",SWIG_From_int(static_cast< int >(Connectivity::Torus)));
  SWIG_Python_SetConstant(d, "Connectivity_Mesh",SWIG_From_int(static_cast< int >(Connectivity::Mesh)));
  SWIG_Python_SetConstant(d, "Block_Allocated",SWIG_From_int(static_cast< int >(bgsched::Block::Allocated)));
  SWIG_Python_SetConstant(d, "Block_Booting",SWIG_From_int(static_cast< int >(bgsched::Block::Booting)));
  SWIG_Python_SetConstant(d, "Block_Free",SWIG_From_int(static_cast< int >(bgsched::Block::Free)));
  SWIG_Python_SetConstant(d, "Block_Initialized",SWIG_From_int(static_cast< int >(bgsched::Block::Initialized)));
  SWIG_Python_SetConstant(d, "Block_Terminating",SWIG_From_int(static_cast< int >(bgsched::Block::Terminating)));
  SWIG_Python_SetConstant(d, "BlockSize_Large",SWIG_From_int(static_cast< int >(BlockSize::Large)));
  SWIG_Python_SetConstant(d, "BlockSize_Small",SWIG_From_int(static_cast< int >(BlockSize::Small)));
  SWIG_Python_SetConstant(d, "BlockSize_All",SWIG_From_int(static_cast< int >(BlockSize::All)));
  SWIG_Python_SetConstant(d, "SchedUtil_Errors_InputVectorSizeMismatch",SWIG_From_int(static_cast< int >(SchedUtil_Errors::InputVectorSizeMismatch)));
  SWIG_Python_SetConstant(d, "SchedUtil_Errors_VectorIndexOutOfBounds",SWIG_From_int(static_cast< int >(SchedUtil_Errors::VectorIndexOutOfBounds)));
  SWIG_Python_SetConstant(d, "InitializationErrors_DatabaseInitializationFailed",SWIG_From_int(static_cast< int >(bgsched::InitializationErrors::DatabaseInitializationFailed)));
  SWIG_Python_SetConstant(d, "InitializationErrors_MalformedPropertiesFile",SWIG_From_int(static_cast< int >(bgsched::InitializationErrors::MalformedPropertiesFile)));
  SWIG_Python_SetConstant(d, "InitializationErrors_PropertiesNotFound",SWIG_From_int(static_cast< int >(bgsched::InitializationErrors::PropertiesNotFound)));
  SWIG_Python_SetConstant(d, "InternalErrors_XMLParseError",SWIG_From_int(static_cast< int >(bgsched::InternalErrors::XMLParseError)));
  SWIG_Python_SetConstant(d, "InternalErrors_InconsistentDataError",SWIG_From_int(static_cast< int >(bgsched::InternalErrors::InconsistentDataError)));
  SWIG_Python_SetConstant(d, "InternalErrors_UnexpectedError",SWIG_From_int(static_cast< int >(bgsched::InternalErrors::UnexpectedError)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidMidplaneCoordinates",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidMidplaneCoordinates)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidLocationString",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidLocationString)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockSize",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockSize)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockName",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockName)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockDescription",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockDescription)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockOptions",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockOptions)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockBootOptions",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockBootOptions)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockMicroLoaderImage",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockMicroLoaderImage)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockNodeConfiguration",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockNodeConfiguration)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidBlockInfo",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidBlockInfo)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidNodeBoards",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidNodeBoards)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidDimension",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidDimension)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidNodeBoardCount",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidNodeBoardCount)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidNodeBoardPosition",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidNodeBoardPosition)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidMidplanes",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidMidplanes)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidPassthroughMidplanes",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidPassthroughMidplanes)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidConnectivity",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidConnectivity)));
  SWIG_Python_SetConstant(d, "InputErrors_BlockNotFound",SWIG_From_int(static_cast< int >(bgsched::InputErrors::BlockNotFound)));
  SWIG_Python_SetConstant(d, "InputErrors_BlockNotAdded",SWIG_From_int(static_cast< int >(bgsched::InputErrors::BlockNotAdded)));
  SWIG_Python_SetConstant(d, "InputErrors_BlockNotCreated",SWIG_From_int(static_cast< int >(bgsched::InputErrors::BlockNotCreated)));
  SWIG_Python_SetConstant(d, "InputErrors_InvalidUser",SWIG_From_int(static_cast< int >(bgsched::InputErrors::InvalidUser)));
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeInterval_ALL",Swig_var_TimeInterval_ALL_get, Swig_var_TimeInterval_ALL_set);
  SWIG_Python_SetConstant(d, "RuntimeErrors_BlockBootError",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::BlockBootError)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_BlockFreeError",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::BlockFreeError)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_BlockCreateError",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::BlockCreateError)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_BlockAddError",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::BlockAddError)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_InvalidBlockState",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::InvalidBlockState)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_DimensionOutOfRange",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::DimensionOutOfRange)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_AuthorityError",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::AuthorityError)));
  SWIG_Python_SetConstant(d, "RuntimeErrors_HardwareInUseError",SWIG_From_int(static_cast< int >(bgsched::RuntimeErrors::HardwareInUseError)));
  SWIG_addvarlink(SWIG_globals(),(char*)"major",Swig_var_major_get, Swig_var_major_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"minor",Swig_var_minor_get, Swig_var_minor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"mod",Swig_var_mod_get, Swig_var_mod_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"driver",Swig_var_driver_get, Swig_var_driver_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

